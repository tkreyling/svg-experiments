{"version":3,"sources":["v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/assertNever.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/shapes/getElementLeftX.tsx","v2/shapes/getElementTopY.tsx","v2/shapes/Symbols.tsx","v2/shapes/NodeShape.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/shapes/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sorting.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/shapes/EdgeShape.tsx","v2/edgesLayout/ConnectionIndexAndNumberOfEdges.tsx","v2/edgesLayout/SyntheticNodesAndEdges.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/edgesLayout/EdgeIndex.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetX.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetMaxX.tsx","v2/Diagram.tsx","v2/Sample.tsx","v2/NewArchitecture.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/sorting.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","result","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","assertNever","x","Error","element","syntheticNodes","syntheticEdges","transformElements","f","transformElementsUsingGraph","node","nameOrProperties","defaults","visible","shape","Object","assign","gap","db","queue","allNodes","flatMap","allContainers","concat","allElements","MARGIN_Y","MARGIN_X","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","getElementLeftX","offsetElementsX","borderIndexMaxX","borderIndexLeft","crossLayerPathSegmentOffsetMaxX","getElementTopY","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","ComponentSymbol","barWidthAbsolute","width","barHeightAbsolute","key","symbolKey","y","height","fill","strokeWidth","stroke","DB_CYLINDER_ELLIPSE_Y","QUEUE_CYLINDER_ELLIPSE_X","NodeShape","elementKey","d","clipPath","SYMBOL_WIDTH","addOffsetElementsYG","addOffsetElementsY","accumulator","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","map","reduce","sum","add","DEPLOYMENT_BOX_INDENT","DEPLOYMENT_BOX_3D_OFFSET","ContainerShape","container","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","embeddedMidPathSegmentY","borderIndexBottom","border","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","length","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTopGraph","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","ascending","property","o1","o2","descending","and","sortFunctions","i","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","sums","addBorderIndexMaxBottom","addition","get","calculateEmbeddedBorders","current","embeddedBorders","borderIndexMaxBottom","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getLeftUpperNode","fromIsLeftUpper","edgeEndCoordinates","edgeIndex","otherNode","onLowerSide","nodeCenteringOffset","lowerSideEdges","upperSideEdges","EdgeShape","fromNode","fromIndex","upperNodeEdgesY","midPathSegmentOffsetY","toNode","toIndex","lowerLayerEdge","lowerNodeEdgesY","besideTopNodeX","crossLayerPathSegmentOffsetX","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","push","reverseNode","index","values","sameLayer","filter","edgeEnd","before","after","otherLayer","otherLayerBefore","otherLayerAfter","addConnectionIndexAndNumberOfEdges","edgesWithConnectionIndex","getLowerRightNodeIndex","getUpperLeftNodeIndex","isMultiLayerEdge","abs","addSyntheticNodesAndEdgesG","grid","lowerRightNode","upperLeftNode","min","has","lowerLayerEdgeProperty","isLowerLayerEdge","originalEdge","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","nodeKeys","keys","indexOffset","nodeKey","sameLayerBefore","sameLayerAfter","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","addMidPathSegmentOffsetYAggregates","maxOffsetY","maxs","determineMidPathSegmentMaxOffsetY","layer","sumOfPreviousRowsFillLayers","applyMidPathSegmentOffsetYAggregates","calculateEmbeddedPaths","embeddedPaths","midPathSegmentOffsetMaxY","addEdgeIndexG","addCrossLayerPathSegmentOffsetXG","groupedByOffsetElementsX","addCrossLayerPathSegmentOffsetXForSlice","addCrossLayerPathSegmentOffsetX","addOffset","addCrossLayerPathSegmentOffsetMaxXG","determineAndAddCrossLayerPathSegmentOffsetMaxX","addCrossLayerPathSegmentOffsetMaxX","Diagram","props","viewBox","c","Sample","node_1_1","node_1_2","node_2_1","node_2_2","node_3_1","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_5_2","node_6_1","node_6_2","node_6_3","node_6_4","node_7_1","node_7_2","node_8_1","node_8_2","NewArchitecture","factFinderDB","factFinderAPI","factFinderFeedServiceDB","factFinderUpdater","ffProductImporter","ffProductCampaignsImporter","ffCategoryImporter","search","searchEdges","productCampaignsImporter","nightlyStockImporter","nearTimeStockImporter","deliveryTimeImporter","productService","productServiceEdges","productStream","productExporter","productCampaignsStream","productCampaignsExporter","nightlyStockStream","nightlyStockExporter","productExporterService","productExporterServiceEdges","stockStream","stockExporter","stockExporterService","stockExporterServiceEdges","deliveryTimeStream","deliveryTimeExporter","deliveryTimeExporterService","deliveryTimeExporterServiceEdges","categoryStream","categoryExporter","categoryExporterService","categoryExporterServiceEdges","coreServices","coreServicesEdges","coreExporter","coreExporterEdges","core","coreEdges","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","allGroups","isComponent","data-testid","GroupShape","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.634c6313.chunk.js","sourcesContent":["import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {assertNever} from \"./assertNever\";\n\ntype Symbols = \"component\"\n\ntype Shapes = \"rectangle\" | \"db-cylinder\" | \"queue-cylinder\"\n\nexport type Node = {\n    kind: \"node\",\n} & NodeProperties;\n\nexport type NodeProperties = {\n    name?: string,\n    visible?: boolean,\n    shape?: Shapes,\n    symbol?: Symbols\n};\n\nexport type Row<N> = {\n    kind: \"row\"\n} & ContainerProperties<N>;\n\nexport type Column<N> = {\n    kind: \"column\"\n} & ContainerProperties<N>;\n\ntype Borders = \"solid\" | \"deployment-box\"\n\ntype ContainerProperties<N> = {\n    name?: string,\n    border?: Borders,\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n    syntheticNodes: (Node & N)[]\n    syntheticEdges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(\n    element: Element<N>,\n    edges: Edge<N, E>[] = [],\n    syntheticNodes: (Node & N)[] = [],\n    syntheticEdges: Edge<N, E>[] = []\n): Graph<N, E> {\n    return {element, edges, syntheticNodes, syntheticEdges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(nameOrProperties?: string | NodeProperties): Node {\n    let defaults: Node = {\n        kind: \"node\",\n        visible: true,\n        shape: \"rectangle\"\n    };\n    if (!nameOrProperties) {\n        return defaults;\n    } else if (typeof nameOrProperties === 'string') {\n        return Object.assign<Node, NodeProperties>(defaults, {name: nameOrProperties});\n    } else {\n        return Object.assign<Node, NodeProperties>(defaults, nameOrProperties);\n    }\n}\n\nexport function gap(): Node {\n    return node({visible: false});\n}\n\nexport function component(name: string): Node {\n    return node({name: name, symbol: \"component\"});\n}\n\nexport function db(name: string): Node {\n    return node({name: name, shape: \"db-cylinder\"});\n}\n\nexport function queue(name: string): Node {\n    return node({name: name, shape: \"queue-cylinder\"});\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}\n\nexport function allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allElements<N>(element: Element<N>): Element<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allElements).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}","export const MARGIN_Y = 5;\nexport const MARGIN_X = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 50;\nexport const BORDER_SPACING_X = 15;\nexport const BORDER_SPACING_TOP = 40;\nexport const BORDER_SPACING_BOTTOM = 15;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;\nexport const TEXT_PADDING = 5;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;","import {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"../elementsLayout/BorderIndexMaxX\";\nimport {CrossLayerPathSegmentOffsetMaxX} from \"../edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {BORDER_SPACING_X, EDGE_SPACING, ELEMENT_WIDTH, HORIZONTAL_SPACING, MARGIN_X} from \"../styling\";\nimport {BorderIndexLeft} from \"../elementsLayout/BorderIndexLeft\";\n\nexport type RequiredNodeDataGetElementLeftX =\n    OffsetElementsX &\n    BorderIndexLeft & BorderIndexMaxX &\n    CrossLayerPathSegmentOffsetMaxX\n\nexport function getElementLeftX(element: RequiredNodeDataGetElementLeftX) {\n    return MARGIN_X\n        + element.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n        + (element.borderIndexMaxX * (element.offsetElementsX * 2 + 1) - element.borderIndexLeft) * BORDER_SPACING_X\n        + element.crossLayerPathSegmentOffsetMaxX * element.offsetElementsX * EDGE_SPACING;\n}","import {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexTop} from \"../elementsLayout/BorderIndexTop\";\n\nexport type RequiredNodeDataGetElementTopY =\n    OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY\n\nexport function getElementTopY(element: RequiredNodeDataGetElementTopY) {\n    return MARGIN_Y\n        + element.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop - element.borderIndexTop) * BORDER_SPACING_TOP\n        + element.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + element.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"../styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\n\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {\n    BORDER_SPACING_X,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH,\n    SYMBOL_SPACING,\n    SYMBOL_WIDTH,\n    TEXT_PADDING\n} from \"../styling\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {Node} from \"../newGraphModel\"\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nconst DB_CYLINDER_ELLIPSE_Y = BORDER_SPACING_X * 0.5;\nconst QUEUE_CYLINDER_ELLIPSE_X = BORDER_SPACING_X * 0.4;\n\ntype Props = Node & ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY;\n\nexport const NodeShape: React.FC<Props> = node => {\n    if (!node.visible) return null;\n\n    let x = getElementLeftX(node);\n    let y = getElementTopY(node);\n\n    return (\n        <g key={node.elementKey}>\n            {node.shape === \"rectangle\" &&\n            <rect\n                x={x} y={y}\n                width={ELEMENT_WIDTH}\n                height={ELEMENT_HEIGHT}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            }\n            {node.shape === \"db-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"V \" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + x + \",\" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,0 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.shape === \"queue-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT) + \" \" +\n                    \"H \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \",\" + y + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,1 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.name &&\n            <g>\n                <text\n                    x={x + TEXT_PADDING + (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                    y={y + ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.7 : 0.5)}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + node.elementKey + \")\"}>{node.name}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + node.elementKey}>\n                    <rect\n                        x={x + TEXT_PADDING + (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                        y={y}\n                        width={ELEMENT_WIDTH - 2 * TEXT_PADDING\n                        - (node.symbol ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)\n                        - (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                        height={ELEMENT_HEIGHT}/>\n                </clipPath>\n            </g>\n            }\n            {node.symbol &&\n            <ComponentSymbol\n                symbolKey={node.elementKey + \"CS\"}\n                x={x + ELEMENT_WIDTH - SYMBOL_WIDTH - SYMBOL_SPACING}\n                y={y + SYMBOL_SPACING}\n                width={SYMBOL_WIDTH}/>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {Container} from \"../newGraphModel\";\nimport {EmbeddedElementsX} from \"../elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxBottom, EmbeddedBorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {EmbeddedBorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"../elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"../elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"../elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {EmbeddedMidPathSegmentY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nconst DEPLOYMENT_BOX_INDENT = BORDER_SPACING_X * 0.3;\nconst DEPLOYMENT_BOX_3D_OFFSET = BORDER_SPACING_X * 0.4;\n\ntype Props = Container<\n    ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    EmbeddedElementsX & EmbeddedElementsY &\n    BorderIndexRight &\n    EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & EmbeddedBorderIndexMaxBottom &\n    EmbeddedMidPathSegmentY>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    let x = getElementLeftX(container);\n    let y = getElementTopY(container);\n    let width = container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n        + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n        + (container.embeddedElementsX - 1) * container.crossLayerPathSegmentOffsetMaxX * EDGE_SPACING;\n    let height = container.embeddedElementsY * ELEMENT_HEIGHT +\n        (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n        container.borderIndexTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n        container.embeddedMidPathSegmentY * EDGE_SPACING +\n        container.borderIndexBottom * BORDER_SPACING_BOTTOM;\n    return (\n        <g key={container.elementKey}>\n            {(container.border === \"solid\") &&\n            <rect\n                x={x}\n                y={y}\n                width={width}\n                height={height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n            }\n\n            {(container.border === \"deployment-box\") &&\n            <g>\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" +\n                    \"V \" + (y + height - 2 * DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + height - DEPLOYMENT_BOX_INDENT) +\n                    \"H \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"V \" + (y + height - DEPLOYMENT_BOX_INDENT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n\n            {container.name &&\n            <g>\n                <text\n                    x={x + BORDER_SPACING_X}\n                    y={y + ELEMENT_HEIGHT * 0.55}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + container.elementKey + \")\"}>{container.name}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + container.elementKey}>\n                    <rect\n                        x={x + BORDER_SPACING_X}\n                        y={y}\n                        width={width - 2 * BORDER_SPACING_X}\n                        height={ELEMENT_HEIGHT}/>\n                </clipPath>\n            </g>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexTop, E>(graph, addBorderIndexTopGraph);\n}\n\nfunction addBorderIndexTopGraph(graph: Graph<unknown, unknown>) {\n    addBorderIndexTop(graph.element);\n    graph.syntheticNodes.forEach(node => Object.assign<Node, BorderIndexTop>(node, {borderIndexTop: 0}));\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {ascending} from \"./sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {assertNever} from \"./assertNever\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(graph: Graph<OffsetElementsY & BorderIndexBottom, unknown>) {\n    let max = determineBorderIndexMaxBottom(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxBottom(node, max, sums));\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(graph: Graph<OffsetElementsY & BorderIndexTop, unknown>) {\n    let max = determineBorderIndexMaxTop(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxTop(node, max, sums));\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nexport function fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}\n\nexport function fromIsLeftUpper<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsX === edge.to.offsetElementsX) {\n        return edge.from.offsetElementsY <= edge.to.offsetElementsY;\n    }\n    return edge.from.offsetElementsX < edge.to.offsetElementsX;\n}\n\nexport function getLeftUpperNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsLeftUpper(edge) ? edge.from : edge.to;\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {Edge} from \"../newGraphModel\";\nimport {getLeftUpperNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {MidPathSegmentOffsetY} from \"../edgesLayout/MidPathSegmentOffsetY\";\nimport {ConnectionIndex, NumberOfEdges} from \"../edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"../edgesLayout/EdgeIndex\";\nimport {IsLowerLayerEdge, LowerLayerEdge, OriginalEdge} from \"../edgesLayout/SyntheticNodesAndEdges\";\nimport {CrossLayerPathSegmentOffsetX} from \"../edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nfunction edgeEndCoordinates<N extends RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    let nodeCenteringOffset = (ELEMENT_WIDTH - (((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) || 0) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: getElementLeftX(node) + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: getElementTopY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    BorderIndexMaxBottom &\n    NumberOfEdges,\n    LowerLayerEdge<any, unknown> & EdgeIndex & MidPathSegmentOffsetY & ConnectionIndex & CrossLayerPathSegmentOffsetX>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getElementTopY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    if (!edge.lowerLayerEdge) {\n        return (\n            <path key={edge.edgeIndex} d={\n                \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                \"V \" + upperNodeEdgesY + \" \" +\n                \"H \" + toNode.x + \" \" +\n                \"V \" + toNode.y\n            }\n                  stroke=\"black\"\n                  strokeWidth={STROKE_WIDTH}\n                  fill=\"none\"\n            />\n        );\n    } else {\n        let lowerLayerEdge = edge.lowerLayerEdge as Edge<unknown, MidPathSegmentOffsetY> & IsLowerLayerEdge & OriginalEdge<unknown, unknown>;\n        let lowerNodeEdgesY = getElementTopY(getUpperLeftNode(edge.lowerLayerEdge))\n            + ELEMENT_HEIGHT\n            + getUpperLeftNode(edge.lowerLayerEdge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n            + VERTICAL_SPACING / 2\n            + lowerLayerEdge.midPathSegmentOffsetY * EDGE_SPACING;\n        let besideTopNodeX = getElementLeftX(getLeftUpperNode(edge))\n            + ELEMENT_WIDTH + getUpperLeftNode(edge).borderIndexMaxX * BORDER_SPACING_X\n            + (edge.crossLayerPathSegmentOffsetX! + 1) * EDGE_SPACING;\n        return (\n            <path key={edge.edgeIndex} d={\n                \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                \"V \" + upperNodeEdgesY + \" \" +\n                \"H \" + besideTopNodeX + \" \" +\n                \"V \" + lowerNodeEdgesY + \" \" +\n                \"H \" + toNode.x + \" \" +\n                \"V \" + toNode.y\n            }\n                  stroke=\"black\"\n                  strokeWidth={STROKE_WIDTH}\n                  fill=\"none\"\n            />\n        );\n    }\n};","import {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {and, ascending, descending} from \"../sorting\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {fromIsUpperLeft} from \"../EdgeHelper\";\n\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\nexport type NumberOfEdges = {\n    upperSideEdges?: number\n    lowerSideEdges?: number\n}\n\nexport function addConnectionIndexAndNumberOfEdgesG<\n    N extends OffsetElementsY & OffsetElementsX & ElementKey,\n    E extends EdgeIndex & LowerLayerEdge<unknown, unknown>, G>(\n        graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    let edgesWithConnectionIndex = graph.edges as unknown as Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[];\n    copyConnectionIndexToLowerLayerEdge(edgesWithConnectionIndex);\n    return graph as Graph<N & NumberOfEdges, E & ConnectionIndex>;\n}\n\ntype EdgeType = Edge<OffsetElementsY & OffsetElementsX & ElementKey, EdgeIndex>\n\nexport function addConnectionIndexAndNumberOfEdges(edges: EdgeType[]) {\n    type NodeSide = {\n        node: OffsetElementsY & OffsetElementsX\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        edge: EdgeType\n        reverseNode: OffsetElementsY & OffsetElementsX\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(edge: EdgeType, firstNode: OffsetElementsY & OffsetElementsX & ElementKey, secondNode: OffsetElementsY & OffsetElementsX, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.offsetElementsY <= secondNode.offsetElementsY ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.elementKey + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            edge: edge,\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge, edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge, edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY === node.offsetElementsY);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY !== node.offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n\n        before.sort(and(descending(e => e.reverseNode.offsetElementsX), descending(e => e.edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(e => e.reverseNode.offsetElementsX), descending(e => e.reverseNode.offsetElementsY)));\n        otherLayerAfter.sort(and(ascending(e => e.reverseNode.offsetElementsX), ascending(e => e.reverseNode.offsetElementsY)));\n        after.sort(and(descending(e => e.reverseNode.offsetElementsX), ascending(e => e.edge.edgeIndex)));\n\n        let all = before.concat(otherLayerBefore).concat(otherLayerAfter).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nfunction copyConnectionIndexToLowerLayerEdge(edges: Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[]) {\n    edges.forEach(edge => {\n        if (edge.lowerLayerEdge) {\n            Object.assign<Edge<unknown, unknown>, ConnectionIndex>(edge.lowerLayerEdge, {\n                fromIndex: 0,\n                toIndex: getLowerRightNodeIndex(edge)\n            });\n        }\n    });\n}\n\nexport function getUpperLeftNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.fromIndex : edge.toIndex;\n}\n\nexport function getLowerRightNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.toIndex : edge.fromIndex;\n}","import {allElements, allNodes, Edge, Graph, Node, node} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY & ElementKey\n\nexport type IsLowerLayerEdge = {\n    isLowerLayerEdge: true\n};\n\nexport type OriginalEdge<N, E> = {\n    originalEdge: Edge<N, E>\n};\n\nexport type LowerLayerEdge<N, E> = {\n    lowerLayerEdge?: Edge<N, E> & IsLowerLayerEdge & OriginalEdge<N, E>\n}\n\nexport function isMultiLayerEdge(edge: Edge<OffsetElementsY, unknown>) {\n    return Math.abs(edge.from.offsetElementsY - edge.to.offsetElementsY) >= 2;\n}\n\nexport function addSyntheticNodesAndEdgesG(graph: Graph<NodeData, unknown>): Graph<NodeData, LowerLayerEdge<NodeData, unknown>> {\n    let elementKey = Math.max(...allElements(graph.element).map(element => element.elementKey));\n\n    let grid = new Map<string, boolean>();\n    allNodes(graph.element)\n        .filter(node => node.visible)\n        .forEach(node => grid.set(node.offsetElementsX + \"_\" + node.offsetElementsY, true));\n\n    function nodesOnPath(edge: Edge<OffsetElementsX & OffsetElementsY, unknown>): boolean {\n        let lowerRightNode = getLowerRightNode(edge);\n        let upperLeftNode = getUpperLeftNode(edge);\n        let offsetElementsX = Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX);\n\n        for (let i = upperLeftNode.offsetElementsY + 1; i <= lowerRightNode.offsetElementsY - 1; i++) {\n            if (grid.has(offsetElementsX + \"_\" + i)) return true;\n        }\n        return false;\n    }\n\n    let syntheticNodes: NodeData[] = [];\n    let syntheticEdges = graph.edges\n        .filter(isMultiLayerEdge)\n        .filter(nodesOnPath)\n        .map(edge => {\n            let lowerRightNode = getLowerRightNode(edge);\n            let upperLeftNode = getUpperLeftNode(edge);\n            elementKey++;\n            let from: NodeData = Object.assign<Node, NodeData>(node(), {\n                elementKey: elementKey,\n                offsetElementsY: lowerRightNode.offsetElementsY - 1,\n                offsetElementsX: Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX)\n            });\n            syntheticNodes.push(from);\n            let lowerLayerEdgeProperty: LowerLayerEdge<NodeData, unknown> = {\n                lowerLayerEdge: {\n                    from: from,\n                    to: lowerRightNode,\n                    isLowerLayerEdge: true,\n                    originalEdge: edge\n                }};\n            Object.assign<Edge<NodeData, unknown>, LowerLayerEdge<NodeData, unknown>>(\n                edge, lowerLayerEdgeProperty);\n            return lowerLayerEdgeProperty.lowerLayerEdge;\n        });\n\n    return Object.assign(graph, {syntheticNodes, syntheticEdges});\n}","import {and, ascending, descending} from \"../sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {\n    ConnectionIndex,\n    getLowerRightNodeIndex,\n    getUpperLeftNodeIndex,\n    NumberOfEdges\n} from \"./ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {IsLowerLayerEdge, isMultiLayerEdge, OriginalEdge} from \"./SyntheticNodesAndEdges\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX & NumberOfEdges, E extends ConnectionIndex & EdgeIndex>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY> {\n    addMidPathSegmentOffsetY(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).offsetElementsY;\n        let edges = groupedByOffsetElementsY.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsY.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return false;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return false;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 <\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX\n        });\n        let otherLayerAfter = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return true;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return true;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 >=\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX\n        });\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(\n            descending(edge => getLowerRightNode(edge).offsetElementsX),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return getUpperLeftNode(edgeWithOriginalEdge.originalEdge).offsetElementsX;\n            }),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return edgeWithOriginalEdge.originalEdge.edgeIndex;\n            }),\n            descending(edge => edge.edgeIndex)\n        ));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type MidPathSegmentOffsetMaxY = { midPathSegmentOffsetMaxY: number };\nexport type MidPathSegmentOffsetMaxPreviousY = { midPathSegmentOffsetMaxPreviousY: number }\nexport type EmbeddedMidPathSegmentY = { embeddedMidPathSegmentY: number };\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY & EmbeddedMidPathSegmentY\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = getMostBottomOffsetElementsY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges.concat(graph.syntheticEdges));\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, maxs, sums);\n    graph.syntheticNodes.forEach(node => applyMidPathSegmentOffsetYAggregates(node, maxs, sums));\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction calculateEmbeddedPaths(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedPaths = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedPaths += current.get(i) || 0;\n    }\n    return embeddedPaths;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Edge, Graph} from \"../newGraphModel\";\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addEdgeIndexG<N, E>(graph: Graph<N, E>):\n    Graph<N, E & EdgeIndex> {\n    addEdgeIndex(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & EdgeIndex>;\n}\n\nexport function addEdgeIndex(edges: Edge<unknown, unknown>[]) {\n    edges.forEach((edge, index) => {\n        Object.assign<Edge<unknown, unknown>, EdgeIndex>(\n            edge, {edgeIndex: index});\n    });\n}","import {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {getLeftUpperNode, getLowerRightNode} from \"../EdgeHelper\";\nimport {and, ascending} from \"../sorting\";\n\nexport type CrossLayerPathSegmentOffsetX = {\n    crossLayerPathSegmentOffsetX?: number\n}\n\nexport type RequiredNodeDataTypes = OffsetElementsX & OffsetElementsY\nexport type RequiredEdgeDataTypes = EdgeIndex & LowerLayerEdge<unknown, unknown>\nexport type RequiredEdgeType = Edge<RequiredNodeDataTypes, RequiredEdgeDataTypes>\n\nexport function addCrossLayerPathSegmentOffsetXG<N extends RequiredNodeDataTypes, E extends RequiredEdgeDataTypes>(graph: Graph<N, E>):\n    Graph<N, E & CrossLayerPathSegmentOffsetX> {\n    addCrossLayerPathSegmentOffsetX(graph.edges);\n    return graph as unknown as Graph<N, E & CrossLayerPathSegmentOffsetX>;\n}\n\nexport function addCrossLayerPathSegmentOffsetX(edges: RequiredEdgeType[]) {\n    let groupedByOffsetElementsX = new Map<number, RequiredEdgeType[]>();\n\n    edges.filter(edge => edge.lowerLayerEdge).forEach(edge => {\n        let key = getLeftUpperNode(edge).offsetElementsX;\n        let edges = groupedByOffsetElementsX.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsX.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsX.values()).forEach(addCrossLayerPathSegmentOffsetXForSlice);\n}\n\nfunction addCrossLayerPathSegmentOffsetXForSlice(edges: RequiredEdgeType[]) {\n    let groupedByUpperNode = new Map<string, RequiredEdgeType[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getLeftUpperNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        edges.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n\n        function addOffset(edge: RequiredEdgeType, indexInArray: number) {\n            let index = indexOffset + indexInArray;\n            Object.assign<RequiredEdgeType, CrossLayerPathSegmentOffsetX>(edge, {\n                crossLayerPathSegmentOffsetX: index\n            });\n        }\n\n        edges.forEach((edge, index) => addOffset(edge, index));\n\n        indexOffset += edges.length;\n    });\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {CrossLayerPathSegmentOffsetX} from \"./CrossLayerPathSegmentOffsetX\";\n\nexport type CrossLayerPathSegmentOffsetMaxX = { crossLayerPathSegmentOffsetMaxX: number };\n\ntype RequiredEdgeDataTypes = CrossLayerPathSegmentOffsetX;\n\nexport function addCrossLayerPathSegmentOffsetMaxXG<N, E extends RequiredEdgeDataTypes>(\n    graph: Graph<N, E>\n): Graph<N & CrossLayerPathSegmentOffsetMaxX, E> {\n    return transformElementsUsingGraph<N, CrossLayerPathSegmentOffsetMaxX, E>(graph, determineAndAddCrossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineAndAddCrossLayerPathSegmentOffsetMaxX(graph: Graph<unknown, RequiredEdgeDataTypes>) {\n    let crossLayerPathSegmentOffsetMaxX = determineCrossLayerPathSegmentOffsetMaxX(graph.edges);\n    addCrossLayerPathSegmentOffsetMaxX(graph.element, crossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineCrossLayerPathSegmentOffsetMaxX(edges: RequiredEdgeDataTypes[]): number {\n    return Math.max(...edges.map(edge => (edge.crossLayerPathSegmentOffsetX || 0) + 1), 0);\n}\n\nexport function addCrossLayerPathSegmentOffsetMaxX(element: Element<unknown>, crossLayerPathSegmentOffsetMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {allContainers, allNodes, Element, Graph} from \"./newGraphModel\";\nimport {NodeShape} from \"./shapes/NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG, OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG, OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./shapes/ContainerShape\";\nimport {addBorderIndexMaxXG, BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {\n    addBorderIndexMaxBottomG,\n    BorderIndexMaxBottom,\n    BorderIndexMaxPreviousBottom\n} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG, BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./shapes/EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {\n    addMidPathSegmentOffsetYAggregatesG,\n    MidPathSegmentOffsetMaxPreviousY,\n    MidPathSegmentOffsetMaxY\n} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {addEdgeIndexG} from \"./edgesLayout/EdgeIndex\";\nimport {addSyntheticNodesAndEdgesG} from \"./edgesLayout/SyntheticNodesAndEdges\";\nimport {addCrossLayerPathSegmentOffsetXG} from \"./edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {\n    addCrossLayerPathSegmentOffsetMaxXG,\n    CrossLayerPathSegmentOffsetMaxX\n} from \"./edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING, MARGIN_X, MARGIN_Y,\n    VERTICAL_SPACING\n} from \"./styling\";\n\nfunction width(element: Element<OffsetElementsX & BorderIndexMaxX & CrossLayerPathSegmentOffsetMaxX>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_X * 2\n            + element.offsetElementsX * HORIZONTAL_SPACING\n            + (element.offsetElementsX + 1) * ELEMENT_WIDTH\n            + element.borderIndexMaxX * (element.offsetElementsX + 1) * 2 * BORDER_SPACING_X\n            + element.crossLayerPathSegmentOffsetMaxX * (element.offsetElementsX + 1) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(width), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction height(element: Element<OffsetElementsY &\n    BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxBottom & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_Y * 2\n            + (element.offsetElementsY + 1) * VERTICAL_SPACING\n            + (element.offsetElementsY + 1) * ELEMENT_HEIGHT\n            + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop) * BORDER_SPACING_TOP\n            + (element.borderIndexMaxPreviousBottom + element.borderIndexMaxBottom) * BORDER_SPACING_BOTTOM\n            + (element.midPathSegmentOffsetMaxPreviousY + element.midPathSegmentOffsetMaxY) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(height), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\ntype DiagramProps = { graph: Graph<unknown, unknown> }\n\nexport const Diagram: React.FC<DiagramProps> = props => {\n    return [props.graph]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addSyntheticNodesAndEdgesG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addEdgeIndexG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(addCrossLayerPathSegmentOffsetXG)\n        .map(addCrossLayerPathSegmentOffsetMaxXG)\n        .map(graph => {\n            return (\n                <svg viewBox={\"0 0 \" + width(graph.element) + \" \" + height(graph.element)}>\n                    {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                    {allNodes(graph.element).map(NodeShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};","import React from \"react\";\nimport {edge, Element, gap, graph, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node(\"Some node\");\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node({name: \"Component node\", symbol: \"component\"});\n    let node_3_1 = node({name: \"Another component node\", symbol: \"component\"});\n    let node_3_2 = node();\n    let node_4_1 = node(\"Some node with long text\");\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let node_7_1 = node({visible: false});\n    let node_7_2 = node();\n    let node_8_1 = node();\n    let node_8_2 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", name: \"Top row\", border: \"solid\", elements: [{\n                kind: \"column\", name: \"Left column\", border: \"solid\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", name: \"Right column\", border: \"solid\", elements: [{\n                    kind: \"row\", name: \"Nested row\", border: \"solid\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }, node_7_1, {\n                kind: \"column\", elements: [node_8_1, gap(), node_8_2]\n            }, node_7_2]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", name: \"Bottom row\", border: \"solid\", elements: [{\n                kind: \"row\", name: \"Left row in row\", border: \"solid\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", name: \"Right row in row\", border: \"solid\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_1_1, node_4_1),\n        edge(node_1_1, node_1_2),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_4),\n        edge(node_2_2, node_4_4),\n        edge(node_2_2, node_4_2),\n        edge(node_2_2, node_6_4),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_5_2, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_5_1, node_4_5),\n        edge(node_5_2, node_4_5),\n        edge(node_6_1, node_4_5),\n        edge(node_6_2, node_4_5),\n        edge(node_6_3, node_4_5),\n        edge(node_6_4, node_4_5),\n        edge(node_6_4, node_6_3),\n        edge(node_6_4, node_6_3),\n        edge(node_7_2, node_6_4),\n        edge(node_8_1, node_8_2)\n    ];\n    return (\n        <Diagram graph={graph(element, edges)}/>\n    );\n};","import React from \"react\";\nimport {component, db, edge, Element, gap, graph, queue} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const NewArchitecture: React.FC = () => {\n    let factFinderDB = db(\"FACTFinder DB\");\n    let factFinderAPI = component(\"FACTFinder API\");\n\n    let factFinderFeedServiceDB = db(\"FACTFinder Feed Service DB\");\n    let factFinderUpdater = component(\"FACTFinder Updater\");\n    let ffProductImporter = component(\"Product Importer\");\n    let ffProductCampaignsImporter = component(\"Product Campaigns Importer\");\n    let ffCategoryImporter = component(\"Category Importer\");\n\n    let search: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\",\n            elements: [\n                factFinderDB,\n                {kind: \"row\", name: \"FACT Finder\", border: \"deployment-box\", elements: [gap(), factFinderAPI, gap()]}\n            ]\n        }, {\n            kind: \"row\",\n            elements: [factFinderFeedServiceDB, {\n                kind: \"column\", name: \"FACT Finder Feed Service\", border: \"deployment-box\",\n                elements: [\n                    {kind: \"row\", elements: [gap(), factFinderUpdater]},\n                    {kind: \"row\", elements: [ffProductImporter, ffProductCampaignsImporter, ffCategoryImporter]}\n                ]\n            }]\n        }]\n    };\n\n    let searchEdges = [\n        edge(factFinderAPI, factFinderDB),\n        edge(factFinderUpdater, factFinderAPI),\n        edge(factFinderUpdater, factFinderFeedServiceDB),\n        edge(ffProductImporter, factFinderFeedServiceDB),\n        edge(ffProductCampaignsImporter, factFinderFeedServiceDB),\n        edge(ffCategoryImporter, factFinderFeedServiceDB)\n    ];\n\n    let productServiceDB = db(\"Product Service DB\");\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productImporter = component(\"Product Importer\");\n    let productCampaignsImporter = component(\"Product Campaigns Importer\");\n    let nightlyStockImporter = component(\"Nightly Stock Importer\");\n    let nearTimeStockImporter = component(\"Near Time Stock Importer\");\n    let deliveryTimeImporter = component(\"Delivery Time Importer\");\n    let categoryImporter = component(\"Category Importer\");\n\n    let productService: Element<unknown> = {\n        kind: \"row\", elements: [{\n            kind: \"column\", elements: [gap(), productServiceDB]\n        }, {\n            kind: \"column\", name: \"Product Service\", border: \"deployment-box\", elements: [\n                {\n                    kind: \"row\", elements: [\n                        gap(), gap(), productAPI, stockAPI\n                    ]\n                },\n                gap(),\n                {\n                    kind: \"row\", elements: [\n                        productImporter, productCampaignsImporter, nightlyStockImporter,\n                        nearTimeStockImporter, deliveryTimeImporter, categoryImporter\n                    ]\n                }\n            ]\n        }]\n    };\n\n    let productServiceEdges = [\n        edge(productAPI, productServiceDB),\n        edge(stockAPI, productServiceDB),\n        edge(productImporter, productServiceDB),\n        edge(productCampaignsImporter, productServiceDB),\n        edge(nightlyStockImporter, productServiceDB),\n        edge(nearTimeStockImporter, productServiceDB),\n        edge(deliveryTimeImporter, productServiceDB),\n        edge(categoryImporter, productServiceDB),\n    ];\n\n    let productStream = queue(\"Product Stream\");\n    let productExporter = component(\"Product Exporter\");\n    let productCampaignsStream = queue(\"Product Campaigns Stream\");\n    let productCampaignsExporter = component(\"Product Campaigns Exporter\");\n    let nightlyStockStream = queue(\"Nightly Stock Stream\");\n    let nightlyStockExporter = component(\"Nightly Stock Exporter\");\n\n    let productExporterService: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", elements: [productStream, productCampaignsStream, nightlyStockStream]\n        }, {\n            kind: \"row\", name: \"Product Exporter Service\", border: \"deployment-box\",\n            elements: [productExporter, productCampaignsExporter, nightlyStockExporter]\n        }]\n    };\n\n    let productExporterServiceEdges = [\n        edge(productExporter, productStream),\n        edge(productCampaignsExporter, productCampaignsStream),\n        edge(nightlyStockExporter, nightlyStockStream),\n    ];\n\n    let stockStream = queue(\"Stock Stream\");\n    let stockExporter = component(\"Stock Exporter\");\n\n    let stockExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            stockStream,\n            {kind: \"row\", name: \"Stock Exporter Service\", border: \"deployment-box\", elements: [stockExporter]}\n        ]\n    };\n    let stockExporterServiceEdges = [\n        edge(stockExporter, stockStream)\n    ];\n\n    let deliveryTimeStream = queue(\"Delivery Time Stream\");\n    let deliveryTimeExporter = component(\"Delivery Time Exporter\");\n\n    let deliveryTimeExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            deliveryTimeStream,\n            {kind: \"row\", name: \"Delivery Time Exporter Service\", border: \"deployment-box\", elements: [deliveryTimeExporter]}\n        ]\n    };\n    let deliveryTimeExporterServiceEdges = [\n        edge(deliveryTimeExporter, deliveryTimeStream)\n    ];\n\n    let categoryStream = queue(\"Category Stream\");\n    let categoryExporter = component(\"Category Exporter\");\n\n    let categoryExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            categoryStream,\n            {kind: \"row\", name: \"Category Exporter Service\", border: \"deployment-box\", elements: [categoryExporter]}\n        ]\n    };\n    let categoryExporterServiceEdges = [\n        edge(categoryExporter, categoryStream)\n    ];\n\n    let coreServices: Element<unknown> = {\n        kind: \"row\", elements: [search, productService]\n    };\n    let coreServicesEdges = searchEdges.concat(productServiceEdges);\n\n    let coreExporter: Element<unknown> = {\n        kind: \"row\", elements: [\n            gap(), gap(), gap(), gap(), gap(),\n            productExporterService, stockExporterService, deliveryTimeExporterService, categoryExporterService\n        ]\n    };\n    let coreExporterEdges = productExporterServiceEdges\n        .concat(stockExporterServiceEdges)\n        .concat(deliveryTimeExporterServiceEdges)\n        .concat(categoryExporterServiceEdges);\n\n    let core: Element<unknown> = {\n        kind: \"column\", elements: [coreServices, coreExporter]\n    };\n    let coreEdges = coreServicesEdges.concat(coreExporterEdges).concat([\n        edge(ffProductImporter, productStream),\n        edge(ffProductCampaignsImporter, productCampaignsStream),\n        edge(ffCategoryImporter, categoryStream),\n        edge(productImporter, productStream),\n        edge(productCampaignsImporter, productCampaignsStream),\n        edge(nightlyStockImporter, nightlyStockStream),\n        edge(nearTimeStockImporter, stockStream),\n        edge(deliveryTimeImporter, deliveryTimeStream),\n        edge(categoryImporter, categoryStream)\n    ]);\n\n    return (\n        <Diagram graph={graph(core, coreEdges)}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\nimport {NewArchitecture} from \"./v2/NewArchitecture\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-architecture\">New Sample Architecture</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                    <Route path=\"/new-architecture\">\n                        <NewArchitecture/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}