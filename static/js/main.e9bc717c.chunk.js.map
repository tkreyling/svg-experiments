{"version":3,"sources":["v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/assertNever.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/shapes/getElementLeftX.tsx","v2/shapes/getElementTopY.tsx","v2/shapes/Symbols.tsx","v2/shapes/NodeShape.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/shapes/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sorting.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/shapes/EdgeShape.tsx","v2/edgesLayout/ConnectionIndexAndNumberOfEdges.tsx","v2/edgesLayout/SyntheticNodesAndEdges.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/edgesLayout/EdgeIndex.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetX.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetMaxX.tsx","v2/Diagram.tsx","v2/Sample.tsx","v2/NewArchitecture.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/sorting.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","result","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","assertNever","x","Error","element","syntheticNodes","syntheticEdges","transformElements","f","transformElementsUsingGraph","node","nameOrProperties","defaults","visible","shape","Object","assign","gap","db","queue","allNodes","flatMap","allContainers","concat","allElements","MARGIN_Y","MARGIN_X","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","DEPLOYMENT_BOX_INDENT","DEPLOYMENT_BOX_3D_OFFSET","DB_CYLINDER_ELLIPSE_Y","QUEUE_CYLINDER_ELLIPSE_X","getElementLeftX","offsetElementsX","borderIndexMaxX","borderIndexLeft","crossLayerPathSegmentOffsetMaxX","getElementTopY","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","ComponentSymbol","barWidthAbsolute","width","barHeightAbsolute","key","symbolKey","y","height","fill","strokeWidth","stroke","NodeShape","elementKey","d","transform","clipPath","fontSize","split","map","line","lineIndex","dy","SYMBOL_WIDTH","addOffsetElementsYG","addOffsetElementsY","accumulator","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","reduce","sum","add","ContainerShape","container","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","embeddedMidPathSegmentY","borderIndexBottom","border","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","length","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTopGraph","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","ascending","property","o1","o2","descending","and","sortFunctions","i","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","sums","addBorderIndexMaxBottom","addition","get","calculateEmbeddedBorders","current","embeddedBorders","borderIndexMaxBottom","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getLeftUpperNode","fromIsLeftUpper","edgeEndCoordinates","edgeIndex","otherNode","onLowerSide","nodeCenteringOffset","lowerSideEdges","upperSideEdges","EdgeShape","fromNode","fromIndex","upperNodeEdgesY","midPathSegmentOffsetY","toNode","toIndex","arrow","lowerLayerEdge","lowerNodeEdgesY","besideTopNodeX","crossLayerPathSegmentOffsetX","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","push","reverseNode","index","values","sameLayer","filter","edgeEnd","before","after","otherLayer","otherLayerBefore","otherLayerAfter","addConnectionIndexAndNumberOfEdges","edgesWithConnectionIndex","getLowerRightNodeIndex","getUpperLeftNodeIndex","isMultiLayerEdge","abs","addSyntheticNodesAndEdgesG","grid","lowerRightNode","upperLeftNode","min","has","lowerLayerEdgeProperty","isLowerLayerEdge","originalEdge","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","nodeKeys","keys","indexOffset","nodeKey","sameLayerBefore","sameLayerAfter","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","addMidPathSegmentOffsetYAggregates","maxOffsetY","maxs","determineMidPathSegmentMaxOffsetY","layer","sumOfPreviousRowsFillLayers","applyMidPathSegmentOffsetYAggregates","calculateEmbeddedPaths","embeddedPaths","midPathSegmentOffsetMaxY","addEdgeIndexG","addCrossLayerPathSegmentOffsetXG","groupedByOffsetElementsX","addCrossLayerPathSegmentOffsetXForSlice","addCrossLayerPathSegmentOffsetX","addOffset","addCrossLayerPathSegmentOffsetMaxXG","determineAndAddCrossLayerPathSegmentOffsetMaxX","addCrossLayerPathSegmentOffsetMaxX","Diagram","props","viewBox","c","Sample","node_1_1","node_1_2","node_2_1","node_2_2","node_3_1","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_5_2","node_6_1","node_6_2","node_6_3","node_6_4","node_7_1","node_7_2","node_8_1","node_8_2","NewArchitecture","contentSiteMap","contentViewComponent","edutainment","searchView","pdpViewComponent","pdpView","siteMapGenerator","coreSiteMap","factFinderDB","factFinderAPI","factFinderFeedServiceDB","factFinderUpdater","ffProductImporter","ffProductCampaignsImporter","ffCategoryImporter","search","searchEdges","productCampaignsImporter","nightlyStockImporter","nearTimeStockImporter","deliveryTimeImporter","productService","productServiceEdges","productStream","productExporter","productCampaignsStream","productCampaignsExporter","nightlyStockStream","nightlyStockExporter","productExporterService","productExporterServiceEdges","stockStream","stockExporter","stockExporterService","stockExporterServiceEdges","deliveryTimeStream","deliveryTimeExporter","deliveryTimeExporterService","deliveryTimeExporterServiceEdges","categoryStream","categoryExporter","categoryExporterService","categoryExporterServiceEdges","coreServices","coreServicesEdges","coreExporter","coreExporterEdges","coreAccount","coreAccountEdges","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","allGroups","isComponent","data-testid","GroupShape","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.e9bc717c.chunk.js","sourcesContent":["import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {assertNever} from \"./assertNever\";\n\ntype Symbols = \"component\"\n\ntype Shapes = \"rectangle\" | \"db-cylinder\" | \"queue-cylinder\"\n\nexport type Node = {\n    kind: \"node\",\n} & NodeProperties;\n\nexport type NodeProperties = {\n    name?: string,\n    visible?: boolean,\n    shape?: Shapes,\n    symbol?: Symbols\n};\n\nexport type Row<N> = {\n    kind: \"row\"\n} & ContainerProperties<N>;\n\nexport type Column<N> = {\n    kind: \"column\"\n} & ContainerProperties<N>;\n\ntype Borders = \"solid\" | \"deployment-box\"\n\ntype ContainerProperties<N> = {\n    name?: string,\n    border?: Borders,\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n    syntheticNodes: (Node & N)[]\n    syntheticEdges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(\n    element: Element<N>,\n    edges: Edge<N, E>[] = [],\n    syntheticNodes: (Node & N)[] = [],\n    syntheticEdges: Edge<N, E>[] = []\n): Graph<N, E> {\n    return {element, edges, syntheticNodes, syntheticEdges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(nameOrProperties?: string | NodeProperties): Node {\n    let defaults: Node = {\n        kind: \"node\",\n        visible: true,\n        shape: \"rectangle\"\n    };\n    if (!nameOrProperties) {\n        return defaults;\n    } else if (typeof nameOrProperties === 'string') {\n        return Object.assign<Node, NodeProperties>(defaults, {name: nameOrProperties});\n    } else {\n        return Object.assign<Node, NodeProperties>(defaults, nameOrProperties);\n    }\n}\n\nexport function gap(): Node {\n    return node({visible: false});\n}\n\nexport function component(name: string): Node {\n    return node({name: name, symbol: \"component\"});\n}\n\nexport function db(name: string): Node {\n    return node({name: name, shape: \"db-cylinder\"});\n}\n\nexport function queue(name: string): Node {\n    return node({name: name, shape: \"queue-cylinder\"});\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}\n\nexport function allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allElements<N>(element: Element<N>): Element<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allElements).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}","export const MARGIN_Y = 5;\nexport const MARGIN_X = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 60;\nexport const BORDER_SPACING_X = 15;\nexport const BORDER_SPACING_TOP = 40;\nexport const BORDER_SPACING_BOTTOM = 15;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;\nexport const TEXT_PADDING = 5;\nexport const SYMBOL_WIDTH = 16;\nexport const SYMBOL_SPACING = 3;\nexport const ARROW_WIDTH = 3;\nexport const ARROW_HEIGHT = 5;\nexport const DEPLOYMENT_BOX_INDENT = BORDER_SPACING_X * 0.3;\nexport const DEPLOYMENT_BOX_3D_OFFSET = BORDER_SPACING_X * 0.4;\nexport const DB_CYLINDER_ELLIPSE_Y = BORDER_SPACING_X * 0.5;\nexport const QUEUE_CYLINDER_ELLIPSE_X = BORDER_SPACING_X * 0.4;","import {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"../elementsLayout/BorderIndexMaxX\";\nimport {CrossLayerPathSegmentOffsetMaxX} from \"../edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {BORDER_SPACING_X, EDGE_SPACING, ELEMENT_WIDTH, HORIZONTAL_SPACING, MARGIN_X} from \"../styling\";\nimport {BorderIndexLeft} from \"../elementsLayout/BorderIndexLeft\";\n\nexport type RequiredNodeDataGetElementLeftX =\n    OffsetElementsX &\n    BorderIndexLeft & BorderIndexMaxX &\n    CrossLayerPathSegmentOffsetMaxX\n\nexport function getElementLeftX(element: RequiredNodeDataGetElementLeftX) {\n    return MARGIN_X\n        + element.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n        + (element.borderIndexMaxX * (element.offsetElementsX * 2 + 1) - element.borderIndexLeft) * BORDER_SPACING_X\n        + element.crossLayerPathSegmentOffsetMaxX * element.offsetElementsX * EDGE_SPACING;\n}","import {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexTop} from \"../elementsLayout/BorderIndexTop\";\n\nexport type RequiredNodeDataGetElementTopY =\n    OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY\n\nexport function getElementTopY(element: RequiredNodeDataGetElementTopY) {\n    return MARGIN_Y\n        + element.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop - element.borderIndexTop) * BORDER_SPACING_TOP\n        + element.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + element.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"../styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\n\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {\n    DB_CYLINDER_ELLIPSE_Y,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    QUEUE_CYLINDER_ELLIPSE_X,\n    STROKE_WIDTH,\n    SYMBOL_SPACING,\n    SYMBOL_WIDTH,\n    TEXT_PADDING\n} from \"../styling\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {Node} from \"../newGraphModel\"\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {ComponentSymbol} from \"./Symbols\";\n\ntype Props = Node & ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY;\n\nexport const NodeShape: React.FC<Props> = node => {\n    if (!node.visible) return null;\n\n    let x = getElementLeftX(node);\n    let y = getElementTopY(node);\n\n    return (\n        <g key={node.elementKey}>\n            {node.shape === \"rectangle\" &&\n            <rect\n                x={x} y={y}\n                width={ELEMENT_WIDTH}\n                height={ELEMENT_HEIGHT}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            }\n            {node.shape === \"db-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"V \" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + x + \",\" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,0 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.shape === \"queue-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT) + \" \" +\n                    \"H \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \",\" + y + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,1 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.name &&\n            <g transform={\"translate(\"\n            + (x + TEXT_PADDING + (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)) + \" \" + y + \")\"}>\n                <text\n                    x={0}\n                    y={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.3 : 0)}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + node.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {node.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={node.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n                <clipPath id={\"clip-element-text-\" + node.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={ELEMENT_WIDTH - 2 * TEXT_PADDING\n                        - (node.symbol ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)\n                        - (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                        height={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.8 : 1)}/>\n                </clipPath>\n            </g>\n            }\n            {node.symbol &&\n            <ComponentSymbol\n                symbolKey={node.elementKey + \"CS\"}\n                x={x + ELEMENT_WIDTH - SYMBOL_WIDTH - SYMBOL_SPACING}\n                y={y + SYMBOL_SPACING}\n                width={SYMBOL_WIDTH}/>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    DEPLOYMENT_BOX_3D_OFFSET,\n    DEPLOYMENT_BOX_INDENT,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    TEXT_PADDING,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {Container} from \"../newGraphModel\";\nimport {EmbeddedElementsX} from \"../elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxBottom, EmbeddedBorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {EmbeddedBorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"../elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"../elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"../elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {EmbeddedMidPathSegmentY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\ntype Props = Container<\n    ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    EmbeddedElementsX & EmbeddedElementsY &\n    BorderIndexRight &\n    EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & EmbeddedBorderIndexMaxBottom &\n    EmbeddedMidPathSegmentY>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    let x = getElementLeftX(container);\n    let y = getElementTopY(container);\n    let width = container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n        + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n        + (container.embeddedElementsX - 1) * container.crossLayerPathSegmentOffsetMaxX * EDGE_SPACING;\n    let height = container.embeddedElementsY * ELEMENT_HEIGHT +\n        (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n        container.borderIndexTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n        container.embeddedMidPathSegmentY * EDGE_SPACING +\n        container.borderIndexBottom * BORDER_SPACING_BOTTOM;\n    return (\n        <g key={container.elementKey}>\n            {(container.border === \"solid\") &&\n            <rect\n                x={x}\n                y={y}\n                width={width}\n                height={height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n            }\n\n            {(container.border === \"deployment-box\") &&\n            <g>\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" +\n                    \"V \" + (y + height - 2 * DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + height - DEPLOYMENT_BOX_INDENT) +\n                    \"H \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"V \" + (y + height - DEPLOYMENT_BOX_INDENT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n\n            {container.name &&\n            <g transform={\"translate(\"\n            + (x + BORDER_SPACING_X) + \" \" + (y + TEXT_PADDING) + \")\"}>\n                <text\n                    x={0}\n                    y={0}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + container.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {container.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={container.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + container.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={width - 2 * BORDER_SPACING_X}\n                        height={BORDER_SPACING_TOP}/>\n                </clipPath>\n            </g>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexTop, E>(graph, addBorderIndexTopGraph);\n}\n\nfunction addBorderIndexTopGraph(graph: Graph<unknown, unknown>) {\n    addBorderIndexTop(graph.element);\n    graph.syntheticNodes.forEach(node => Object.assign<Node, BorderIndexTop>(node, {borderIndexTop: 0}));\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {ascending} from \"./sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {assertNever} from \"./assertNever\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(graph: Graph<OffsetElementsY & BorderIndexBottom, unknown>) {\n    let max = determineBorderIndexMaxBottom(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxBottom(node, max, sums));\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(graph: Graph<OffsetElementsY & BorderIndexTop, unknown>) {\n    let max = determineBorderIndexMaxTop(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxTop(node, max, sums));\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nexport function fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}\n\nexport function fromIsLeftUpper<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsX === edge.to.offsetElementsX) {\n        return edge.from.offsetElementsY <= edge.to.offsetElementsY;\n    }\n    return edge.from.offsetElementsX < edge.to.offsetElementsX;\n}\n\nexport function getLeftUpperNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsLeftUpper(edge) ? edge.from : edge.to;\n}","import React from \"react\";\nimport {\n    ARROW_HEIGHT,\n    ARROW_WIDTH,\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {Edge} from \"../newGraphModel\";\nimport {getLeftUpperNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {MidPathSegmentOffsetY} from \"../edgesLayout/MidPathSegmentOffsetY\";\nimport {ConnectionIndex, NumberOfEdges} from \"../edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"../edgesLayout/EdgeIndex\";\nimport {IsLowerLayerEdge, LowerLayerEdge, OriginalEdge} from \"../edgesLayout/SyntheticNodesAndEdges\";\nimport {CrossLayerPathSegmentOffsetX} from \"../edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nfunction edgeEndCoordinates<N extends RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    let nodeCenteringOffset = (ELEMENT_WIDTH - (((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) || 0) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: getElementLeftX(node) + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: getElementTopY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    BorderIndexMaxBottom &\n    NumberOfEdges,\n    LowerLayerEdge<any, unknown> & EdgeIndex & MidPathSegmentOffsetY & ConnectionIndex & CrossLayerPathSegmentOffsetX>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getElementTopY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    let onLowerSide = edge.to.offsetElementsY <= edge.from.offsetElementsY;\n    let arrow = (\n        <path d={\n            \"M \" + (toNode.x + ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1)) + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y + \" \" +\n            \"L \" + (toNode.x - ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1))\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n    if (!edge.lowerLayerEdge) {\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    } else {\n        let lowerLayerEdge = edge.lowerLayerEdge as Edge<unknown, MidPathSegmentOffsetY> & IsLowerLayerEdge & OriginalEdge<unknown, unknown>;\n        let lowerNodeEdgesY = getElementTopY(getUpperLeftNode(edge.lowerLayerEdge))\n            + ELEMENT_HEIGHT\n            + getUpperLeftNode(edge.lowerLayerEdge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n            + VERTICAL_SPACING / 2\n            + lowerLayerEdge.midPathSegmentOffsetY * EDGE_SPACING;\n        let besideTopNodeX = getElementLeftX(getLeftUpperNode(edge))\n            + ELEMENT_WIDTH + getUpperLeftNode(edge).borderIndexMaxX * BORDER_SPACING_X\n            + (edge.crossLayerPathSegmentOffsetX! + 1) * EDGE_SPACING;\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + besideTopNodeX + \" \" +\n                    \"V \" + lowerNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    }\n};","import {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {and, ascending, descending} from \"../sorting\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {fromIsUpperLeft} from \"../EdgeHelper\";\n\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\nexport type NumberOfEdges = {\n    upperSideEdges?: number\n    lowerSideEdges?: number\n}\n\nexport function addConnectionIndexAndNumberOfEdgesG<\n    N extends OffsetElementsY & OffsetElementsX & ElementKey,\n    E extends EdgeIndex & LowerLayerEdge<unknown, unknown>, G>(\n        graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    let edgesWithConnectionIndex = graph.edges as unknown as Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[];\n    copyConnectionIndexToLowerLayerEdge(edgesWithConnectionIndex);\n    return graph as Graph<N & NumberOfEdges, E & ConnectionIndex>;\n}\n\ntype EdgeType = Edge<OffsetElementsY & OffsetElementsX & ElementKey, EdgeIndex>\n\nexport function addConnectionIndexAndNumberOfEdges(edges: EdgeType[]) {\n    type NodeSide = {\n        node: OffsetElementsY & OffsetElementsX\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        edge: EdgeType\n        reverseNode: OffsetElementsY & OffsetElementsX\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(edge: EdgeType, firstNode: OffsetElementsY & OffsetElementsX & ElementKey, secondNode: OffsetElementsY & OffsetElementsX, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.offsetElementsY <= secondNode.offsetElementsY ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.elementKey + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            edge: edge,\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge, edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge, edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY === node.offsetElementsY);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY !== node.offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n\n        before.sort(and(descending(e => e.reverseNode.offsetElementsX), descending(e => e.edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(e => e.reverseNode.offsetElementsX), descending(e => e.reverseNode.offsetElementsY)));\n        otherLayerAfter.sort(and(ascending(e => e.reverseNode.offsetElementsX), ascending(e => e.reverseNode.offsetElementsY)));\n        after.sort(and(descending(e => e.reverseNode.offsetElementsX), ascending(e => e.edge.edgeIndex)));\n\n        let all = before.concat(otherLayerBefore).concat(otherLayerAfter).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nfunction copyConnectionIndexToLowerLayerEdge(edges: Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[]) {\n    edges.forEach(edge => {\n        if (edge.lowerLayerEdge) {\n            Object.assign<Edge<unknown, unknown>, ConnectionIndex>(edge.lowerLayerEdge, {\n                fromIndex: 0,\n                toIndex: getLowerRightNodeIndex(edge)\n            });\n        }\n    });\n}\n\nexport function getUpperLeftNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.fromIndex : edge.toIndex;\n}\n\nexport function getLowerRightNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.toIndex : edge.fromIndex;\n}","import {allElements, allNodes, Edge, Graph, Node, node} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY & ElementKey\n\nexport type IsLowerLayerEdge = {\n    isLowerLayerEdge: true\n};\n\nexport type OriginalEdge<N, E> = {\n    originalEdge: Edge<N, E>\n};\n\nexport type LowerLayerEdge<N, E> = {\n    lowerLayerEdge?: Edge<N, E> & IsLowerLayerEdge & OriginalEdge<N, E>\n}\n\nexport function isMultiLayerEdge(edge: Edge<OffsetElementsY, unknown>) {\n    return Math.abs(edge.from.offsetElementsY - edge.to.offsetElementsY) >= 2;\n}\n\nexport function addSyntheticNodesAndEdgesG(graph: Graph<NodeData, unknown>): Graph<NodeData, LowerLayerEdge<NodeData, unknown>> {\n    let elementKey = Math.max(...allElements(graph.element).map(element => element.elementKey));\n\n    let grid = new Map<string, boolean>();\n    allNodes(graph.element)\n        .filter(node => node.visible)\n        .forEach(node => grid.set(node.offsetElementsX + \"_\" + node.offsetElementsY, true));\n\n    function nodesOnPath(edge: Edge<OffsetElementsX & OffsetElementsY, unknown>): boolean {\n        let lowerRightNode = getLowerRightNode(edge);\n        let upperLeftNode = getUpperLeftNode(edge);\n        let offsetElementsX = Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX);\n\n        for (let i = upperLeftNode.offsetElementsY + 1; i <= lowerRightNode.offsetElementsY - 1; i++) {\n            if (grid.has(offsetElementsX + \"_\" + i)) return true;\n        }\n        return false;\n    }\n\n    let syntheticNodes: NodeData[] = [];\n    let syntheticEdges = graph.edges\n        .filter(isMultiLayerEdge)\n        .filter(nodesOnPath)\n        .map(edge => {\n            let lowerRightNode = getLowerRightNode(edge);\n            let upperLeftNode = getUpperLeftNode(edge);\n            elementKey++;\n            let from: NodeData = Object.assign<Node, NodeData>(node(), {\n                elementKey: elementKey,\n                offsetElementsY: lowerRightNode.offsetElementsY - 1,\n                offsetElementsX: Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX)\n            });\n            syntheticNodes.push(from);\n            let lowerLayerEdgeProperty: LowerLayerEdge<NodeData, unknown> = {\n                lowerLayerEdge: {\n                    from: from,\n                    to: lowerRightNode,\n                    isLowerLayerEdge: true,\n                    originalEdge: edge\n                }};\n            Object.assign<Edge<NodeData, unknown>, LowerLayerEdge<NodeData, unknown>>(\n                edge, lowerLayerEdgeProperty);\n            return lowerLayerEdgeProperty.lowerLayerEdge;\n        });\n\n    return Object.assign(graph, {syntheticNodes, syntheticEdges});\n}","import {and, ascending, descending} from \"../sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {\n    ConnectionIndex,\n    getLowerRightNodeIndex,\n    getUpperLeftNodeIndex,\n    NumberOfEdges\n} from \"./ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {IsLowerLayerEdge, isMultiLayerEdge, OriginalEdge} from \"./SyntheticNodesAndEdges\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX & NumberOfEdges, E extends ConnectionIndex & EdgeIndex>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY> {\n    addMidPathSegmentOffsetY(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).offsetElementsY;\n        let edges = groupedByOffsetElementsY.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsY.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return false;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return false;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 <\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX\n        });\n        let otherLayerAfter = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return true;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return true;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 >=\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX\n        });\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(\n            descending(edge => getLowerRightNode(edge).offsetElementsX),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return getUpperLeftNode(edgeWithOriginalEdge.originalEdge).offsetElementsX;\n            }),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return edgeWithOriginalEdge.originalEdge.edgeIndex;\n            }),\n            descending(edge => edge.edgeIndex)\n        ));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type MidPathSegmentOffsetMaxY = { midPathSegmentOffsetMaxY: number };\nexport type MidPathSegmentOffsetMaxPreviousY = { midPathSegmentOffsetMaxPreviousY: number }\nexport type EmbeddedMidPathSegmentY = { embeddedMidPathSegmentY: number };\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY & EmbeddedMidPathSegmentY\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = getMostBottomOffsetElementsY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges.concat(graph.syntheticEdges));\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, maxs, sums);\n    graph.syntheticNodes.forEach(node => applyMidPathSegmentOffsetYAggregates(node, maxs, sums));\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction calculateEmbeddedPaths(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedPaths = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedPaths += current.get(i) || 0;\n    }\n    return embeddedPaths;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Edge, Graph} from \"../newGraphModel\";\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addEdgeIndexG<N, E>(graph: Graph<N, E>):\n    Graph<N, E & EdgeIndex> {\n    addEdgeIndex(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & EdgeIndex>;\n}\n\nexport function addEdgeIndex(edges: Edge<unknown, unknown>[]) {\n    edges.forEach((edge, index) => {\n        Object.assign<Edge<unknown, unknown>, EdgeIndex>(\n            edge, {edgeIndex: index});\n    });\n}","import {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {getLeftUpperNode, getLowerRightNode} from \"../EdgeHelper\";\nimport {and, ascending} from \"../sorting\";\n\nexport type CrossLayerPathSegmentOffsetX = {\n    crossLayerPathSegmentOffsetX?: number\n}\n\nexport type RequiredNodeDataTypes = OffsetElementsX & OffsetElementsY\nexport type RequiredEdgeDataTypes = EdgeIndex & LowerLayerEdge<unknown, unknown>\nexport type RequiredEdgeType = Edge<RequiredNodeDataTypes, RequiredEdgeDataTypes>\n\nexport function addCrossLayerPathSegmentOffsetXG<N extends RequiredNodeDataTypes, E extends RequiredEdgeDataTypes>(graph: Graph<N, E>):\n    Graph<N, E & CrossLayerPathSegmentOffsetX> {\n    addCrossLayerPathSegmentOffsetX(graph.edges);\n    return graph as unknown as Graph<N, E & CrossLayerPathSegmentOffsetX>;\n}\n\nexport function addCrossLayerPathSegmentOffsetX(edges: RequiredEdgeType[]) {\n    let groupedByOffsetElementsX = new Map<number, RequiredEdgeType[]>();\n\n    edges.filter(edge => edge.lowerLayerEdge).forEach(edge => {\n        let key = getLeftUpperNode(edge).offsetElementsX;\n        let edges = groupedByOffsetElementsX.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsX.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsX.values()).forEach(addCrossLayerPathSegmentOffsetXForSlice);\n}\n\nfunction addCrossLayerPathSegmentOffsetXForSlice(edges: RequiredEdgeType[]) {\n    let groupedByUpperNode = new Map<string, RequiredEdgeType[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getLeftUpperNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        edges.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n\n        function addOffset(edge: RequiredEdgeType, indexInArray: number) {\n            let index = indexOffset + indexInArray;\n            Object.assign<RequiredEdgeType, CrossLayerPathSegmentOffsetX>(edge, {\n                crossLayerPathSegmentOffsetX: index\n            });\n        }\n\n        edges.forEach((edge, index) => addOffset(edge, index));\n\n        indexOffset += edges.length;\n    });\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {CrossLayerPathSegmentOffsetX} from \"./CrossLayerPathSegmentOffsetX\";\n\nexport type CrossLayerPathSegmentOffsetMaxX = { crossLayerPathSegmentOffsetMaxX: number };\n\ntype RequiredEdgeDataTypes = CrossLayerPathSegmentOffsetX;\n\nexport function addCrossLayerPathSegmentOffsetMaxXG<N, E extends RequiredEdgeDataTypes>(\n    graph: Graph<N, E>\n): Graph<N & CrossLayerPathSegmentOffsetMaxX, E> {\n    return transformElementsUsingGraph<N, CrossLayerPathSegmentOffsetMaxX, E>(graph, determineAndAddCrossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineAndAddCrossLayerPathSegmentOffsetMaxX(graph: Graph<unknown, RequiredEdgeDataTypes>) {\n    let crossLayerPathSegmentOffsetMaxX = determineCrossLayerPathSegmentOffsetMaxX(graph.edges);\n    addCrossLayerPathSegmentOffsetMaxX(graph.element, crossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineCrossLayerPathSegmentOffsetMaxX(edges: RequiredEdgeDataTypes[]): number {\n    return Math.max(...edges.map(edge => (edge.crossLayerPathSegmentOffsetX || 0) + 1), 0);\n}\n\nexport function addCrossLayerPathSegmentOffsetMaxX(element: Element<unknown>, crossLayerPathSegmentOffsetMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {allContainers, allNodes, Element, Graph} from \"./newGraphModel\";\nimport {NodeShape} from \"./shapes/NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG, OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG, OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./shapes/ContainerShape\";\nimport {addBorderIndexMaxXG, BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {\n    addBorderIndexMaxBottomG,\n    BorderIndexMaxBottom,\n    BorderIndexMaxPreviousBottom\n} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG, BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./shapes/EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {\n    addMidPathSegmentOffsetYAggregatesG,\n    MidPathSegmentOffsetMaxPreviousY,\n    MidPathSegmentOffsetMaxY\n} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {addEdgeIndexG} from \"./edgesLayout/EdgeIndex\";\nimport {addSyntheticNodesAndEdgesG} from \"./edgesLayout/SyntheticNodesAndEdges\";\nimport {addCrossLayerPathSegmentOffsetXG} from \"./edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {\n    addCrossLayerPathSegmentOffsetMaxXG,\n    CrossLayerPathSegmentOffsetMaxX\n} from \"./edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING, MARGIN_X, MARGIN_Y,\n    VERTICAL_SPACING\n} from \"./styling\";\n\nfunction width(element: Element<OffsetElementsX & BorderIndexMaxX & CrossLayerPathSegmentOffsetMaxX>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_X * 2\n            + element.offsetElementsX * HORIZONTAL_SPACING\n            + (element.offsetElementsX + 1) * ELEMENT_WIDTH\n            + element.borderIndexMaxX * (element.offsetElementsX + 1) * 2 * BORDER_SPACING_X\n            + element.crossLayerPathSegmentOffsetMaxX * (element.offsetElementsX + 1) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(width), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction height(element: Element<OffsetElementsY &\n    BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxBottom & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_Y * 2\n            + (element.offsetElementsY + 1) * VERTICAL_SPACING\n            + (element.offsetElementsY + 1) * ELEMENT_HEIGHT\n            + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop) * BORDER_SPACING_TOP\n            + (element.borderIndexMaxPreviousBottom + element.borderIndexMaxBottom) * BORDER_SPACING_BOTTOM\n            + (element.midPathSegmentOffsetMaxPreviousY + element.midPathSegmentOffsetMaxY) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(height), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\ntype DiagramProps = { graph: Graph<unknown, unknown> }\n\nexport const Diagram: React.FC<DiagramProps> = props => {\n    return [props.graph]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addSyntheticNodesAndEdgesG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addEdgeIndexG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(addCrossLayerPathSegmentOffsetXG)\n        .map(addCrossLayerPathSegmentOffsetMaxXG)\n        .map(graph => {\n            return (\n                <svg viewBox={\"0 0 \" + width(graph.element) + \" \" + height(graph.element)}>\n                    {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                    {allNodes(graph.element).map(NodeShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};","import React from \"react\";\nimport {edge, Element, gap, graph, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node(\"Some node\");\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node({name: \"Component node\", symbol: \"component\"});\n    let node_3_1 = node({name: \"Another component node\", symbol: \"component\"});\n    let node_3_2 = node();\n    let node_4_1 = node(\"Some node with long text\");\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let node_7_1 = node({visible: false});\n    let node_7_2 = node();\n    let node_8_1 = node();\n    let node_8_2 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", name: \"Top row\", border: \"solid\", elements: [{\n                kind: \"column\", name: \"Left column\", border: \"solid\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", name: \"Right column\", border: \"solid\", elements: [{\n                    kind: \"row\", name: \"Nested row\", border: \"solid\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }, node_7_1, {\n                kind: \"column\", elements: [node_8_1, gap(), node_8_2]\n            }, node_7_2]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", name: \"Bottom row\", border: \"solid\", elements: [{\n                kind: \"row\", name: \"Left row in row\", border: \"solid\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", name: \"Right row in row\", border: \"solid\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_1_1, node_4_1),\n        edge(node_1_1, node_1_2),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_4),\n        edge(node_2_2, node_4_4),\n        edge(node_2_2, node_4_2),\n        edge(node_2_2, node_6_4),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_5_2, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_5_1, node_4_5),\n        edge(node_5_2, node_4_5),\n        edge(node_6_1, node_4_5),\n        edge(node_6_2, node_4_5),\n        edge(node_6_3, node_4_5),\n        edge(node_6_4, node_4_5),\n        edge(node_6_4, node_6_3),\n        edge(node_6_4, node_6_3),\n        edge(node_7_2, node_6_4),\n        edge(node_8_1, node_8_2)\n    ];\n    return (\n        <Diagram graph={graph(element, edges)}/>\n    );\n};","import React from \"react\";\nimport {component, db, edge, Element, gap, graph, queue} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const NewArchitecture: React.FC = () => {\n    let contentSiteMap = component(\"Content Site Map\");\n    let contentViewComponent = component(\"Content View\");\n\n    let contentView: Element<unknown> = {\n        kind: \"row\", name: \"Content View\", border: \"deployment-box\",\n        elements: [contentSiteMap, contentViewComponent]\n    };\n\n    let edutainment: Element<unknown> = {\n        kind: \"column\", elements: [contentView]\n    };\n\n    let searchView = component(\"Search View\");\n    let pdpViewComponent = component(\"PDP View\");\n\n    let pdpView: Element<unknown> = {\n        kind: \"row\",\n        elements: [gap(), gap(), {\n            kind: \"row\", name: \"PDP View\", border: \"deployment-box\",\n            elements: [gap(), searchView, gap(), gap(), gap(), gap(), pdpViewComponent, gap(), gap(), gap()]\n        }]\n    };\n\n    let siteMapGenerator = component(\"Site Map Generator\");\n\n    let coreSiteMap: Element<unknown> = {\n        kind: \"column\", elements: [gap(), {\n            kind: \"row\", name: \"Site Map Generator\", border: \"deployment-box\", elements: [siteMapGenerator]\n        }]\n    };\n\n    let factFinderDB = db(\"FACTFinder DB\");\n    let factFinderAPI = component(\"FACTFinder API\");\n\n    let factFinderFeedServiceDB = db(\"FACTFinder Feed\\nService DB\");\n    let factFinderUpdater = component(\"FACTFinder Updater\");\n    let ffProductImporter = component(\"Product Importer\");\n    let ffProductCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let ffCategoryImporter = component(\"Category Importer\");\n\n    let search: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\",\n            elements: [\n                factFinderDB,\n                {kind: \"row\", name: \"FACT Finder\", border: \"deployment-box\", elements: [gap(), factFinderAPI, gap()]}\n            ]\n        }, {\n            kind: \"row\",\n            elements: [factFinderFeedServiceDB, {\n                kind: \"column\", name: \"FACT Finder Feed Service\", border: \"deployment-box\",\n                elements: [\n                    {kind: \"row\", elements: [gap(), factFinderUpdater]},\n                    {kind: \"row\", elements: [ffProductImporter, ffProductCampaignsImporter, ffCategoryImporter]}\n                ]\n            }]\n        }]\n    };\n\n    let searchEdges = [\n        edge(factFinderAPI, factFinderDB),\n        edge(factFinderUpdater, factFinderAPI),\n        edge(factFinderUpdater, factFinderFeedServiceDB),\n        edge(ffProductImporter, factFinderFeedServiceDB),\n        edge(ffProductCampaignsImporter, factFinderFeedServiceDB),\n        edge(ffCategoryImporter, factFinderFeedServiceDB)\n    ];\n\n    let productServiceDB = db(\"Product Service DB\");\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productImporter = component(\"Product Importer\");\n    let productCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let nightlyStockImporter = component(\"Nightly Stock Importer\");\n    let nearTimeStockImporter = component(\"Near Time Stock\\nImporter\");\n    let deliveryTimeImporter = component(\"Delivery Time Importer\");\n    let categoryImporter = component(\"Category Importer\");\n\n    let productService: Element<unknown> = {\n        kind: \"row\", elements: [{\n            kind: \"column\", elements: [gap(), productServiceDB]\n        }, {\n            kind: \"column\", name: \"Product Service\", border: \"deployment-box\", elements: [\n                {\n                    kind: \"row\", elements: [\n                        gap(), gap(), productAPI, stockAPI\n                    ]\n                },\n                gap(),\n                {\n                    kind: \"row\", elements: [\n                        productImporter, productCampaignsImporter, nightlyStockImporter,\n                        nearTimeStockImporter, deliveryTimeImporter, categoryImporter\n                    ]\n                }\n            ]\n        }]\n    };\n\n    let productServiceEdges = [\n        edge(productAPI, productServiceDB),\n        edge(stockAPI, productServiceDB),\n        edge(productImporter, productServiceDB),\n        edge(productCampaignsImporter, productServiceDB),\n        edge(nightlyStockImporter, productServiceDB),\n        edge(nearTimeStockImporter, productServiceDB),\n        edge(deliveryTimeImporter, productServiceDB),\n        edge(categoryImporter, productServiceDB),\n    ];\n\n    let productStream = queue(\"Product Stream\");\n    let productExporter = component(\"Product Exporter\");\n    let productCampaignsStream = queue(\"Product Campaigns\\nStream\");\n    let productCampaignsExporter = component(\"Product Campaigns\\nExporter\");\n    let nightlyStockStream = queue(\"Nightly Stock Stream\");\n    let nightlyStockExporter = component(\"Nightly Stock Exporter\");\n\n    let productExporterService: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", elements: [productStream, productCampaignsStream, nightlyStockStream]\n        }, {\n            kind: \"row\", name: \"Product Exporter Service\", border: \"deployment-box\",\n            elements: [productExporter, productCampaignsExporter, nightlyStockExporter]\n        }]\n    };\n\n    let productExporterServiceEdges = [\n        edge(productExporter, productStream),\n        edge(productCampaignsExporter, productCampaignsStream),\n        edge(nightlyStockExporter, nightlyStockStream),\n    ];\n\n    let stockStream = queue(\"Stock Stream\");\n    let stockExporter = component(\"Stock Exporter\");\n\n    let stockExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            stockStream,\n            {kind: \"row\", name: \"Stock Exporter Service\", border: \"deployment-box\", elements: [stockExporter]}\n        ]\n    };\n    let stockExporterServiceEdges = [\n        edge(stockExporter, stockStream)\n    ];\n\n    let deliveryTimeStream = queue(\"Delivery Time Stream\");\n    let deliveryTimeExporter = component(\"Delivery Time Exporter\");\n\n    let deliveryTimeExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            deliveryTimeStream,\n            {kind: \"row\", name: \"Delivery Time\\nExporter Service\", border: \"deployment-box\", elements: [deliveryTimeExporter]}\n        ]\n    };\n    let deliveryTimeExporterServiceEdges = [\n        edge(deliveryTimeExporter, deliveryTimeStream)\n    ];\n\n    let categoryStream = queue(\"Category Stream\");\n    let categoryExporter = component(\"Category Exporter\");\n\n    let categoryExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            categoryStream,\n            {kind: \"row\", name: \"Category Exporter Service\", border: \"deployment-box\", elements: [categoryExporter]}\n        ]\n    };\n    let categoryExporterServiceEdges = [\n        edge(categoryExporter, categoryStream)\n    ];\n\n    let coreServices: Element<unknown> = {\n        kind: \"row\", elements: [coreSiteMap, search, productService]\n    };\n    let coreServicesEdges = searchEdges.concat(productServiceEdges);\n\n    let coreExporter: Element<unknown> = {\n        kind: \"row\", elements: [\n            gap(), gap(), gap(), gap(), gap(), gap(),\n            productExporterService, stockExporterService, deliveryTimeExporterService, categoryExporterService\n        ]\n    };\n    let coreExporterEdges = productExporterServiceEdges\n        .concat(stockExporterServiceEdges)\n        .concat(deliveryTimeExporterServiceEdges)\n        .concat(categoryExporterServiceEdges);\n\n    let core: Element<unknown> = {\n        kind: \"column\", elements: [pdpView, coreServices, coreExporter]\n    };\n    let coreEdges = coreServicesEdges.concat(coreExporterEdges).concat([\n        edge(pdpViewComponent, productAPI),\n        edge(pdpViewComponent, stockAPI),\n        edge(searchView, factFinderAPI),\n        edge(siteMapGenerator, factFinderFeedServiceDB),\n        edge(ffProductImporter, productStream),\n        edge(ffProductCampaignsImporter, productCampaignsStream),\n        edge(ffCategoryImporter, categoryStream),\n        edge(productImporter, productStream),\n        edge(productCampaignsImporter, productCampaignsStream),\n        edge(nightlyStockImporter, nightlyStockStream),\n        edge(nearTimeStockImporter, stockStream),\n        edge(deliveryTimeImporter, deliveryTimeStream),\n        edge(categoryImporter, categoryStream)\n    ]);\n\n    let coreAccount: Element<unknown> = {\n        kind: \"row\", elements: [edutainment, core]\n    };\n    let coreAccountEdges = coreEdges.concat([\n        edge(contentViewComponent, factFinderAPI),\n        edge(contentViewComponent, productAPI)\n    ]);\n\n    return (\n        <Diagram graph={graph(coreAccount, coreAccountEdges)}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\nimport {NewArchitecture} from \"./v2/NewArchitecture\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-architecture\">New Sample Architecture</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                    <Route path=\"/new-architecture\">\n                        <NewArchitecture/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}