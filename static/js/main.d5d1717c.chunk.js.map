{"version":3,"sources":["v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/assertNever.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/shapes/getElementLeftX.tsx","v2/shapes/getElementTopY.tsx","v2/shapes/Symbols.tsx","v2/shapes/NodeShape.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/shapes/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sorting.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/shapes/EdgeShape.tsx","v2/edgesLayout/ConnectionIndexAndNumberOfEdges.tsx","v2/edgesLayout/SyntheticNodesAndEdges.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/edgesLayout/EdgeIndex.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetX.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetMaxX.tsx","v2/Diagram.tsx","v2/Sample.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/sorting.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","result","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","assertNever","x","Error","element","syntheticNodes","syntheticEdges","transformElements","f","transformElementsUsingGraph","node","allNodes","flatMap","allContainers","concat","allElements","MARGIN_Y","MARGIN_X","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","getElementLeftX","offsetElementsX","borderIndexMaxX","borderIndexLeft","crossLayerPathSegmentOffsetMaxX","getElementTopY","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","ComponentSymbol","barWidthAbsolute","width","barHeightAbsolute","key","symbolKey","y","height","fill","strokeWidth","stroke","NodeShape","elementKey","clipPath","SYMBOL_WIDTH","addOffsetElementsYG","addOffsetElementsY","accumulator","Object","assign","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","map","reduce","sum","add","ContainerShape","container","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","embeddedMidPathSegmentY","borderIndexBottom","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","length","border","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTopGraph","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","ascending","property","o1","o2","descending","and","sortFunctions","i","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","sums","addBorderIndexMaxBottom","addition","get","calculateEmbeddedBorders","current","embeddedBorders","borderIndexMaxBottom","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getLeftUpperNode","fromIsLeftUpper","edgeEndCoordinates","edgeIndex","otherNode","onLowerSide","nodeCenteringOffset","lowerSideEdges","upperSideEdges","EdgeShape","fromNode","fromIndex","upperNodeEdgesY","midPathSegmentOffsetY","toNode","toIndex","lowerLayerEdge","lowerNodeEdgesY","besideTopNodeX","crossLayerPathSegmentOffsetX","d","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","push","reverseNode","index","values","sameLayer","filter","edgeEnd","before","after","otherLayer","otherLayerBefore","otherLayerAfter","addConnectionIndexAndNumberOfEdges","edgesWithConnectionIndex","getLowerRightNodeIndex","getUpperLeftNodeIndex","isMultiLayerEdge","abs","addSyntheticNodesAndEdgesG","grid","lowerRightNode","upperLeftNode","min","has","lowerLayerEdgeProperty","isLowerLayerEdge","originalEdge","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","nodeKeys","keys","indexOffset","nodeKey","sameLayerBefore","sameLayerAfter","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","addMidPathSegmentOffsetYAggregates","maxOffsetY","maxs","determineMidPathSegmentMaxOffsetY","layer","sumOfPreviousRowsFillLayers","applyMidPathSegmentOffsetYAggregates","calculateEmbeddedPaths","embeddedPaths","midPathSegmentOffsetMaxY","addEdgeIndexG","addCrossLayerPathSegmentOffsetXG","groupedByOffsetElementsX","addCrossLayerPathSegmentOffsetXForSlice","addCrossLayerPathSegmentOffsetX","addOffset","addCrossLayerPathSegmentOffsetMaxXG","determineAndAddCrossLayerPathSegmentOffsetMaxX","addCrossLayerPathSegmentOffsetMaxX","Diagram","props","viewBox","c","Sample","node_1_1","node_1_2","node_2_1","node_2_2","node_3_1","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_5_2","node_6_1","node_6_2","node_6_3","node_6_4","node_7_1","node_7_2","node_7_3","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","allGroups","isComponent","data-testid","GroupShape","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.d5d1717c.chunk.js","sourcesContent":["import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {assertNever} from \"./assertNever\";\n\ntype Symbols = \"component\"\n\nexport type Node = {\n    kind: \"node\",\n    name?: string,\n    symbol?: Symbols\n};\n\nexport type Row<N> = {\n    kind: \"row\",\n    name?: string,\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Column<N> = {\n    kind: \"column\",\n    name?: string,\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n    syntheticNodes: (Node & N)[]\n    syntheticEdges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(\n    element: Element<N>,\n    edges: Edge<N, E>[] = [],\n    syntheticNodes: (Node & N)[] = [],\n    syntheticEdges: Edge<N, E>[] = []\n): Graph<N, E> {\n    return {element, edges, syntheticNodes, syntheticEdges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(name?: string, symbol?: Symbols): Node {\n    return {\n        kind: \"node\",\n        name: name,\n        symbol: symbol\n    };\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}\n\nexport function allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allElements<N>(element: Element<N>): Element<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allElements).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}","export const MARGIN_Y = 5;\nexport const MARGIN_X = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const BORDER_SPACING_X = 10;\nexport const BORDER_SPACING_TOP = 30;\nexport const BORDER_SPACING_BOTTOM = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;\nexport const TEXT_PADDING = 5;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;","import {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"../elementsLayout/BorderIndexMaxX\";\nimport {CrossLayerPathSegmentOffsetMaxX} from \"../edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {BORDER_SPACING_X, EDGE_SPACING, ELEMENT_WIDTH, HORIZONTAL_SPACING, MARGIN_X} from \"../styling\";\nimport {BorderIndexLeft} from \"../elementsLayout/BorderIndexLeft\";\n\nexport type RequiredNodeDataGetElementLeftX =\n    OffsetElementsX &\n    BorderIndexLeft & BorderIndexMaxX &\n    CrossLayerPathSegmentOffsetMaxX\n\nexport function getElementLeftX(element: RequiredNodeDataGetElementLeftX) {\n    return MARGIN_X\n        + element.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n        + (element.borderIndexMaxX * (element.offsetElementsX * 2 + 1) - element.borderIndexLeft) * BORDER_SPACING_X\n        + element.crossLayerPathSegmentOffsetMaxX * element.offsetElementsX * EDGE_SPACING;\n}","import {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexTop} from \"../elementsLayout/BorderIndexTop\";\n\nexport type RequiredNodeDataGetElementTopY =\n    OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY\n\nexport function getElementTopY(element: RequiredNodeDataGetElementTopY) {\n    return MARGIN_Y\n        + element.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop - element.borderIndexTop) * BORDER_SPACING_TOP\n        + element.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + element.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"../styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\n\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {ELEMENT_HEIGHT, ELEMENT_WIDTH, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"../styling\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {Node} from \"../newGraphModel\"\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {ComponentSymbol} from \"./Symbols\";\n\ntype Props = Node & ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY;\n\nexport const NodeShape: React.FC<Props> = node => {\n    let x = getElementLeftX(node);\n    let y = getElementTopY(node);\n    return (\n        <g key={node.elementKey}>\n            <rect\n                x={x} y={y}\n                width={ELEMENT_WIDTH}\n                height={ELEMENT_HEIGHT}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            {node.name &&\n            <g>\n                <text\n                    x={x + TEXT_PADDING} y={y + ELEMENT_HEIGHT / 2}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + node.elementKey + \")\"}>{node.name}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + node.elementKey}>\n                    <rect\n                        x={x + TEXT_PADDING} y={y}\n                        width={ELEMENT_WIDTH - 2 * TEXT_PADDING - (node.symbol ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                        height={ELEMENT_HEIGHT}/>\n                </clipPath>\n            </g>\n            }\n            {node.symbol &&\n            <ComponentSymbol\n                symbolKey={node.elementKey + \"CS\"}\n                x={x + ELEMENT_WIDTH - SYMBOL_WIDTH - SYMBOL_SPACING}\n                y={y + SYMBOL_SPACING}\n                width={SYMBOL_WIDTH}/>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {Container} from \"../newGraphModel\";\nimport {EmbeddedElementsX} from \"../elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxBottom, EmbeddedBorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {EmbeddedBorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"../elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"../elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"../elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {EmbeddedMidPathSegmentY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\ntype Props = Container<\n    ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    EmbeddedElementsX & EmbeddedElementsY &\n    BorderIndexRight &\n    EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & EmbeddedBorderIndexMaxBottom &\n    EmbeddedMidPathSegmentY>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    let x = getElementLeftX(container);\n    let y = getElementTopY(container);\n    let width = container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n        + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n        + (container.embeddedElementsX - 1) * container.crossLayerPathSegmentOffsetMaxX * EDGE_SPACING;\n    let height = container.embeddedElementsY * ELEMENT_HEIGHT +\n        (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n        container.borderIndexTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n        container.embeddedMidPathSegmentY * EDGE_SPACING +\n        container.borderIndexBottom * BORDER_SPACING_BOTTOM;\n    return (\n        <g key={container.elementKey}>\n            <rect\n                x={x}\n                y={y}\n                width={width}\n                height={height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            {container.name &&\n            <g>\n                <text\n                    x={x + BORDER_SPACING_X}\n                    y={y + ELEMENT_HEIGHT / 2}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + container.elementKey + \")\"}>{container.name}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + container.elementKey}>\n                    <rect\n                        x={x + BORDER_SPACING_X}\n                        y={y}\n                        width={width - 2 * BORDER_SPACING_X}\n                        height={ELEMENT_HEIGHT}/>\n                </clipPath>\n            </g>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexTop, E>(graph, addBorderIndexTopGraph);\n}\n\nfunction addBorderIndexTopGraph(graph: Graph<unknown, unknown>) {\n    addBorderIndexTop(graph.element);\n    graph.syntheticNodes.forEach(node => Object.assign<Node, BorderIndexTop>(node, {borderIndexTop: 0}));\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {ascending} from \"./sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {assertNever} from \"./assertNever\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(graph: Graph<OffsetElementsY & BorderIndexBottom, unknown>) {\n    let max = determineBorderIndexMaxBottom(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxBottom(node, max, sums));\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(graph: Graph<OffsetElementsY & BorderIndexTop, unknown>) {\n    let max = determineBorderIndexMaxTop(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxTop(node, max, sums));\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nexport function fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}\n\nexport function fromIsLeftUpper<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsX === edge.to.offsetElementsX) {\n        return edge.from.offsetElementsY <= edge.to.offsetElementsY;\n    }\n    return edge.from.offsetElementsX < edge.to.offsetElementsX;\n}\n\nexport function getLeftUpperNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsLeftUpper(edge) ? edge.from : edge.to;\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {Edge} from \"../newGraphModel\";\nimport {getLeftUpperNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {MidPathSegmentOffsetY} from \"../edgesLayout/MidPathSegmentOffsetY\";\nimport {ConnectionIndex, NumberOfEdges} from \"../edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"../edgesLayout/EdgeIndex\";\nimport {IsLowerLayerEdge, LowerLayerEdge, OriginalEdge} from \"../edgesLayout/SyntheticNodesAndEdges\";\nimport {CrossLayerPathSegmentOffsetX} from \"../edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nfunction edgeEndCoordinates<N extends RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    let nodeCenteringOffset = (ELEMENT_WIDTH - (((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) || 0) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: getElementLeftX(node) + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: getElementTopY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    BorderIndexMaxBottom &\n    NumberOfEdges,\n    LowerLayerEdge<any, unknown> & EdgeIndex & MidPathSegmentOffsetY & ConnectionIndex & CrossLayerPathSegmentOffsetX>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getElementTopY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    if (!edge.lowerLayerEdge) {\n        return (\n            <path key={edge.edgeIndex} d={\n                \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n                \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n                \"L \" + toNode.x + \" \" + toNode.y\n            }\n                  stroke=\"black\"\n                  strokeWidth={STROKE_WIDTH}\n                  fill=\"none\"\n            />\n        );\n    } else {\n        let lowerLayerEdge = edge.lowerLayerEdge as Edge<unknown, MidPathSegmentOffsetY> & IsLowerLayerEdge & OriginalEdge<unknown, unknown>;\n        let lowerNodeEdgesY = getElementTopY(getUpperLeftNode(edge.lowerLayerEdge))\n            + ELEMENT_HEIGHT\n            + getUpperLeftNode(edge.lowerLayerEdge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n            + VERTICAL_SPACING / 2\n            + lowerLayerEdge.midPathSegmentOffsetY * EDGE_SPACING;\n        let besideTopNodeX = getElementLeftX(getLeftUpperNode(edge))\n            + ELEMENT_WIDTH + getUpperLeftNode(edge).borderIndexMaxX * BORDER_SPACING_X\n            + (edge.crossLayerPathSegmentOffsetX! + 1) * EDGE_SPACING;\n        return (\n            <path key={edge.edgeIndex} d={\n                \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n                \"L \" + besideTopNodeX + \" \" + upperNodeEdgesY + \" \" +\n                \"L \" + besideTopNodeX + \" \" + lowerNodeEdgesY + \" \" +\n                \"L \" + toNode.x + \" \" + lowerNodeEdgesY + \" \" +\n                \"L \" + toNode.x + \" \" + toNode.y\n            }\n                  stroke=\"black\"\n                  strokeWidth={STROKE_WIDTH}\n                  fill=\"none\"\n            />\n        );\n    }\n};","import {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {and, ascending, descending} from \"../sorting\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {fromIsUpperLeft} from \"../EdgeHelper\";\n\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\nexport type NumberOfEdges = {\n    upperSideEdges?: number\n    lowerSideEdges?: number\n}\n\nexport function addConnectionIndexAndNumberOfEdgesG<\n    N extends OffsetElementsY & OffsetElementsX & ElementKey,\n    E extends EdgeIndex & LowerLayerEdge<unknown, unknown>, G>(\n        graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    let edgesWithConnectionIndex = graph.edges as unknown as Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[];\n    copyConnectionIndexToLowerLayerEdge(edgesWithConnectionIndex);\n    return graph as Graph<N & NumberOfEdges, E & ConnectionIndex>;\n}\n\ntype EdgeType = Edge<OffsetElementsY & OffsetElementsX & ElementKey, EdgeIndex>\n\nexport function addConnectionIndexAndNumberOfEdges(edges: EdgeType[]) {\n    type NodeSide = {\n        node: OffsetElementsY & OffsetElementsX\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        edge: EdgeType\n        reverseNode: OffsetElementsY & OffsetElementsX\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(edge: EdgeType, firstNode: OffsetElementsY & OffsetElementsX & ElementKey, secondNode: OffsetElementsY & OffsetElementsX, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.offsetElementsY <= secondNode.offsetElementsY ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.elementKey + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            edge: edge,\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge, edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge, edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY === node.offsetElementsY);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY !== node.offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n\n        before.sort(and(descending(e => e.reverseNode.offsetElementsX), descending(e => e.edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(e => e.reverseNode.offsetElementsX), descending(e => e.reverseNode.offsetElementsY)));\n        otherLayerAfter.sort(and(ascending(e => e.reverseNode.offsetElementsX), ascending(e => e.reverseNode.offsetElementsY)));\n        after.sort(and(descending(e => e.reverseNode.offsetElementsX), ascending(e => e.edge.edgeIndex)));\n\n        let all = before.concat(otherLayerBefore).concat(otherLayerAfter).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nfunction copyConnectionIndexToLowerLayerEdge(edges: Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[]) {\n    edges.forEach(edge => {\n        if (edge.lowerLayerEdge) {\n            Object.assign<Edge<unknown, unknown>, ConnectionIndex>(edge.lowerLayerEdge, {\n                fromIndex: 0,\n                toIndex: getLowerRightNodeIndex(edge)\n            });\n        }\n    });\n}\n\nexport function getUpperLeftNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.fromIndex : edge.toIndex;\n}\n\nexport function getLowerRightNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.toIndex : edge.fromIndex;\n}","import {allElements, allNodes, Edge, Graph, Node, node} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY & ElementKey\n\nexport type IsLowerLayerEdge = {\n    isLowerLayerEdge: true\n};\n\nexport type OriginalEdge<N, E> = {\n    originalEdge: Edge<N, E>\n};\n\nexport type LowerLayerEdge<N, E> = {\n    lowerLayerEdge?: Edge<N, E> & IsLowerLayerEdge & OriginalEdge<N, E>\n}\n\nexport function isMultiLayerEdge(edge: Edge<OffsetElementsY, unknown>) {\n    return Math.abs(edge.from.offsetElementsY - edge.to.offsetElementsY) >= 2;\n}\n\nexport function addSyntheticNodesAndEdgesG(graph: Graph<NodeData, unknown>): Graph<NodeData, LowerLayerEdge<NodeData, unknown>> {\n    let elementKey = Math.max(...allElements(graph.element).map(element => element.elementKey));\n\n    let grid = new Map<string, boolean>();\n    allNodes(graph.element).forEach(node => grid.set(node.offsetElementsX + \"_\" + node.offsetElementsY, true));\n\n    function nodesOnPath(edge: Edge<OffsetElementsX & OffsetElementsY, unknown>): boolean {\n        let lowerRightNode = getLowerRightNode(edge);\n        let upperLeftNode = getUpperLeftNode(edge);\n        let offsetElementsX = Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX);\n\n        for (let i = upperLeftNode.offsetElementsY + 1; i <= lowerRightNode.offsetElementsY - 1; i++) {\n            if (grid.has(offsetElementsX + \"_\" + i)) return true;\n        }\n        return false;\n    }\n\n    let syntheticNodes: NodeData[] = [];\n    let syntheticEdges = graph.edges\n        .filter(isMultiLayerEdge)\n        .filter(nodesOnPath)\n        .map(edge => {\n            let lowerRightNode = getLowerRightNode(edge);\n            let upperLeftNode = getUpperLeftNode(edge);\n            elementKey++;\n            let from: NodeData = Object.assign<Node, NodeData>(node(), {\n                elementKey: elementKey,\n                offsetElementsY: lowerRightNode.offsetElementsY - 1,\n                offsetElementsX: Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX)\n            });\n            syntheticNodes.push(from);\n            let lowerLayerEdgeProperty: LowerLayerEdge<NodeData, unknown> = {\n                lowerLayerEdge: {\n                    from: from,\n                    to: lowerRightNode,\n                    isLowerLayerEdge: true,\n                    originalEdge: edge\n                }};\n            Object.assign<Edge<NodeData, unknown>, LowerLayerEdge<NodeData, unknown>>(\n                edge, lowerLayerEdgeProperty);\n            return lowerLayerEdgeProperty.lowerLayerEdge;\n        });\n\n    return Object.assign(graph, {syntheticNodes, syntheticEdges});\n}","import {and, ascending, descending} from \"../sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {\n    ConnectionIndex,\n    getLowerRightNodeIndex,\n    getUpperLeftNodeIndex,\n    NumberOfEdges\n} from \"./ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {IsLowerLayerEdge, isMultiLayerEdge, OriginalEdge} from \"./SyntheticNodesAndEdges\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX & NumberOfEdges, E extends ConnectionIndex & EdgeIndex>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY> {\n    addMidPathSegmentOffsetY(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).offsetElementsY;\n        let edges = groupedByOffsetElementsY.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsY.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return false;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return false;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 <\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX\n        });\n        let otherLayerAfter = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return true;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return true;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 >=\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX\n        });\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(\n            descending(edge => getLowerRightNode(edge).offsetElementsX),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return getUpperLeftNode(edgeWithOriginalEdge.originalEdge).offsetElementsX;\n            }),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return edgeWithOriginalEdge.originalEdge.edgeIndex;\n            }),\n            descending(edge => edge.edgeIndex)\n        ));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type MidPathSegmentOffsetMaxY = { midPathSegmentOffsetMaxY: number };\nexport type MidPathSegmentOffsetMaxPreviousY = { midPathSegmentOffsetMaxPreviousY: number }\nexport type EmbeddedMidPathSegmentY = { embeddedMidPathSegmentY: number };\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY & EmbeddedMidPathSegmentY\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = getMostBottomOffsetElementsY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges.concat(graph.syntheticEdges));\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, maxs, sums);\n    graph.syntheticNodes.forEach(node => applyMidPathSegmentOffsetYAggregates(node, maxs, sums));\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction calculateEmbeddedPaths(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedPaths = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedPaths += current.get(i) || 0;\n    }\n    return embeddedPaths;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Edge, Graph} from \"../newGraphModel\";\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addEdgeIndexG<N, E>(graph: Graph<N, E>):\n    Graph<N, E & EdgeIndex> {\n    addEdgeIndex(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & EdgeIndex>;\n}\n\nexport function addEdgeIndex(edges: Edge<unknown, unknown>[]) {\n    edges.forEach((edge, index) => {\n        Object.assign<Edge<unknown, unknown>, EdgeIndex>(\n            edge, {edgeIndex: index});\n    });\n}","import {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {getLeftUpperNode, getLowerRightNode} from \"../EdgeHelper\";\nimport {and, ascending} from \"../sorting\";\n\nexport type CrossLayerPathSegmentOffsetX = {\n    crossLayerPathSegmentOffsetX?: number\n}\n\nexport type RequiredNodeDataTypes = OffsetElementsX & OffsetElementsY\nexport type RequiredEdgeDataTypes = EdgeIndex & LowerLayerEdge<unknown, unknown>\nexport type RequiredEdgeType = Edge<RequiredNodeDataTypes, RequiredEdgeDataTypes>\n\nexport function addCrossLayerPathSegmentOffsetXG<N extends RequiredNodeDataTypes, E extends RequiredEdgeDataTypes>(graph: Graph<N, E>):\n    Graph<N, E & CrossLayerPathSegmentOffsetX> {\n    addCrossLayerPathSegmentOffsetX(graph.edges);\n    return graph as unknown as Graph<N, E & CrossLayerPathSegmentOffsetX>;\n}\n\nexport function addCrossLayerPathSegmentOffsetX(edges: RequiredEdgeType[]) {\n    let groupedByOffsetElementsX = new Map<number, RequiredEdgeType[]>();\n\n    edges.filter(edge => edge.lowerLayerEdge).forEach(edge => {\n        let key = getLeftUpperNode(edge).offsetElementsX;\n        let edges = groupedByOffsetElementsX.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsX.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsX.values()).forEach(addCrossLayerPathSegmentOffsetXForSlice);\n}\n\nfunction addCrossLayerPathSegmentOffsetXForSlice(edges: RequiredEdgeType[]) {\n    let groupedByUpperNode = new Map<string, RequiredEdgeType[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getLeftUpperNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        edges.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n\n        function addOffset(edge: RequiredEdgeType, indexInArray: number) {\n            let index = indexOffset + indexInArray;\n            Object.assign<RequiredEdgeType, CrossLayerPathSegmentOffsetX>(edge, {\n                crossLayerPathSegmentOffsetX: index\n            });\n        }\n\n        edges.forEach((edge, index) => addOffset(edge, index));\n\n        indexOffset += edges.length;\n    });\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {CrossLayerPathSegmentOffsetX} from \"./CrossLayerPathSegmentOffsetX\";\n\nexport type CrossLayerPathSegmentOffsetMaxX = { crossLayerPathSegmentOffsetMaxX: number };\n\ntype RequiredEdgeDataTypes = CrossLayerPathSegmentOffsetX;\n\nexport function addCrossLayerPathSegmentOffsetMaxXG<N, E extends RequiredEdgeDataTypes>(\n    graph: Graph<N, E>\n): Graph<N & CrossLayerPathSegmentOffsetMaxX, E> {\n    return transformElementsUsingGraph<N, CrossLayerPathSegmentOffsetMaxX, E>(graph, determineAndAddCrossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineAndAddCrossLayerPathSegmentOffsetMaxX(graph: Graph<unknown, RequiredEdgeDataTypes>) {\n    let crossLayerPathSegmentOffsetMaxX = determineCrossLayerPathSegmentOffsetMaxX(graph.edges);\n    addCrossLayerPathSegmentOffsetMaxX(graph.element, crossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineCrossLayerPathSegmentOffsetMaxX(edges: RequiredEdgeDataTypes[]): number {\n    return Math.max(...edges.map(edge => (edge.crossLayerPathSegmentOffsetX || 0) + 1), 0);\n}\n\nexport function addCrossLayerPathSegmentOffsetMaxX(element: Element<unknown>, crossLayerPathSegmentOffsetMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {allContainers, allNodes, Element, Graph} from \"./newGraphModel\";\nimport {NodeShape} from \"./shapes/NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG, OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG, OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./shapes/ContainerShape\";\nimport {addBorderIndexMaxXG, BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {\n    addBorderIndexMaxBottomG,\n    BorderIndexMaxBottom,\n    BorderIndexMaxPreviousBottom\n} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG, BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./shapes/EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {\n    addMidPathSegmentOffsetYAggregatesG,\n    MidPathSegmentOffsetMaxPreviousY,\n    MidPathSegmentOffsetMaxY\n} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {addEdgeIndexG} from \"./edgesLayout/EdgeIndex\";\nimport {addSyntheticNodesAndEdgesG} from \"./edgesLayout/SyntheticNodesAndEdges\";\nimport {addCrossLayerPathSegmentOffsetXG} from \"./edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {\n    addCrossLayerPathSegmentOffsetMaxXG,\n    CrossLayerPathSegmentOffsetMaxX\n} from \"./edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING, MARGIN_X, MARGIN_Y,\n    VERTICAL_SPACING\n} from \"./styling\";\n\nfunction width(element: Element<OffsetElementsX & BorderIndexMaxX & CrossLayerPathSegmentOffsetMaxX>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_X * 2\n            + element.offsetElementsX * HORIZONTAL_SPACING\n            + (element.offsetElementsX + 1) * ELEMENT_WIDTH\n            + element.borderIndexMaxX * (element.offsetElementsX + 1) * 2 * BORDER_SPACING_X\n            + element.crossLayerPathSegmentOffsetMaxX * (element.offsetElementsX + 1) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(width), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction height(element: Element<OffsetElementsY &\n    BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxBottom & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_Y * 2\n            + (element.offsetElementsY + 1) * VERTICAL_SPACING\n            + (element.offsetElementsY + 1) * ELEMENT_HEIGHT\n            + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop) * BORDER_SPACING_TOP\n            + (element.borderIndexMaxPreviousBottom + element.borderIndexMaxBottom) * BORDER_SPACING_BOTTOM\n            + (element.midPathSegmentOffsetMaxPreviousY + element.midPathSegmentOffsetMaxY) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(height), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\ntype DiagramProps = { graph: Graph<unknown, unknown> }\n\nexport const Diagram: React.FC<DiagramProps> = props => {\n    return [props.graph]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addSyntheticNodesAndEdgesG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addEdgeIndexG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(addCrossLayerPathSegmentOffsetXG)\n        .map(addCrossLayerPathSegmentOffsetMaxXG)\n        .map(graph => {\n            return (\n                <svg viewBox={\"0 0 \" + width(graph.element) + \" \" + height(graph.element)}>\n                    {allNodes(graph.element).map(NodeShape)}\n                    {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};","import React from \"react\";\nimport {edge, Element, graph, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node(\"Some node\");\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node(\"Component node\", \"component\");\n    let node_3_1 = node(\"Another component node\", \"component\");\n    let node_3_2 = node();\n    let node_4_1 = node(\"Some node with long text\");\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let node_7_1 = node();\n    let node_7_2 = node();\n    let node_7_3 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", name: \"Top row\", border: \"solid\", elements: [{\n                kind: \"column\", name: \"Left column\", border: \"solid\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", name: \"Right column\", border: \"solid\", elements: [{\n                    kind: \"row\", name: \"Nested row\", border: \"solid\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }, node_7_1, node_7_2, node_7_3]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", name: \"Bottom row\", border: \"solid\", elements: [{\n                kind: \"row\", name: \"Left row in row\", border: \"solid\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", name: \"Right row in row\", border: \"solid\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_1_1, node_4_1),\n        edge(node_1_1, node_1_2),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_4),\n        edge(node_2_2, node_4_4),\n        edge(node_2_2, node_4_2),\n        edge(node_2_2, node_6_4),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_5_2, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_5_1, node_4_5),\n        edge(node_5_2, node_4_5),\n        edge(node_6_1, node_4_5),\n        edge(node_6_2, node_4_5),\n        edge(node_6_3, node_4_5),\n        edge(node_6_4, node_4_5),\n        edge(node_6_4, node_6_3),\n        edge(node_6_4, node_6_3),\n        edge(node_7_3, node_6_4)\n    ];\n    return (\n        <Diagram graph={graph(element, edges)}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}