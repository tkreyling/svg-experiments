{"version":3,"sources":["v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/assertNever.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/graphics/getElementLeftX.tsx","v2/graphics/getElementTopY.tsx","v2/graphics/Symbols.tsx","v2/graphics/renderShape.tsx","v2/graphics/NodeComponent.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/graphics/ContainerComponent.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sorting.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/graphics/EdgeComponent.tsx","v2/edgesLayout/ConnectionIndexAndNumberOfEdges.tsx","v2/edgesLayout/SyntheticNodesAndEdges.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/edgesLayout/EdgeIndex.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetX.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetMaxX.tsx","v2/Diagram.tsx","v2/Sample.tsx","v2/NewArchitecture.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/sorting.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","result","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","assertNever","x","Error","element","syntheticNodes","syntheticEdges","transformElements","f","transformElementsUsingGraph","node","nameOrProperties","defaults","visible","shape","Object","assign","gap","db","queue","system","allNodes","flatMap","allContainers","concat","allElements","MARGIN_Y","MARGIN_X","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","STROKE_WIDTH","STROKE_WIDTH_SELECTED","DEPLOYMENT_BOX_INDENT","DEPLOYMENT_BOX_3D_OFFSET","DB_CYLINDER_ELLIPSE_Y","QUEUE_CYLINDER_ELLIPSE_X","getElementLeftX","offsetElementsX","borderIndexMaxX","borderIndexLeft","crossLayerPathSegmentOffsetMaxX","getElementTopY","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","ComponentSymbol","barWidthAbsolute","width","barHeightAbsolute","key","symbolKey","d","y","stroke","strokeWidth","fill","height","renderShape","selected","onClick","NodeComponent","props","textX","textY","elementKey","onNodeClick","transform","clipPath","fontSize","split","map","line","lineIndex","dy","SYMBOL_WIDTH","addOffsetElementsYG","addOffsetElementsY","accumulator","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","reduce","sum","add","ContainerComponent","container","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","embeddedMidPathSegmentY","borderIndexBottom","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","length","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTopGraph","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","ascending","property","o1","o2","descending","and","sortFunctions","i","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","sums","addBorderIndexMaxBottom","addition","get","calculateEmbeddedBorders","current","embeddedBorders","borderIndexMaxBottom","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getLeftUpperNode","fromIsLeftUpper","edgeEndCoordinates","edgeIndex","otherNode","onLowerSide","nodeCenteringOffset","lowerSideEdges","upperSideEdges","EdgeComponent","fromNode","fromIndex","upperNodeEdgesY","midPathSegmentOffsetY","toNode","toIndex","arrow","lowerLayerEdge","lowerNodeEdgesY","besideTopNodeX","crossLayerPathSegmentOffsetX","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","push","reverseNode","index","values","sameLayer","filter","edgeEnd","before","after","otherLayer","otherLayerBefore","otherLayerAfter","addConnectionIndexAndNumberOfEdges","edgesWithConnectionIndex","getLowerRightNodeIndex","getUpperLeftNodeIndex","isMultiLayerEdge","abs","addSyntheticNodesAndEdgesG","grid","lowerRightNode","upperLeftNode","min","has","lowerLayerEdgeProperty","isLowerLayerEdge","originalEdge","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","nodeKeys","keys","indexOffset","nodeKey","sameLayerBefore","sameLayerAfter","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","addMidPathSegmentOffsetYAggregates","maxOffsetY","maxs","determineMidPathSegmentMaxOffsetY","layer","sumOfPreviousRowsFillLayers","applyMidPathSegmentOffsetYAggregates","calculateEmbeddedPaths","embeddedPaths","midPathSegmentOffsetMaxY","addEdgeIndexG","addCrossLayerPathSegmentOffsetXG","groupedByOffsetElementsX","addCrossLayerPathSegmentOffsetXForSlice","addCrossLayerPathSegmentOffsetX","addOffset","addCrossLayerPathSegmentOffsetMaxXG","determineAndAddCrossLayerPathSegmentOffsetMaxX","addCrossLayerPathSegmentOffsetMaxX","Diagram","graphState","state","oldGraph","viewBox","c","Sample","node_1_1","node_1_2","node_2_1","node_2_2","node_3_1","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_5_2","node_6_1","node_6_2","node_6_3","node_6_4","node_7_1","node_7_2","node_8_1","node_8_2","createInitialGraph","browserContentViewComponent","browserSearchViewComponent","browserPdpViewComponent","customerBrowser","contentSiteMap","contentViewComponent","edutainment","searchViewComponent","pdpViewComponent","pdpView","siteMapGenerator","coreSiteMap","factFinderDB","factFinderAPI","factFinderFeedServiceDB","factFinderUpdater","ffProductImporter","ffProductCampaignsImporter","ffCategoryImporter","search","searchEdges","productCampaignsImporter","nightlyStockImporter","nearTimeStockImporter","deliveryTimeImporter","productService","productServiceEdges","productStream","productExporter","productCampaignsStream","productCampaignsExporter","nightlyStockStream","nightlyStockExporter","productExporterService","productExporterServiceEdges","stockStream","stockExporter","stockExporterService","stockExporterServiceEdges","deliveryTimeStream","deliveryTimeExporter","deliveryTimeExporterService","deliveryTimeExporterServiceEdges","categoryStream","categoryExporter","articleS3Bucket","categoryExporterService","categoryExporterServiceEdges","coreServices","coreServicesEdges","coreExporter","coreExporterEdges","coreAccount","coreAccountEdges","content","catalogContent","productContent","contentful","mediaData","shopNowDB","mediathek","mediathekEdges","mercatorStagingDB","mercatorDB","mercatorComponent","mercator","mercatorEdges","tds","tdsEdges","NewArchitecture","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","allGroups","NodeShape","isComponent","data-testid","GroupShape","EdgeShape","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.579d1cf5.chunk.js","sourcesContent":["import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {assertNever} from \"./assertNever\";\n\nexport type Symbols = \"component\" | \"db-table\"\n\ntype Shapes = \"rectangle\" | \"db-cylinder\" | \"queue-cylinder\" | \"deployment-box\"\n\nexport type Node = {\n    kind: \"node\",\n} & NodeProperties;\n\nexport type NodeProperties = {\n    name?: string,\n    visible?: boolean,\n    shape?: Shapes,\n    symbol?: Symbols,\n    selected?: boolean\n};\n\nexport type Row<N> = {\n    kind: \"row\"\n} & ContainerProperties<N>;\n\nexport type Column<N> = {\n    kind: \"column\"\n} & ContainerProperties<N>;\n\ntype ContainerProperties<N> = {\n    name?: string,\n    shape?: Shapes,\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N,\n    selected?: boolean\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n    syntheticNodes: (Node & N)[]\n    syntheticEdges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(\n    element: Element<N>,\n    edges: Edge<N, E>[] = [],\n    syntheticNodes: (Node & N)[] = [],\n    syntheticEdges: Edge<N, E>[] = []\n): Graph<N, E> {\n    return {element, edges, syntheticNodes, syntheticEdges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(nameOrProperties?: string | NodeProperties): Node {\n    let defaults: Node = {\n        kind: \"node\",\n        visible: true,\n        shape: \"rectangle\"\n    };\n    if (!nameOrProperties) {\n        return defaults;\n    } else if (typeof nameOrProperties === 'string') {\n        return Object.assign<Node, NodeProperties>(defaults, {name: nameOrProperties});\n    } else {\n        return Object.assign<Node, NodeProperties>(defaults, nameOrProperties);\n    }\n}\n\nexport function gap(): Node {\n    return node({visible: false});\n}\n\nexport function component(name: string): Node {\n    return node({name: name, symbol: \"component\"});\n}\n\nexport function dbTable(name: string): Node {\n    return node({name: name, symbol: \"db-table\"});\n}\n\nexport function db(name: string): Node {\n    return node({name: name, shape: \"db-cylinder\"});\n}\n\nexport function queue(name: string): Node {\n    return node({name: name, shape: \"queue-cylinder\"});\n}\n\nexport function system(name: string): Node {\n    return node({name: name, shape: \"deployment-box\"});\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}\n\nexport function allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allElements<N>(element: Element<N>): Element<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allElements).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}","export const MARGIN_Y = 5;\nexport const MARGIN_X = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 60;\nexport const BORDER_SPACING_X = 15;\nexport const BORDER_SPACING_TOP = 40;\nexport const BORDER_SPACING_BOTTOM = 15;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;\nexport const STROKE_WIDTH_SELECTED = 1.5;\nexport const TEXT_PADDING = 5;\nexport const SYMBOL_WIDTH = 16;\nexport const SYMBOL_SPACING = 3;\nexport const ARROW_WIDTH = 3;\nexport const ARROW_HEIGHT = 5;\nexport const DEPLOYMENT_BOX_INDENT = BORDER_SPACING_X * 0.3;\nexport const DEPLOYMENT_BOX_3D_OFFSET = BORDER_SPACING_X * 0.4;\nexport const DB_CYLINDER_ELLIPSE_Y = BORDER_SPACING_X * 0.5;\nexport const QUEUE_CYLINDER_ELLIPSE_X = BORDER_SPACING_X * 0.4;","import {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"../elementsLayout/BorderIndexMaxX\";\nimport {CrossLayerPathSegmentOffsetMaxX} from \"../edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {BORDER_SPACING_X, EDGE_SPACING, ELEMENT_WIDTH, HORIZONTAL_SPACING, MARGIN_X} from \"../styling\";\nimport {BorderIndexLeft} from \"../elementsLayout/BorderIndexLeft\";\n\nexport type RequiredNodeDataGetElementLeftX =\n    OffsetElementsX &\n    BorderIndexLeft & BorderIndexMaxX &\n    CrossLayerPathSegmentOffsetMaxX\n\nexport function getElementLeftX(element: RequiredNodeDataGetElementLeftX) {\n    return MARGIN_X\n        + element.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n        + (element.borderIndexMaxX * (element.offsetElementsX * 2 + 1) - element.borderIndexLeft) * BORDER_SPACING_X\n        + element.crossLayerPathSegmentOffsetMaxX * element.offsetElementsX * EDGE_SPACING;\n}","import {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexTop} from \"../elementsLayout/BorderIndexTop\";\n\nexport type RequiredNodeDataGetElementTopY =\n    OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY\n\nexport function getElementTopY(element: RequiredNodeDataGetElementTopY) {\n    return MARGIN_Y\n        + element.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop - element.borderIndexTop) * BORDER_SPACING_TOP\n        + element.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + element.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"../styling\";\nimport {Symbols} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type Symbol = {\n    symbol: Symbols\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\n\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    switch (symbol.symbol) {\n        case \"component\": {\n            const symbolHeightRelative = 1.1;\n            const barWidthRelative = 0.4;\n            const barHeightRelative = 0.15;\n            const barWidthAbsolute = symbol.width * barWidthRelative;\n            const barHeightAbsolute = symbol.width * barHeightRelative;\n            return (\n                <g key={symbol.symbolKey}>\n                    <path d={\n                        \"M \" + (symbol.x + barWidthAbsolute / 2) + \" \" + (symbol.y + 4 * barHeightAbsolute) + \" \" +\n                        \"h \" + (-barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (-barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (symbol.width * (1 - barWidthRelative / 2)) + \" \" +\n                        \"v \" + (symbol.width * symbolHeightRelative) + \" \" +\n                        \"h \" + (-symbol.width * (1 - barWidthRelative / 2)) + \" \" +\n                        \"Z\"\n                    }\n                          stroke=\"black\"\n                          strokeWidth={STROKE_WIDTH}\n                          fill=\"none\"\n                    />\n                    <path d={\n                        \"M \" + (symbol.x + barWidthAbsolute / 2) + \" \" + (symbol.y + 4 * barHeightAbsolute) + \" \" +\n                        \"h \" + (barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (-barWidthAbsolute / 2)\n                    }\n                          stroke=\"black\"\n                          strokeWidth={STROKE_WIDTH}\n                          fill=\"none\"\n                    />\n                    <path d={\n                        \"M \" + (symbol.x + barWidthAbsolute / 2) + \" \" + (symbol.y + 2 * barHeightAbsolute) + \" \" +\n                        \"h \" + (barWidthAbsolute / 2) + \" \" +\n                        \"v \" + (-barHeightAbsolute) + \" \" +\n                        \"h \" + (-barWidthAbsolute / 2)\n                    }\n                          stroke=\"black\"\n                          strokeWidth={STROKE_WIDTH}\n                          fill=\"none\"\n                    />\n                </g>\n            );\n        }\n        case \"db-table\": {\n            return (\n                <g key={symbol.symbolKey}>\n                    <rect\n                        x={symbol.x}\n                        y={symbol.y}\n                        width={symbol.width}\n                        height={symbol.width}\n                        fill=\"none\"\n                        strokeWidth={STROKE_WIDTH}\n                        stroke=\"black\"\n                    />\n                    <path d={\n                        \"M \" + (symbol.x) + \" \" + (symbol.y + 0.3 * symbol.width) + \" \" +\n                        \"h \" + symbol.width\n                    }\n                          stroke=\"black\"\n                          strokeWidth={STROKE_WIDTH}\n                          fill=\"none\"\n                    />\n                    <path d={\n                        \"M \" + (symbol.x + 0.3 * symbol.width) + \" \" + (symbol.y) + \" \" +\n                        \"v \" + symbol.width\n                    }\n                          stroke=\"black\"\n                          strokeWidth={STROKE_WIDTH}\n                          fill=\"none\"\n                    />\n                </g>\n            )\n        }\n        default: {\n            assertNever(symbol.symbol);\n        }\n    }\n};","import {\n    DB_CYLINDER_ELLIPSE_Y, DEPLOYMENT_BOX_3D_OFFSET,\n    DEPLOYMENT_BOX_INDENT,\n    QUEUE_CYLINDER_ELLIPSE_X,\n    STROKE_WIDTH,\n    STROKE_WIDTH_SELECTED\n} from \"../styling\";\nimport React from \"react\";\n\nexport function renderShape(\n    shape: \"rectangle\" | \"db-cylinder\" | \"queue-cylinder\" | \"deployment-box\" | undefined,\n    x: number,\n    y: number,\n    width: number,\n    height: number,\n    fill = \"white\",\n    selected?: boolean,\n    onClick?: () => void\n) {\n    let strokeWidth = selected ? STROKE_WIDTH_SELECTED : STROKE_WIDTH;\n\n    return <>\n        {shape === \"rectangle\" &&\n        <rect\n            x={x}\n            y={y}\n            width={width}\n            height={height}\n            onClick={onClick}\n            fill={fill}\n            strokeWidth={strokeWidth}\n            stroke=\"black\"\n        />\n        }\n        {shape === \"db-cylinder\" &&\n        <g>\n            <path d={\n                \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                \"A \" + (width / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + (x + width) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                \"V \" + (y + height - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                \"A \" + (width / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + x + \",\" + (y + height - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                \"Z\"\n            }\n                  onClick={onClick}\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"white\"\n            />\n            <path d={\n                \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                \"A \" + (width / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,0 \" + (x + width) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y)\n            }\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"none\"\n            />\n        </g>\n        }\n        {shape === \"queue-cylinder\" &&\n        <g>\n            <path d={\n                \"M \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (height / 2) + \" 0 1,0 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + height) + \" \" +\n                \"H \" + (x + width - QUEUE_CYLINDER_ELLIPSE_X) + \" \" +\n                \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (height / 2) + \" 0 1,0 \" + (x + width - QUEUE_CYLINDER_ELLIPSE_X) + \",\" + y + \" \" +\n                \"Z\"\n            }\n                  onClick={onClick}\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"white\"\n            />\n            <path d={\n                \"M \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (height / 2) + \" 0 1,1 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + height)\n            }\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"none\"\n            />\n        </g>\n        }\n        {(shape === \"deployment-box\") &&\n        <g>\n            <path d={\n                \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"L \" + (x + DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y + \" \" +\n                \"H \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" +\n                \"V \" + (y + height - DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"L \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + height) +\n                \"H \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"Z\"\n            }\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  onClick={onClick}\n                  fill={fill}\n            />\n            <path d={\n                \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"H \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"V \" + (y + height)\n            }\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"none\"\n            />\n            <path d={\n                \"M \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                \"L \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y\n            }\n                  stroke=\"black\"\n                  strokeWidth={strokeWidth}\n                  fill=\"none\"\n            />\n        </g>\n        }\n    </>;\n}","import React from \"react\";\nimport {\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    QUEUE_CYLINDER_ELLIPSE_X,\n    SYMBOL_SPACING,\n    SYMBOL_WIDTH,\n    TEXT_PADDING\n} from \"../styling\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {Node} from \"../newGraphModel\"\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {ComponentSymbol} from \"./Symbols\";\nimport {renderShape} from \"./renderShape\";\n\ntype Props = {\n    node : Node & ElementKey & RequiredNodeDataGetElementLeftX & RequiredNodeDataGetElementTopY,\n    onNodeClick: (node: Node) => void\n};\n\nexport const NodeComponent: React.FC<Props> = props => {\n    let node = props.node;\n    if (!node.visible) return null;\n\n    let x = getElementLeftX(node);\n    let y = getElementTopY(node);\n\n    let textX = x + TEXT_PADDING\n        + (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)\n        + (node.shape === \"deployment-box\" ? TEXT_PADDING : 0);\n    let textY = y\n        + (node.shape === \"deployment-box\" ? TEXT_PADDING : 0);\n\n    return (\n        <g key={node.elementKey}>\n            {renderShape(node.shape, x, y, ELEMENT_WIDTH, ELEMENT_HEIGHT, \"white\", node.selected, () => props.onNodeClick(node))}\n            {node.name &&\n            <g transform={\"translate(\"\n            + textX + \" \" + textY + \")\"}>\n                <text\n                    x={0}\n                    y={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.3 : 0)}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + node.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {node.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={node.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n                <clipPath id={\"clip-element-text-\" + node.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={ELEMENT_WIDTH - 2 * TEXT_PADDING\n                        - (node.symbol ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)\n                        - (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                        height={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.8 : 1)}/>\n                </clipPath>\n            </g>\n            }\n            {node.symbol &&\n            <ComponentSymbol\n                symbol={node.symbol}\n                symbolKey={node.elementKey + \"CS\"}\n                x={x + ELEMENT_WIDTH - SYMBOL_WIDTH - SYMBOL_SPACING}\n                y={y + SYMBOL_SPACING}\n                width={SYMBOL_WIDTH}/>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    DB_CYLINDER_ELLIPSE_Y,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    TEXT_PADDING,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {Container} from \"../newGraphModel\";\nimport {EmbeddedElementsX} from \"../elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxBottom, EmbeddedBorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {EmbeddedBorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"../elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"../elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"../elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {EmbeddedMidPathSegmentY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {renderShape} from \"./renderShape\";\n\ntype Props = Container<\n    ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    EmbeddedElementsX & EmbeddedElementsY &\n    BorderIndexRight &\n    EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & EmbeddedBorderIndexMaxBottom &\n    EmbeddedMidPathSegmentY>;\n\nexport const ContainerComponent: React.FC<Props> = container => {\n    let x = getElementLeftX(container);\n    let y = getElementTopY(container);\n\n    let width = container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n        + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n        + (container.embeddedElementsX - 1) * container.crossLayerPathSegmentOffsetMaxX * EDGE_SPACING;\n    let height = container.embeddedElementsY * ELEMENT_HEIGHT +\n        (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n        container.borderIndexTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n        container.embeddedMidPathSegmentY * EDGE_SPACING +\n        container.borderIndexBottom * BORDER_SPACING_BOTTOM;\n\n    let textX = x + BORDER_SPACING_X;\n    let textY = y + TEXT_PADDING\n        + (container.shape === \"db-cylinder\" ? DB_CYLINDER_ELLIPSE_Y : 0);\n\n    return (\n        <g key={container.elementKey}>\n            {renderShape(container.shape, x, y, width, height, \"none\")}\n\n            {container.name &&\n            <g transform={\"translate(\" + textX + \" \" + textY + \")\"}>\n                <text\n                    x={0}\n                    y={0}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + container.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {container.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={container.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + container.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={width - 2 * BORDER_SPACING_X}\n                        height={BORDER_SPACING_TOP}/>\n                </clipPath>\n            </g>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.shape ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.shape ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.shape ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.shape ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexTop, E>(graph, addBorderIndexTopGraph);\n}\n\nfunction addBorderIndexTopGraph(graph: Graph<unknown, unknown>) {\n    addBorderIndexTop(graph.element);\n    graph.syntheticNodes.forEach(node => Object.assign<Node, BorderIndexTop>(node, {borderIndexTop: 0}));\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.shape ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.shape ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.shape ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.shape ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {ascending} from \"./sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {assertNever} from \"./assertNever\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(graph: Graph<OffsetElementsY & BorderIndexBottom, unknown>) {\n    let max = determineBorderIndexMaxBottom(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxBottom(node, max, sums));\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(graph: Graph<OffsetElementsY & BorderIndexTop, unknown>) {\n    let max = determineBorderIndexMaxTop(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxTop(node, max, sums));\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nexport function fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}\n\nexport function fromIsLeftUpper<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsX === edge.to.offsetElementsX) {\n        return edge.from.offsetElementsY <= edge.to.offsetElementsY;\n    }\n    return edge.from.offsetElementsX < edge.to.offsetElementsX;\n}\n\nexport function getLeftUpperNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsLeftUpper(edge) ? edge.from : edge.to;\n}","import React from \"react\";\nimport {\n    ARROW_HEIGHT,\n    ARROW_WIDTH,\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH, STROKE_WIDTH_SELECTED,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {Edge} from \"../newGraphModel\";\nimport {getLeftUpperNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {MidPathSegmentOffsetY} from \"../edgesLayout/MidPathSegmentOffsetY\";\nimport {ConnectionIndex, NumberOfEdges} from \"../edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"../edgesLayout/EdgeIndex\";\nimport {IsLowerLayerEdge, LowerLayerEdge, OriginalEdge} from \"../edgesLayout/SyntheticNodesAndEdges\";\nimport {CrossLayerPathSegmentOffsetX} from \"../edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nfunction edgeEndCoordinates<N extends RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    let nodeCenteringOffset = (ELEMENT_WIDTH - (((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) || 0) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: getElementLeftX(node) + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: getElementTopY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeComponent: React.FC<Edge<RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    BorderIndexMaxBottom &\n    NumberOfEdges,\n    LowerLayerEdge<any, unknown> & EdgeIndex & MidPathSegmentOffsetY & ConnectionIndex & CrossLayerPathSegmentOffsetX>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getElementTopY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n\n    let strokeWidth = edge.selected ? STROKE_WIDTH_SELECTED: STROKE_WIDTH;\n\n    let onLowerSide = edge.to.offsetElementsY <= edge.from.offsetElementsY;\n    let arrow = (\n        <path d={\n            \"M \" + (toNode.x + ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1)) + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y + \" \" +\n            \"L \" + (toNode.x - ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1))\n        }\n              stroke=\"black\"\n              strokeWidth={strokeWidth}\n              fill=\"none\"\n        />\n    );\n\n    if (!edge.lowerLayerEdge) {\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    } else {\n        let lowerLayerEdge = edge.lowerLayerEdge as Edge<unknown, MidPathSegmentOffsetY> & IsLowerLayerEdge & OriginalEdge<unknown, unknown>;\n        let lowerNodeEdgesY = getElementTopY(getUpperLeftNode(edge.lowerLayerEdge))\n            + ELEMENT_HEIGHT\n            + getUpperLeftNode(edge.lowerLayerEdge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n            + VERTICAL_SPACING / 2\n            + lowerLayerEdge.midPathSegmentOffsetY * EDGE_SPACING;\n        let besideTopNodeX = getElementLeftX(getLeftUpperNode(edge))\n            + ELEMENT_WIDTH + getUpperLeftNode(edge).borderIndexMaxX * BORDER_SPACING_X\n            + (edge.crossLayerPathSegmentOffsetX! + 1) * EDGE_SPACING;\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + besideTopNodeX + \" \" +\n                    \"V \" + lowerNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    }\n};","import {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {and, ascending, descending} from \"../sorting\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {fromIsUpperLeft} from \"../EdgeHelper\";\n\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\nexport type NumberOfEdges = {\n    upperSideEdges?: number\n    lowerSideEdges?: number\n}\n\nexport function addConnectionIndexAndNumberOfEdgesG<\n    N extends OffsetElementsY & OffsetElementsX & ElementKey,\n    E extends EdgeIndex & LowerLayerEdge<unknown, unknown>, G>(\n        graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    let edgesWithConnectionIndex = graph.edges as unknown as Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[];\n    copyConnectionIndexToLowerLayerEdge(edgesWithConnectionIndex);\n    return graph as Graph<N & NumberOfEdges, E & ConnectionIndex>;\n}\n\ntype EdgeType = Edge<OffsetElementsY & OffsetElementsX & ElementKey, EdgeIndex>\n\nexport function addConnectionIndexAndNumberOfEdges(edges: EdgeType[]) {\n    type NodeSide = {\n        node: OffsetElementsY & OffsetElementsX\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        edge: EdgeType\n        reverseNode: OffsetElementsY & OffsetElementsX\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(edge: EdgeType, firstNode: OffsetElementsY & OffsetElementsX & ElementKey, secondNode: OffsetElementsY & OffsetElementsX, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.offsetElementsY <= secondNode.offsetElementsY ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.elementKey + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            edge: edge,\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge, edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge, edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY === node.offsetElementsY);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY !== node.offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n\n        before.sort(and(descending(e => e.reverseNode.offsetElementsX), descending(e => e.edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(e => e.reverseNode.offsetElementsX), descending(e => e.reverseNode.offsetElementsY)));\n        otherLayerAfter.sort(and(ascending(e => e.reverseNode.offsetElementsX), ascending(e => e.reverseNode.offsetElementsY)));\n        after.sort(and(descending(e => e.reverseNode.offsetElementsX), ascending(e => e.edge.edgeIndex)));\n\n        let all = before.concat(otherLayerBefore).concat(otherLayerAfter).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nfunction copyConnectionIndexToLowerLayerEdge(edges: Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[]) {\n    edges.forEach(edge => {\n        if (edge.lowerLayerEdge) {\n            Object.assign<Edge<unknown, unknown>, ConnectionIndex>(edge.lowerLayerEdge, {\n                fromIndex: 0,\n                toIndex: getLowerRightNodeIndex(edge)\n            });\n        }\n    });\n}\n\nexport function getUpperLeftNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.fromIndex : edge.toIndex;\n}\n\nexport function getLowerRightNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.toIndex : edge.fromIndex;\n}","import {allElements, allNodes, Edge, Graph, Node, node} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY & ElementKey\n\nexport type IsLowerLayerEdge = {\n    isLowerLayerEdge: true\n};\n\nexport type OriginalEdge<N, E> = {\n    originalEdge: Edge<N, E>\n};\n\nexport type LowerLayerEdge<N, E> = {\n    lowerLayerEdge?: Edge<N, E> & IsLowerLayerEdge & OriginalEdge<N, E>\n}\n\nexport function isMultiLayerEdge(edge: Edge<OffsetElementsY, unknown>) {\n    return Math.abs(edge.from.offsetElementsY - edge.to.offsetElementsY) >= 2;\n}\n\nexport function addSyntheticNodesAndEdgesG(graph: Graph<NodeData, unknown>): Graph<NodeData, LowerLayerEdge<NodeData, unknown>> {\n    let elementKey = Math.max(...allElements(graph.element).map(element => element.elementKey));\n\n    let grid = new Map<string, boolean>();\n    allNodes(graph.element)\n        .filter(node => node.visible)\n        .forEach(node => grid.set(node.offsetElementsX + \"_\" + node.offsetElementsY, true));\n\n    function nodesOnPath(edge: Edge<OffsetElementsX & OffsetElementsY, unknown>): boolean {\n        let lowerRightNode = getLowerRightNode(edge);\n        let upperLeftNode = getUpperLeftNode(edge);\n        let offsetElementsX = Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX);\n\n        for (let i = upperLeftNode.offsetElementsY + 1; i <= lowerRightNode.offsetElementsY - 1; i++) {\n            if (grid.has(offsetElementsX + \"_\" + i)) return true;\n        }\n        return false;\n    }\n\n    let syntheticNodes: NodeData[] = [];\n    let syntheticEdges = graph.edges\n        .filter(isMultiLayerEdge)\n        .filter(nodesOnPath)\n        .map(edge => {\n            let lowerRightNode = getLowerRightNode(edge);\n            let upperLeftNode = getUpperLeftNode(edge);\n            elementKey++;\n            let from: NodeData = Object.assign<Node, NodeData>(node(), {\n                elementKey: elementKey,\n                offsetElementsY: lowerRightNode.offsetElementsY - 1,\n                offsetElementsX: Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX)\n            });\n            syntheticNodes.push(from);\n            let lowerLayerEdgeProperty: LowerLayerEdge<NodeData, unknown> = {\n                lowerLayerEdge: {\n                    from: from,\n                    to: lowerRightNode,\n                    isLowerLayerEdge: true,\n                    originalEdge: edge\n                }};\n            Object.assign<Edge<NodeData, unknown>, LowerLayerEdge<NodeData, unknown>>(\n                edge, lowerLayerEdgeProperty);\n            return lowerLayerEdgeProperty.lowerLayerEdge;\n        });\n\n    return Object.assign(graph, {syntheticNodes, syntheticEdges});\n}","import {and, ascending, descending} from \"../sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {\n    ConnectionIndex,\n    getLowerRightNodeIndex,\n    getUpperLeftNodeIndex,\n    NumberOfEdges\n} from \"./ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {IsLowerLayerEdge, isMultiLayerEdge, OriginalEdge} from \"./SyntheticNodesAndEdges\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX & NumberOfEdges, E extends ConnectionIndex & EdgeIndex>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY> {\n    addMidPathSegmentOffsetY(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).offsetElementsY;\n        let edges = groupedByOffsetElementsY.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsY.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return false;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return false;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 <\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX\n        });\n        let otherLayerAfter = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return true;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return true;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 >=\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX\n        });\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(\n            descending(edge => getLowerRightNode(edge).offsetElementsX),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return getUpperLeftNode(edgeWithOriginalEdge.originalEdge).offsetElementsX;\n            }),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return edgeWithOriginalEdge.originalEdge.edgeIndex;\n            }),\n            descending(edge => edge.edgeIndex)\n        ));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type MidPathSegmentOffsetMaxY = { midPathSegmentOffsetMaxY: number };\nexport type MidPathSegmentOffsetMaxPreviousY = { midPathSegmentOffsetMaxPreviousY: number }\nexport type EmbeddedMidPathSegmentY = { embeddedMidPathSegmentY: number };\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY & EmbeddedMidPathSegmentY\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = getMostBottomOffsetElementsY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges.concat(graph.syntheticEdges));\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, maxs, sums);\n    graph.syntheticNodes.forEach(node => applyMidPathSegmentOffsetYAggregates(node, maxs, sums));\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction calculateEmbeddedPaths(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedPaths = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedPaths += current.get(i) || 0;\n    }\n    return embeddedPaths;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Edge, Graph} from \"../newGraphModel\";\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addEdgeIndexG<N, E>(graph: Graph<N, E>):\n    Graph<N, E & EdgeIndex> {\n    addEdgeIndex(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & EdgeIndex>;\n}\n\nexport function addEdgeIndex(edges: Edge<unknown, unknown>[]) {\n    edges.forEach((edge, index) => {\n        Object.assign<Edge<unknown, unknown>, EdgeIndex>(\n            edge, {edgeIndex: index});\n    });\n}","import {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {getLeftUpperNode, getLowerRightNode} from \"../EdgeHelper\";\nimport {and, ascending} from \"../sorting\";\n\nexport type CrossLayerPathSegmentOffsetX = {\n    crossLayerPathSegmentOffsetX?: number\n}\n\nexport type RequiredNodeDataTypes = OffsetElementsX & OffsetElementsY\nexport type RequiredEdgeDataTypes = EdgeIndex & LowerLayerEdge<unknown, unknown>\nexport type RequiredEdgeType = Edge<RequiredNodeDataTypes, RequiredEdgeDataTypes>\n\nexport function addCrossLayerPathSegmentOffsetXG<N extends RequiredNodeDataTypes, E extends RequiredEdgeDataTypes>(graph: Graph<N, E>):\n    Graph<N, E & CrossLayerPathSegmentOffsetX> {\n    addCrossLayerPathSegmentOffsetX(graph.edges);\n    return graph as unknown as Graph<N, E & CrossLayerPathSegmentOffsetX>;\n}\n\nexport function addCrossLayerPathSegmentOffsetX(edges: RequiredEdgeType[]) {\n    let groupedByOffsetElementsX = new Map<number, RequiredEdgeType[]>();\n\n    edges.filter(edge => edge.lowerLayerEdge).forEach(edge => {\n        let key = getLeftUpperNode(edge).offsetElementsX;\n        let edges = groupedByOffsetElementsX.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsX.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsX.values()).forEach(addCrossLayerPathSegmentOffsetXForSlice);\n}\n\nfunction addCrossLayerPathSegmentOffsetXForSlice(edges: RequiredEdgeType[]) {\n    let groupedByUpperNode = new Map<string, RequiredEdgeType[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getLeftUpperNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        edges.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n\n        function addOffset(edge: RequiredEdgeType, indexInArray: number) {\n            let index = indexOffset + indexInArray;\n            Object.assign<RequiredEdgeType, CrossLayerPathSegmentOffsetX>(edge, {\n                crossLayerPathSegmentOffsetX: index\n            });\n        }\n\n        edges.forEach((edge, index) => addOffset(edge, index));\n\n        indexOffset += edges.length;\n    });\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {CrossLayerPathSegmentOffsetX} from \"./CrossLayerPathSegmentOffsetX\";\n\nexport type CrossLayerPathSegmentOffsetMaxX = { crossLayerPathSegmentOffsetMaxX: number };\n\ntype RequiredEdgeDataTypes = CrossLayerPathSegmentOffsetX;\n\nexport function addCrossLayerPathSegmentOffsetMaxXG<N, E extends RequiredEdgeDataTypes>(\n    graph: Graph<N, E>\n): Graph<N & CrossLayerPathSegmentOffsetMaxX, E> {\n    return transformElementsUsingGraph<N, CrossLayerPathSegmentOffsetMaxX, E>(graph, determineAndAddCrossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineAndAddCrossLayerPathSegmentOffsetMaxX(graph: Graph<unknown, RequiredEdgeDataTypes>) {\n    let crossLayerPathSegmentOffsetMaxX = determineCrossLayerPathSegmentOffsetMaxX(graph.edges);\n    addCrossLayerPathSegmentOffsetMaxX(graph.element, crossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineCrossLayerPathSegmentOffsetMaxX(edges: RequiredEdgeDataTypes[]): number {\n    return Math.max(...edges.map(edge => (edge.crossLayerPathSegmentOffsetX || 0) + 1), 0);\n}\n\nexport function addCrossLayerPathSegmentOffsetMaxX(element: Element<unknown>, crossLayerPathSegmentOffsetMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React, {useState} from \"react\";\nimport {allContainers, allNodes, Element, graph, Graph, Node} from \"./newGraphModel\";\nimport {NodeComponent} from \"./graphics/NodeComponent\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG, OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG, OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerComponent} from \"./graphics/ContainerComponent\";\nimport {addBorderIndexMaxXG, BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {\n    addBorderIndexMaxBottomG,\n    BorderIndexMaxBottom,\n    BorderIndexMaxPreviousBottom\n} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG, BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeComponent} from \"./graphics/EdgeComponent\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {\n    addMidPathSegmentOffsetYAggregatesG,\n    MidPathSegmentOffsetMaxPreviousY,\n    MidPathSegmentOffsetMaxY\n} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {addEdgeIndexG} from \"./edgesLayout/EdgeIndex\";\nimport {addSyntheticNodesAndEdgesG} from \"./edgesLayout/SyntheticNodesAndEdges\";\nimport {addCrossLayerPathSegmentOffsetXG} from \"./edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {\n    addCrossLayerPathSegmentOffsetMaxXG,\n    CrossLayerPathSegmentOffsetMaxX\n} from \"./edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    MARGIN_X,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"./styling\";\n\nfunction width(element: Element<OffsetElementsX & BorderIndexMaxX & CrossLayerPathSegmentOffsetMaxX>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_X * 2\n            + element.offsetElementsX * HORIZONTAL_SPACING\n            + (element.offsetElementsX + 1) * ELEMENT_WIDTH\n            + element.borderIndexMaxX * (element.offsetElementsX + 1) * 2 * BORDER_SPACING_X\n            + element.crossLayerPathSegmentOffsetMaxX * (element.offsetElementsX + 1) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(width), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction height(element: Element<OffsetElementsY &\n    BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxBottom & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_Y * 2\n            + (element.offsetElementsY + 1) * VERTICAL_SPACING\n            + (element.offsetElementsY + 1) * ELEMENT_HEIGHT\n            + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop) * BORDER_SPACING_TOP\n            + (element.borderIndexMaxPreviousBottom + element.borderIndexMaxBottom) * BORDER_SPACING_BOTTOM\n            + (element.midPathSegmentOffsetMaxPreviousY + element.midPathSegmentOffsetMaxY) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(height), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\ntype DiagramProps = {\n    initialGraph: Graph<unknown, unknown>\n}\n\nexport const Diagram: React.FC<DiagramProps> = props => {\n\n    const [graphState, setGraph] = useState(props.initialGraph);\n\n    function onNodeClick(node: Node) {\n        function setSelected(state: boolean) {\n            node.selected = state;\n            setGraph(oldGraph => {\n                oldGraph.edges\n                    .filter(edge => edge.from === node || edge.to === node)\n                    .forEach(edge => edge.selected = state);\n\n                return graph(oldGraph.element, oldGraph.edges, oldGraph.syntheticNodes, oldGraph.syntheticEdges)\n            });\n        }\n\n        setSelected(!node.selected);\n    }\n\n    return [graphState]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addSyntheticNodesAndEdgesG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addEdgeIndexG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(addCrossLayerPathSegmentOffsetXG)\n        .map(addCrossLayerPathSegmentOffsetMaxXG)\n        .map(graph => {\n            return (\n                <svg viewBox={\"0 0 \" + width(graph.element) + \" \" + height(graph.element)}>\n                    {allContainers(graph.element).filter(c => c.shape).map(ContainerComponent)}\n                    {allNodes(graph.element).map(node => (<NodeComponent key={node.elementKey+\"O\"} node={node} onNodeClick={onNodeClick}/>))}\n                    {graph.edges.map(EdgeComponent)}\n                </svg>\n            );\n        })[0];\n};","import React from \"react\";\nimport {edge, Element, gap, graph, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node(\"Some node\");\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node({name: \"Component node\", symbol: \"component\"});\n    let node_3_1 = node({name: \"Another component node\", symbol: \"component\"});\n    let node_3_2 = node();\n    let node_4_1 = node(\"Some node with long text\");\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let node_7_1 = node({visible: false});\n    let node_7_2 = node();\n    let node_8_1 = node();\n    let node_8_2 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", name: \"Top row\", shape: \"rectangle\", elements: [{\n                kind: \"column\", name: \"Left column\", shape: \"rectangle\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", name: \"Right column\", shape: \"rectangle\", elements: [{\n                    kind: \"row\", name: \"Nested row\", shape: \"rectangle\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }, node_7_1, {\n                kind: \"column\", elements: [node_8_1, gap(), node_8_2]\n            }, node_7_2]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", name: \"Bottom row\", shape: \"rectangle\", elements: [{\n                kind: \"row\", name: \"Left row in row\", shape: \"rectangle\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", name: \"Right row in row\", shape: \"rectangle\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_1_1, node_4_1),\n        edge(node_1_1, node_1_2),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_4),\n        edge(node_2_2, node_4_4),\n        edge(node_2_2, node_4_2),\n        edge(node_2_2, node_6_4),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_5_2, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_5_1, node_4_5),\n        edge(node_5_2, node_4_5),\n        edge(node_6_1, node_4_5),\n        edge(node_6_2, node_4_5),\n        edge(node_6_3, node_4_5),\n        edge(node_6_4, node_4_5),\n        edge(node_6_4, node_6_3),\n        edge(node_6_4, node_6_3),\n        edge(node_7_2, node_6_4),\n        edge(node_8_1, node_8_2)\n    ];\n    return (\n        <Diagram initialGraph={graph(element, edges)}/>\n    );\n};","import React from \"react\";\nimport {component, db, dbTable, edge, Element, gap, graph, node, queue, system} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nfunction createInitialGraph() {\n    let browserContentViewComponent = component(\"Content View HTML\");\n    let browserSearchViewComponent = component(\"Search View HTML\");\n    let browserPdpViewComponent = component(\"PDP View HTML\");\n\n    let customerBrowser: Element<unknown> = {\n        kind: \"row\", name: \"Customer Browser\", shape: \"deployment-box\",\n        elements: [\n            gap(),\n            browserContentViewComponent, gap(), gap(), gap(),\n            browserSearchViewComponent, gap(), gap(), gap(), gap(),\n            browserPdpViewComponent, gap(), gap(), gap()\n        ]\n    };\n\n    let contentSiteMap = component(\"Content Site Map\");\n    let contentViewComponent = component(\"Content View\");\n\n    let contentView: Element<unknown> = {\n        kind: \"row\", name: \"Content View\", shape: \"deployment-box\",\n        elements: [contentSiteMap, contentViewComponent]\n    };\n\n    let edutainment: Element<unknown> = {\n        kind: \"column\", elements: [contentView]\n    };\n\n    let searchViewComponent = component(\"Search View\");\n    let pdpViewComponent = component(\"PDP View\");\n\n    let pdpView: Element<unknown> = {\n        kind: \"row\",\n        elements: [gap(), gap(), {\n            kind: \"row\", name: \"PDP View\", shape: \"deployment-box\",\n            elements: [gap(), searchViewComponent, gap(), gap(), gap(), gap(), pdpViewComponent, gap(), gap(), gap()]\n        }]\n    };\n\n    let siteMapGenerator = component(\"Site Map Generator\");\n\n    let coreSiteMap: Element<unknown> = {\n        kind: \"column\", elements: [gap(), {\n            kind: \"row\", name: \"Site Map Generator\", shape: \"deployment-box\", elements: [siteMapGenerator]\n        }]\n    };\n\n    let factFinderDB = db(\"FACTFinder DB\");\n    let factFinderAPI = component(\"FACTFinder API\");\n\n    let factFinderFeedServiceDB = db(\"FACTFinder Feed\\nService DB\");\n    let factFinderUpdater = component(\"FACTFinder Updater\");\n    let ffProductImporter = component(\"Product Importer\");\n    let ffProductCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let ffCategoryImporter = component(\"Category Importer\");\n\n    let search: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\",\n            elements: [\n                factFinderDB,\n                {kind: \"row\", name: \"FACT Finder\", shape: \"deployment-box\", elements: [gap(), factFinderAPI, gap()]}\n            ]\n        }, {\n            kind: \"row\",\n            elements: [factFinderFeedServiceDB, {\n                kind: \"column\", name: \"FACT Finder Feed Service\", shape: \"deployment-box\",\n                elements: [\n                    {kind: \"row\", elements: [gap(), factFinderUpdater]},\n                    {kind: \"row\", elements: [ffProductImporter, ffProductCampaignsImporter, ffCategoryImporter]}\n                ]\n            }]\n        }]\n    };\n\n    let searchEdges = [\n        edge(factFinderAPI, factFinderDB),\n        edge(factFinderUpdater, factFinderAPI),\n        edge(factFinderUpdater, factFinderFeedServiceDB),\n        edge(ffProductImporter, factFinderFeedServiceDB),\n        edge(ffProductCampaignsImporter, factFinderFeedServiceDB),\n        edge(ffCategoryImporter, factFinderFeedServiceDB)\n    ];\n\n    let productServiceDB = db(\"Product Service DB\");\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productImporter = component(\"Product Importer\");\n    let productCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let nightlyStockImporter = component(\"Nightly Stock Importer\");\n    let nearTimeStockImporter = component(\"Near Time Stock\\nImporter\");\n    let deliveryTimeImporter = component(\"Delivery Time Importer\");\n    let categoryImporter = component(\"Category Importer\");\n\n    let productService: Element<unknown> = {\n        kind: \"row\", elements: [{\n            kind: \"column\", elements: [gap(), productServiceDB]\n        }, {\n            kind: \"column\", name: \"Product Service\", shape: \"deployment-box\", elements: [\n                {\n                    kind: \"row\", elements: [\n                        gap(), gap(), productAPI, stockAPI\n                    ]\n                },\n                gap(),\n                {\n                    kind: \"row\", elements: [\n                        productImporter, productCampaignsImporter, nightlyStockImporter,\n                        nearTimeStockImporter, deliveryTimeImporter, categoryImporter\n                    ]\n                }\n            ]\n        }]\n    };\n\n    let productServiceEdges = [\n        edge(productAPI, productServiceDB),\n        edge(stockAPI, productServiceDB),\n        edge(productImporter, productServiceDB),\n        edge(productCampaignsImporter, productServiceDB),\n        edge(nightlyStockImporter, productServiceDB),\n        edge(nearTimeStockImporter, productServiceDB),\n        edge(deliveryTimeImporter, productServiceDB),\n        edge(categoryImporter, productServiceDB),\n    ];\n\n    let productStream = queue(\"Product Stream\");\n    let productExporter = component(\"Product Exporter\");\n    let productCampaignsStream = queue(\"Product Campaigns\\nStream\");\n    let productCampaignsExporter = component(\"Product Campaigns\\nExporter\");\n    let nightlyStockStream = queue(\"Nightly Stock Stream\");\n    let nightlyStockExporter = component(\"Nightly Stock Exporter\");\n\n    let productExporterService: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", elements: [productStream, productCampaignsStream, nightlyStockStream]\n        }, {\n            kind: \"row\", name: \"Product Exporter Service\", shape: \"deployment-box\",\n            elements: [productExporter, productCampaignsExporter, nightlyStockExporter]\n        }]\n    };\n\n    let productExporterServiceEdges = [\n        edge(productExporter, productStream),\n        edge(productCampaignsExporter, productCampaignsStream),\n        edge(nightlyStockExporter, nightlyStockStream),\n    ];\n\n    let stockStream = queue(\"Stock Stream\");\n    let stockExporter = component(\"Stock Exporter\");\n\n    let stockExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            stockStream,\n            {kind: \"row\", name: \"Stock Exporter Service\", shape: \"deployment-box\", elements: [stockExporter]}\n        ]\n    };\n    let stockExporterServiceEdges = [\n        edge(stockExporter, stockStream)\n    ];\n\n    let deliveryTimeStream = queue(\"Delivery Time Stream\");\n    let deliveryTimeExporter = component(\"Delivery Time Exporter\");\n\n    let deliveryTimeExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            deliveryTimeStream,\n            {\n                kind: \"row\",\n                name: \"Delivery Time\\nExporter Service\",\n                shape: \"deployment-box\",\n                elements: [deliveryTimeExporter]\n            }\n        ]\n    };\n    let deliveryTimeExporterServiceEdges = [\n        edge(deliveryTimeExporter, deliveryTimeStream)\n    ];\n\n    let categoryStream = queue(\"Category Stream\");\n    let categoryExporter = component(\"Category Exporter\");\n    let articleS3Bucket = node(\"Article S3 Bucket\");\n\n    let categoryExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            categoryStream,\n            {kind: \"row\", name: \"Category Exporter Service\", shape: \"deployment-box\", elements: [categoryExporter]},\n            articleS3Bucket\n        ]\n    };\n    let categoryExporterServiceEdges = [\n        edge(categoryExporter, categoryStream),\n        edge(categoryExporter, articleS3Bucket)\n    ];\n\n    let coreServices: Element<unknown> = {\n        kind: \"row\", elements: [coreSiteMap, search, productService]\n    };\n    let coreServicesEdges = searchEdges.concat(productServiceEdges);\n\n    let coreExporter: Element<unknown> = {\n        kind: \"row\", elements: [\n            gap(), gap(), gap(), gap(), gap(), gap(),\n            productExporterService, stockExporterService, deliveryTimeExporterService, categoryExporterService\n        ]\n    };\n    let coreExporterEdges = productExporterServiceEdges\n        .concat(stockExporterServiceEdges)\n        .concat(deliveryTimeExporterServiceEdges)\n        .concat(categoryExporterServiceEdges);\n\n    let core: Element<unknown> = {\n        kind: \"column\", elements: [pdpView, coreServices, coreExporter]\n    };\n    let coreEdges = coreServicesEdges.concat(coreExporterEdges).concat([\n        edge(pdpViewComponent, productAPI),\n        edge(pdpViewComponent, stockAPI),\n        edge(searchViewComponent, factFinderAPI),\n        edge(siteMapGenerator, factFinderFeedServiceDB),\n        edge(ffProductImporter, productStream),\n        edge(ffProductCampaignsImporter, productCampaignsStream),\n        edge(ffCategoryImporter, categoryStream),\n        edge(productImporter, productStream),\n        edge(productCampaignsImporter, productCampaignsStream),\n        edge(nightlyStockImporter, nightlyStockStream),\n        edge(nearTimeStockImporter, stockStream),\n        edge(deliveryTimeImporter, deliveryTimeStream),\n        edge(categoryImporter, categoryStream)\n    ]);\n\n    let coreAccount: Element<unknown> = {\n        kind: \"row\", shape: \"rectangle\", name: \"Core VPC\", elements: [edutainment, core]\n    };\n    let coreAccountEdges = coreEdges.concat([\n        edge(contentViewComponent, factFinderAPI),\n        edge(contentViewComponent, productAPI)\n    ]);\n\n    let content = node(\"Site Content\");\n    let catalogContent = node(\"Catalog specific Content\");\n    let productContent = node(\"Product specific Content\");\n\n    let contentful: Element<unknown> = {\n        kind: \"row\", name: \"Contentful\", shape: \"deployment-box\",\n        elements: [content, catalogContent, productContent]\n    };\n\n    let mediaData = dbTable(\"Media Data\");\n\n    let shopNowDB: Element<unknown> = {\n        kind: \"row\", name: \"ShopNow DB\", shape: \"db-cylinder\",\n        elements: [mediaData]\n    };\n\n    let mediathek = system(\"Mediathek\");\n\n    let mediathekEdges = [\n        edge(mediathek, mediaData)\n    ];\n\n    let mercatorStagingDB = db(\"Mercator Staging DB\");\n    let mercatorDB = db(\"Mercator DB\");\n    let mercatorComponent = system(\"Mercator\");\n\n    let mercator: Element<unknown> = {\n        kind: \"column\",\n        elements: [{\n            kind: \"row\",\n            elements: [mercatorStagingDB, mercatorDB]\n        }, {\n            kind: \"row\",\n            elements: [gap(), mercatorComponent]\n        }]\n    };\n\n    let mercatorEdges = [\n        edge(mercatorComponent, mercatorDB),\n        edge(mercatorDB, mercatorStagingDB)\n    ];\n\n    let tds: Element<unknown> = {\n        kind: \"row\", shape: \"rectangle\", name: \"TDS\", elements: [\n            {kind: \"column\", elements: [shopNowDB, mediathek]},\n            mercator\n        ]\n    };\n\n    let tdsEdges = mediathekEdges.concat(mercatorEdges);\n\n    let backendSystems: Element<unknown> = {\n        kind: \"row\", elements: [contentful, gap(), gap(), gap(), gap(), gap(), tds]\n    };\n\n    let overall: Element<unknown> = {\n        kind: \"column\", elements: [customerBrowser, coreAccount, backendSystems]\n    };\n    let overallEdges = coreAccountEdges.concat(tdsEdges).concat([\n        edge(contentViewComponent, browserContentViewComponent),\n        edge(searchViewComponent, browserSearchViewComponent),\n        edge(pdpViewComponent, browserPdpViewComponent),\n        edge(contentViewComponent, content),\n        edge(searchViewComponent, catalogContent),\n        edge(pdpViewComponent, productContent),\n        edge(productExporter, mediaData),\n        edge(productExporter, mercatorStagingDB)\n    ]);\n\n    return graph(overall, overallEdges);\n}\n\nexport const NewArchitecture: React.FC = () => {\n    return (\n        <Diagram initialGraph={createInitialGraph()}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\nimport {NewArchitecture} from \"./v2/NewArchitecture\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-architecture\">New Sample Architecture</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                    <Route path=\"/new-architecture\">\n                        <NewArchitecture/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}