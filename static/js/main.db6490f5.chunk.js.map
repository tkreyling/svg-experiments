{"version":3,"sources":["v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/assertNever.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/shapes/getElementLeftX.tsx","v2/shapes/getElementTopY.tsx","v2/shapes/Symbols.tsx","v2/shapes/NodeShape.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/shapes/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sorting.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/shapes/EdgeShape.tsx","v2/edgesLayout/ConnectionIndexAndNumberOfEdges.tsx","v2/edgesLayout/SyntheticNodesAndEdges.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/edgesLayout/EdgeIndex.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetX.tsx","v2/edgesLayout/CrossLayerPathSegmentOffsetMaxX.tsx","v2/Diagram.tsx","v2/Sample.tsx","v2/NewArchitecture.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/sorting.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","result","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","assertNever","x","Error","element","syntheticNodes","syntheticEdges","transformElements","f","transformElementsUsingGraph","node","nameOrProperties","defaults","visible","shape","Object","assign","gap","db","queue","allNodes","flatMap","allContainers","concat","allElements","MARGIN_Y","MARGIN_X","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","DEPLOYMENT_BOX_INDENT","DEPLOYMENT_BOX_3D_OFFSET","DB_CYLINDER_ELLIPSE_Y","QUEUE_CYLINDER_ELLIPSE_X","getElementLeftX","offsetElementsX","borderIndexMaxX","borderIndexLeft","crossLayerPathSegmentOffsetMaxX","getElementTopY","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","ComponentSymbol","barWidthAbsolute","width","barHeightAbsolute","key","symbolKey","y","height","fill","strokeWidth","stroke","NodeShape","props","selected","elementKey","onClick","event","onNodeClick","d","transform","clipPath","fontSize","split","map","line","lineIndex","dy","SYMBOL_WIDTH","addOffsetElementsYG","addOffsetElementsY","accumulator","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","reduce","sum","add","ContainerShape","container","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","embeddedMidPathSegmentY","borderIndexBottom","border","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","length","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTopGraph","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","ascending","property","o1","o2","descending","and","sortFunctions","i","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","sums","addBorderIndexMaxBottom","addition","get","calculateEmbeddedBorders","current","embeddedBorders","borderIndexMaxBottom","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getLeftUpperNode","fromIsLeftUpper","edgeEndCoordinates","edgeIndex","otherNode","onLowerSide","nodeCenteringOffset","lowerSideEdges","upperSideEdges","EdgeShape","fromNode","fromIndex","upperNodeEdgesY","midPathSegmentOffsetY","toNode","toIndex","arrow","lowerLayerEdge","lowerNodeEdgesY","besideTopNodeX","crossLayerPathSegmentOffsetX","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","push","reverseNode","index","values","sameLayer","filter","edgeEnd","before","after","otherLayer","otherLayerBefore","otherLayerAfter","addConnectionIndexAndNumberOfEdges","edgesWithConnectionIndex","getLowerRightNodeIndex","getUpperLeftNodeIndex","isMultiLayerEdge","abs","addSyntheticNodesAndEdgesG","grid","lowerRightNode","upperLeftNode","min","has","lowerLayerEdgeProperty","isLowerLayerEdge","originalEdge","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","nodeKeys","keys","indexOffset","nodeKey","sameLayerBefore","sameLayerAfter","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","addMidPathSegmentOffsetYAggregates","maxOffsetY","maxs","determineMidPathSegmentMaxOffsetY","layer","sumOfPreviousRowsFillLayers","applyMidPathSegmentOffsetYAggregates","calculateEmbeddedPaths","embeddedPaths","midPathSegmentOffsetMaxY","addEdgeIndexG","addCrossLayerPathSegmentOffsetXG","groupedByOffsetElementsX","addCrossLayerPathSegmentOffsetXForSlice","addCrossLayerPathSegmentOffsetX","addOffset","addCrossLayerPathSegmentOffsetMaxXG","determineAndAddCrossLayerPathSegmentOffsetMaxX","addCrossLayerPathSegmentOffsetMaxX","Diagram","graphState","state","oldGraph","viewBox","c","Sample","node_1_1","node_1_2","node_2_1","node_2_2","node_3_1","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_5_2","node_6_1","node_6_2","node_6_3","node_6_4","node_7_1","node_7_2","node_8_1","node_8_2","createInitialGraph","contentSiteMap","contentViewComponent","edutainment","searchView","pdpViewComponent","pdpView","siteMapGenerator","coreSiteMap","factFinderDB","factFinderAPI","factFinderFeedServiceDB","factFinderUpdater","ffProductImporter","ffProductCampaignsImporter","ffCategoryImporter","search","searchEdges","productCampaignsImporter","nightlyStockImporter","nearTimeStockImporter","deliveryTimeImporter","productService","productServiceEdges","productStream","productExporter","productCampaignsStream","productCampaignsExporter","nightlyStockStream","nightlyStockExporter","productExporterService","productExporterServiceEdges","stockStream","stockExporter","stockExporterService","stockExporterServiceEdges","deliveryTimeStream","deliveryTimeExporter","deliveryTimeExporterService","deliveryTimeExporterServiceEdges","categoryStream","categoryExporter","categoryExporterService","categoryExporterServiceEdges","coreServices","coreServicesEdges","coreExporter","coreExporterEdges","NewArchitecture","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","allGroups","isComponent","data-testid","GroupShape","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.db6490f5.chunk.js","sourcesContent":["import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {assertNever} from \"./assertNever\";\n\ntype Symbols = \"component\"\n\ntype Shapes = \"rectangle\" | \"db-cylinder\" | \"queue-cylinder\"\n\nexport type Node = {\n    kind: \"node\",\n} & NodeProperties;\n\nexport type NodeProperties = {\n    name?: string,\n    visible?: boolean,\n    shape?: Shapes,\n    symbol?: Symbols,\n    selected?: boolean\n};\n\nexport type Row<N> = {\n    kind: \"row\"\n} & ContainerProperties<N>;\n\nexport type Column<N> = {\n    kind: \"column\"\n} & ContainerProperties<N>;\n\ntype Borders = \"solid\" | \"deployment-box\"\n\ntype ContainerProperties<N> = {\n    name?: string,\n    border?: Borders,\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N,\n    selected?: boolean\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n    syntheticNodes: (Node & N)[]\n    syntheticEdges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(\n    element: Element<N>,\n    edges: Edge<N, E>[] = [],\n    syntheticNodes: (Node & N)[] = [],\n    syntheticEdges: Edge<N, E>[] = []\n): Graph<N, E> {\n    return {element, edges, syntheticNodes, syntheticEdges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(nameOrProperties?: string | NodeProperties): Node {\n    let defaults: Node = {\n        kind: \"node\",\n        visible: true,\n        shape: \"rectangle\"\n    };\n    if (!nameOrProperties) {\n        return defaults;\n    } else if (typeof nameOrProperties === 'string') {\n        return Object.assign<Node, NodeProperties>(defaults, {name: nameOrProperties});\n    } else {\n        return Object.assign<Node, NodeProperties>(defaults, nameOrProperties);\n    }\n}\n\nexport function gap(): Node {\n    return node({visible: false});\n}\n\nexport function component(name: string): Node {\n    return node({name: name, symbol: \"component\"});\n}\n\nexport function db(name: string): Node {\n    return node({name: name, shape: \"db-cylinder\"});\n}\n\nexport function queue(name: string): Node {\n    return node({name: name, shape: \"queue-cylinder\"});\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}\n\nexport function allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function allElements<N>(element: Element<N>): Element<N>[] {\n    switch (element.kind) {\n        case \"node\":\n            return [element];\n        case \"row\":\n        case \"column\":\n            return element.elements.flatMap(allElements).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}","export const MARGIN_Y = 5;\nexport const MARGIN_X = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 60;\nexport const BORDER_SPACING_X = 15;\nexport const BORDER_SPACING_TOP = 40;\nexport const BORDER_SPACING_BOTTOM = 15;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;\nexport const STROKE_WIDTH_SELECTED = 1.5;\nexport const TEXT_PADDING = 5;\nexport const SYMBOL_WIDTH = 16;\nexport const SYMBOL_SPACING = 3;\nexport const ARROW_WIDTH = 3;\nexport const ARROW_HEIGHT = 5;\nexport const DEPLOYMENT_BOX_INDENT = BORDER_SPACING_X * 0.3;\nexport const DEPLOYMENT_BOX_3D_OFFSET = BORDER_SPACING_X * 0.4;\nexport const DB_CYLINDER_ELLIPSE_Y = BORDER_SPACING_X * 0.5;\nexport const QUEUE_CYLINDER_ELLIPSE_X = BORDER_SPACING_X * 0.4;","import {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"../elementsLayout/BorderIndexMaxX\";\nimport {CrossLayerPathSegmentOffsetMaxX} from \"../edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {BORDER_SPACING_X, EDGE_SPACING, ELEMENT_WIDTH, HORIZONTAL_SPACING, MARGIN_X} from \"../styling\";\nimport {BorderIndexLeft} from \"../elementsLayout/BorderIndexLeft\";\n\nexport type RequiredNodeDataGetElementLeftX =\n    OffsetElementsX &\n    BorderIndexLeft & BorderIndexMaxX &\n    CrossLayerPathSegmentOffsetMaxX\n\nexport function getElementLeftX(element: RequiredNodeDataGetElementLeftX) {\n    return MARGIN_X\n        + element.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n        + (element.borderIndexMaxX * (element.offsetElementsX * 2 + 1) - element.borderIndexLeft) * BORDER_SPACING_X\n        + element.crossLayerPathSegmentOffsetMaxX * element.offsetElementsX * EDGE_SPACING;\n}","import {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexTop} from \"../elementsLayout/BorderIndexTop\";\n\nexport type RequiredNodeDataGetElementTopY =\n    OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY\n\nexport function getElementTopY(element: RequiredNodeDataGetElementTopY) {\n    return MARGIN_Y\n        + element.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop - element.borderIndexTop) * BORDER_SPACING_TOP\n        + element.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + element.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"../styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\n\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {\n    DB_CYLINDER_ELLIPSE_Y,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    QUEUE_CYLINDER_ELLIPSE_X,\n    STROKE_WIDTH, STROKE_WIDTH_SELECTED,\n    SYMBOL_SPACING,\n    SYMBOL_WIDTH,\n    TEXT_PADDING\n} from \"../styling\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {Node} from \"../newGraphModel\"\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\nimport {ComponentSymbol} from \"./Symbols\";\n\ntype Props = {\n    node : Node & ElementKey & RequiredNodeDataGetElementLeftX & RequiredNodeDataGetElementTopY,\n    onNodeClick: (node: Node) => void\n};\n\nexport const NodeShape: React.FC<Props> = props => {\n    let node = props.node;\n    if (!node.visible) return null;\n\n    let x = getElementLeftX(node);\n    let y = getElementTopY(node);\n\n    let strokeWidth = node.selected ? STROKE_WIDTH_SELECTED: STROKE_WIDTH;\n\n    return (\n        <g key={node.elementKey}>\n            {node.shape === \"rectangle\" &&\n            <rect\n                x={x} y={y}\n                width={ELEMENT_WIDTH}\n                height={ELEMENT_HEIGHT}\n                onClick={event => props.onNodeClick(node)}\n                fill=\"white\"\n                strokeWidth={strokeWidth}\n                stroke=\"black\"\n            />\n            }\n            {node.shape === \"db-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"V \" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,1 \" + x + \",\" + (y + ELEMENT_HEIGHT - DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"Z\"\n                }\n                      onClick={event => props.onNodeClick(node)}\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"white\"\n                />\n                <path d={\n                    \"M \" + x + \" \" + (y + DB_CYLINDER_ELLIPSE_Y) + \" \" +\n                    \"A \" + (ELEMENT_WIDTH / 2) + \",\" + DB_CYLINDER_ELLIPSE_Y + \" 0 1,0 \" + (x + ELEMENT_WIDTH) + \",\" + (y + DB_CYLINDER_ELLIPSE_Y)\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.shape === \"queue-cylinder\" &&\n            <g>\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT) + \" \" +\n                    \"H \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,0 \" + (x + ELEMENT_WIDTH - QUEUE_CYLINDER_ELLIPSE_X) + \",\" + y + \" \" +\n                    \"Z\"\n                }\n                      onClick={event => props.onNodeClick(node)}\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"white\"\n                />\n                <path d={\n                    \"M \" + (x +  QUEUE_CYLINDER_ELLIPSE_X) + \" \" + y + \" \" +\n                    \"A \" + QUEUE_CYLINDER_ELLIPSE_X + \",\" + (ELEMENT_HEIGHT / 2) + \" 0 1,1 \" + (x + QUEUE_CYLINDER_ELLIPSE_X) + \",\" + (y + ELEMENT_HEIGHT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n            </g>\n            }\n            {node.name &&\n            <g transform={\"translate(\"\n            + (x + TEXT_PADDING + (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)) + \" \" + y + \")\"}>\n                <text\n                    x={0}\n                    y={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.3 : 0)}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + node.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {node.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={node.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n                <clipPath id={\"clip-element-text-\" + node.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={ELEMENT_WIDTH - 2 * TEXT_PADDING\n                        - (node.symbol ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)\n                        - (node.shape === \"queue-cylinder\" ? 2 * QUEUE_CYLINDER_ELLIPSE_X : 0)}\n                        height={ELEMENT_HEIGHT * (node.shape === \"db-cylinder\" ? 0.8 : 1)}/>\n                </clipPath>\n            </g>\n            }\n            {node.symbol &&\n            <ComponentSymbol\n                symbolKey={node.elementKey + \"CS\"}\n                x={x + ELEMENT_WIDTH - SYMBOL_WIDTH - SYMBOL_SPACING}\n                y={y + SYMBOL_SPACING}\n                width={SYMBOL_WIDTH}/>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    DEPLOYMENT_BOX_3D_OFFSET,\n    DEPLOYMENT_BOX_INDENT,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    TEXT_PADDING,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {Container} from \"../newGraphModel\";\nimport {EmbeddedElementsX} from \"../elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxBottom, EmbeddedBorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {EmbeddedBorderIndexMaxTop} from \"../elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"../elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"../elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"../elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {EmbeddedMidPathSegmentY} from \"../edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\ntype Props = Container<\n    ElementKey &\n    RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    EmbeddedElementsX & EmbeddedElementsY &\n    BorderIndexRight &\n    EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & EmbeddedBorderIndexMaxBottom &\n    EmbeddedMidPathSegmentY>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    let x = getElementLeftX(container);\n    let y = getElementTopY(container);\n    let width = container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n        + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n        + (container.embeddedElementsX - 1) * container.crossLayerPathSegmentOffsetMaxX * EDGE_SPACING;\n    let height = container.embeddedElementsY * ELEMENT_HEIGHT +\n        (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n        container.borderIndexTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n        container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n        container.embeddedMidPathSegmentY * EDGE_SPACING +\n        container.borderIndexBottom * BORDER_SPACING_BOTTOM;\n    return (\n        <g key={container.elementKey}>\n            {(container.border === \"solid\") &&\n            <rect\n                x={x}\n                y={y}\n                width={width}\n                height={height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n            }\n\n            {(container.border === \"deployment-box\") &&\n            <g>\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" +\n                    \"V \" + (y + height - 2 * DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + height - DEPLOYMENT_BOX_INDENT) +\n                    \"H \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"Z\"\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"H \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"V \" + (y + height - DEPLOYMENT_BOX_INDENT)\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n                <path d={\n                    \"M \" + (x + width - DEPLOYMENT_BOX_INDENT) + \" \" + (y + DEPLOYMENT_BOX_INDENT) + \" \" +\n                    \"L \" + (x + width - DEPLOYMENT_BOX_INDENT + DEPLOYMENT_BOX_3D_OFFSET) + \" \" + y\n                }\n                      stroke=\"black\"\n                      strokeWidth={STROKE_WIDTH}\n                      fill=\"none\"\n                />\n            </g>\n            }\n\n            {container.name &&\n            <g transform={\"translate(\"\n            + (x + BORDER_SPACING_X) + \" \" + (y + TEXT_PADDING) + \")\"}>\n                <text\n                    x={0}\n                    y={0}\n                    fill=\"black\"\n                    clipPath={\"url(#clip-element-text-\" + container.elementKey + \")\"}\n                    fontSize={12}\n                >\n                    {container.name.split(\"\\n\").map((line, lineIndex) => (\n                        <tspan key={container.elementKey + \"T\" + lineIndex} x=\"0\" dy=\"1.2em\">{line}</tspan>\n                    ))}\n                </text>\n\n                <clipPath id={\"clip-element-text-\" + container.elementKey}>\n                    <rect\n                        x={0}\n                        y={0}\n                        width={width - 2 * BORDER_SPACING_X}\n                        height={BORDER_SPACING_TOP}/>\n                </clipPath>\n            </g>\n            }\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexTop, E>(graph, addBorderIndexTopGraph);\n}\n\nfunction addBorderIndexTopGraph(graph: Graph<unknown, unknown>) {\n    addBorderIndexTop(graph.element);\n    graph.syntheticNodes.forEach(node => Object.assign<Node, BorderIndexTop>(node, {borderIndexTop: 0}));\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {ascending} from \"./sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {assertNever} from \"./assertNever\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(graph: Graph<OffsetElementsY & BorderIndexBottom, unknown>) {\n    let max = determineBorderIndexMaxBottom(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxBottom(node, max, sums));\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElementsUsingGraph<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(graph: Graph<OffsetElementsY & BorderIndexTop, unknown>) {\n    let max = determineBorderIndexMaxTop(graph.element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(graph.element, max, sums);\n    graph.syntheticNodes.forEach(node => addBorderIndexMaxTop(node, max, sums));\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nexport function fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}\n\nexport function fromIsLeftUpper<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsX === edge.to.offsetElementsX) {\n        return edge.from.offsetElementsY <= edge.to.offsetElementsY;\n    }\n    return edge.from.offsetElementsX < edge.to.offsetElementsX;\n}\n\nexport function getLeftUpperNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsLeftUpper(edge) ? edge.from : edge.to;\n}","import React from \"react\";\nimport {\n    ARROW_HEIGHT,\n    ARROW_WIDTH,\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    STROKE_WIDTH, STROKE_WIDTH_SELECTED,\n    VERTICAL_SPACING\n} from \"../styling\";\nimport {BorderIndexMaxBottom} from \"../elementsLayout/BorderIndexMaxBottom\";\nimport {Edge} from \"../newGraphModel\";\nimport {getLeftUpperNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {MidPathSegmentOffsetY} from \"../edgesLayout/MidPathSegmentOffsetY\";\nimport {ConnectionIndex, NumberOfEdges} from \"../edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"../edgesLayout/EdgeIndex\";\nimport {IsLowerLayerEdge, LowerLayerEdge, OriginalEdge} from \"../edgesLayout/SyntheticNodesAndEdges\";\nimport {CrossLayerPathSegmentOffsetX} from \"../edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {getElementLeftX, RequiredNodeDataGetElementLeftX} from \"./getElementLeftX\";\nimport {getElementTopY, RequiredNodeDataGetElementTopY} from \"./getElementTopY\";\n\nfunction edgeEndCoordinates<N extends RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    let nodeCenteringOffset = (ELEMENT_WIDTH - (((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) || 0) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: getElementLeftX(node) + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: getElementTopY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<RequiredNodeDataGetElementLeftX &\n    RequiredNodeDataGetElementTopY &\n    BorderIndexMaxBottom &\n    NumberOfEdges,\n    LowerLayerEdge<any, unknown> & EdgeIndex & MidPathSegmentOffsetY & ConnectionIndex & CrossLayerPathSegmentOffsetX>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getElementTopY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n\n    let strokeWidth = edge.selected ? STROKE_WIDTH_SELECTED: STROKE_WIDTH;\n\n    let onLowerSide = edge.to.offsetElementsY <= edge.from.offsetElementsY;\n    let arrow = (\n        <path d={\n            \"M \" + (toNode.x + ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1)) + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y + \" \" +\n            \"L \" + (toNode.x - ARROW_WIDTH) + \" \" + (toNode.y + ARROW_HEIGHT * (onLowerSide ? 1 : -1))\n        }\n              stroke=\"black\"\n              strokeWidth={strokeWidth}\n              fill=\"none\"\n        />\n    );\n\n    if (!edge.lowerLayerEdge) {\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    } else {\n        let lowerLayerEdge = edge.lowerLayerEdge as Edge<unknown, MidPathSegmentOffsetY> & IsLowerLayerEdge & OriginalEdge<unknown, unknown>;\n        let lowerNodeEdgesY = getElementTopY(getUpperLeftNode(edge.lowerLayerEdge))\n            + ELEMENT_HEIGHT\n            + getUpperLeftNode(edge.lowerLayerEdge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n            + VERTICAL_SPACING / 2\n            + lowerLayerEdge.midPathSegmentOffsetY * EDGE_SPACING;\n        let besideTopNodeX = getElementLeftX(getLeftUpperNode(edge))\n            + ELEMENT_WIDTH + getUpperLeftNode(edge).borderIndexMaxX * BORDER_SPACING_X\n            + (edge.crossLayerPathSegmentOffsetX! + 1) * EDGE_SPACING;\n        return (\n            <g key={edge.edgeIndex}>\n                <path d={\n                    \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n                    \"V \" + upperNodeEdgesY + \" \" +\n                    \"H \" + besideTopNodeX + \" \" +\n                    \"V \" + lowerNodeEdgesY + \" \" +\n                    \"H \" + toNode.x + \" \" +\n                    \"V \" + toNode.y\n                }\n                      stroke=\"black\"\n                      strokeWidth={strokeWidth}\n                      fill=\"none\"\n                />\n                {arrow}\n            </g>\n        );\n    }\n};","import {ElementKey} from \"../elementsLayout/ElementKey\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {and, ascending, descending} from \"../sorting\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {fromIsUpperLeft} from \"../EdgeHelper\";\n\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\nexport type NumberOfEdges = {\n    upperSideEdges?: number\n    lowerSideEdges?: number\n}\n\nexport function addConnectionIndexAndNumberOfEdgesG<\n    N extends OffsetElementsY & OffsetElementsX & ElementKey,\n    E extends EdgeIndex & LowerLayerEdge<unknown, unknown>, G>(\n        graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    let edgesWithConnectionIndex = graph.edges as unknown as Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[];\n    copyConnectionIndexToLowerLayerEdge(edgesWithConnectionIndex);\n    return graph as Graph<N & NumberOfEdges, E & ConnectionIndex>;\n}\n\ntype EdgeType = Edge<OffsetElementsY & OffsetElementsX & ElementKey, EdgeIndex>\n\nexport function addConnectionIndexAndNumberOfEdges(edges: EdgeType[]) {\n    type NodeSide = {\n        node: OffsetElementsY & OffsetElementsX\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        edge: EdgeType\n        reverseNode: OffsetElementsY & OffsetElementsX\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(edge: EdgeType, firstNode: OffsetElementsY & OffsetElementsX & ElementKey, secondNode: OffsetElementsY & OffsetElementsX, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.offsetElementsY <= secondNode.offsetElementsY ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.elementKey + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            edge: edge,\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge, edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge, edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY === node.offsetElementsY);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsY !== node.offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX <= node.offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edgeEnd => edgeEnd.reverseNode.offsetElementsX > node.offsetElementsX);\n\n        before.sort(and(descending(e => e.reverseNode.offsetElementsX), descending(e => e.edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(e => e.reverseNode.offsetElementsX), descending(e => e.reverseNode.offsetElementsY)));\n        otherLayerAfter.sort(and(ascending(e => e.reverseNode.offsetElementsX), ascending(e => e.reverseNode.offsetElementsY)));\n        after.sort(and(descending(e => e.reverseNode.offsetElementsX), ascending(e => e.edge.edgeIndex)));\n\n        let all = before.concat(otherLayerBefore).concat(otherLayerAfter).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nfunction copyConnectionIndexToLowerLayerEdge(edges: Edge<OffsetElementsX & OffsetElementsY, ConnectionIndex & LowerLayerEdge<unknown, unknown>>[]) {\n    edges.forEach(edge => {\n        if (edge.lowerLayerEdge) {\n            Object.assign<Edge<unknown, unknown>, ConnectionIndex>(edge.lowerLayerEdge, {\n                fromIndex: 0,\n                toIndex: getLowerRightNodeIndex(edge)\n            });\n        }\n    });\n}\n\nexport function getUpperLeftNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.fromIndex : edge.toIndex;\n}\n\nexport function getLowerRightNodeIndex<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, ConnectionIndex>): number {\n    return fromIsUpperLeft(edge) ? edge.toIndex : edge.fromIndex;\n}","import {allElements, allNodes, Edge, Graph, Node, node} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {ElementKey} from \"../elementsLayout/ElementKey\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY & ElementKey\n\nexport type IsLowerLayerEdge = {\n    isLowerLayerEdge: true\n};\n\nexport type OriginalEdge<N, E> = {\n    originalEdge: Edge<N, E>\n};\n\nexport type LowerLayerEdge<N, E> = {\n    lowerLayerEdge?: Edge<N, E> & IsLowerLayerEdge & OriginalEdge<N, E>\n}\n\nexport function isMultiLayerEdge(edge: Edge<OffsetElementsY, unknown>) {\n    return Math.abs(edge.from.offsetElementsY - edge.to.offsetElementsY) >= 2;\n}\n\nexport function addSyntheticNodesAndEdgesG(graph: Graph<NodeData, unknown>): Graph<NodeData, LowerLayerEdge<NodeData, unknown>> {\n    let elementKey = Math.max(...allElements(graph.element).map(element => element.elementKey));\n\n    let grid = new Map<string, boolean>();\n    allNodes(graph.element)\n        .filter(node => node.visible)\n        .forEach(node => grid.set(node.offsetElementsX + \"_\" + node.offsetElementsY, true));\n\n    function nodesOnPath(edge: Edge<OffsetElementsX & OffsetElementsY, unknown>): boolean {\n        let lowerRightNode = getLowerRightNode(edge);\n        let upperLeftNode = getUpperLeftNode(edge);\n        let offsetElementsX = Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX);\n\n        for (let i = upperLeftNode.offsetElementsY + 1; i <= lowerRightNode.offsetElementsY - 1; i++) {\n            if (grid.has(offsetElementsX + \"_\" + i)) return true;\n        }\n        return false;\n    }\n\n    let syntheticNodes: NodeData[] = [];\n    let syntheticEdges = graph.edges\n        .filter(isMultiLayerEdge)\n        .filter(nodesOnPath)\n        .map(edge => {\n            let lowerRightNode = getLowerRightNode(edge);\n            let upperLeftNode = getUpperLeftNode(edge);\n            elementKey++;\n            let from: NodeData = Object.assign<Node, NodeData>(node(), {\n                elementKey: elementKey,\n                offsetElementsY: lowerRightNode.offsetElementsY - 1,\n                offsetElementsX: Math.min(upperLeftNode.offsetElementsX, lowerRightNode.offsetElementsX)\n            });\n            syntheticNodes.push(from);\n            let lowerLayerEdgeProperty: LowerLayerEdge<NodeData, unknown> = {\n                lowerLayerEdge: {\n                    from: from,\n                    to: lowerRightNode,\n                    isLowerLayerEdge: true,\n                    originalEdge: edge\n                }};\n            Object.assign<Edge<NodeData, unknown>, LowerLayerEdge<NodeData, unknown>>(\n                edge, lowerLayerEdgeProperty);\n            return lowerLayerEdgeProperty.lowerLayerEdge;\n        });\n\n    return Object.assign(graph, {syntheticNodes, syntheticEdges});\n}","import {and, ascending, descending} from \"../sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\nimport {\n    ConnectionIndex,\n    getLowerRightNodeIndex,\n    getUpperLeftNodeIndex,\n    NumberOfEdges\n} from \"./ConnectionIndexAndNumberOfEdges\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {IsLowerLayerEdge, isMultiLayerEdge, OriginalEdge} from \"./SyntheticNodesAndEdges\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX & NumberOfEdges, E extends ConnectionIndex & EdgeIndex>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY> {\n    addMidPathSegmentOffsetY(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, ConnectionIndex & EdgeIndex>)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).offsetElementsY;\n        let edges = groupedByOffsetElementsY.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsY.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX & NumberOfEdges, EdgeIndex & ConnectionIndex>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return false;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return false;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 <\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX\n        });\n        let otherLayerAfter = otherLayer.filter(edge => {\n            if (getLowerRightNode(edge).offsetElementsX === getUpperLeftNode(edge).offsetElementsX) {\n                if (isMultiLayerEdge(edge)) return true;\n                if ((edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return true;\n\n                return getLowerRightNodeIndex(edge) - ((getLowerRightNode(edge).upperSideEdges || 1) - 1) / 2 >=\n                    getUpperLeftNodeIndex(edge) - ((getUpperLeftNode(edge).lowerSideEdges || 1) - 1) / 2;\n            }\n            return getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX\n        });\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(\n            descending(edge => getLowerRightNode(edge).offsetElementsX),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return getUpperLeftNode(edgeWithOriginalEdge.originalEdge).offsetElementsX;\n            }),\n            ascending(edge => {\n                if (!(edge as unknown as IsLowerLayerEdge).isLowerLayerEdge) return 0;\n                let edgeWithOriginalEdge = edge as unknown as OriginalEdge<OffsetElementsX & OffsetElementsY, EdgeIndex>;\n                return edgeWithOriginalEdge.originalEdge.edgeIndex;\n            }),\n            descending(edge => edge.edgeIndex)\n        ));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), descending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type MidPathSegmentOffsetMaxY = { midPathSegmentOffsetMaxY: number };\nexport type MidPathSegmentOffsetMaxPreviousY = { midPathSegmentOffsetMaxPreviousY: number }\nexport type EmbeddedMidPathSegmentY = { embeddedMidPathSegmentY: number };\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY & EmbeddedMidPathSegmentY\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = getMostBottomOffsetElementsY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges.concat(graph.syntheticEdges));\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, maxs, sums);\n    graph.syntheticNodes.forEach(node => applyMidPathSegmentOffsetYAggregates(node, maxs, sums));\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction calculateEmbeddedPaths(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedPaths = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedPaths += current.get(i) || 0;\n    }\n    return embeddedPaths;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxY: current.get(element.offsetElementsY) || 0,\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0,\n                embeddedMidPathSegmentY: calculateEmbeddedPaths(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Edge, Graph} from \"../newGraphModel\";\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addEdgeIndexG<N, E>(graph: Graph<N, E>):\n    Graph<N, E & EdgeIndex> {\n    addEdgeIndex(graph.edges.concat(graph.syntheticEdges));\n    return graph as unknown as Graph<N, E & EdgeIndex>;\n}\n\nexport function addEdgeIndex(edges: Edge<unknown, unknown>[]) {\n    edges.forEach((edge, index) => {\n        Object.assign<Edge<unknown, unknown>, EdgeIndex>(\n            edge, {edgeIndex: index});\n    });\n}","import {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {LowerLayerEdge} from \"./SyntheticNodesAndEdges\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {EdgeIndex} from \"./EdgeIndex\";\nimport {getLeftUpperNode, getLowerRightNode} from \"../EdgeHelper\";\nimport {and, ascending} from \"../sorting\";\n\nexport type CrossLayerPathSegmentOffsetX = {\n    crossLayerPathSegmentOffsetX?: number\n}\n\nexport type RequiredNodeDataTypes = OffsetElementsX & OffsetElementsY\nexport type RequiredEdgeDataTypes = EdgeIndex & LowerLayerEdge<unknown, unknown>\nexport type RequiredEdgeType = Edge<RequiredNodeDataTypes, RequiredEdgeDataTypes>\n\nexport function addCrossLayerPathSegmentOffsetXG<N extends RequiredNodeDataTypes, E extends RequiredEdgeDataTypes>(graph: Graph<N, E>):\n    Graph<N, E & CrossLayerPathSegmentOffsetX> {\n    addCrossLayerPathSegmentOffsetX(graph.edges);\n    return graph as unknown as Graph<N, E & CrossLayerPathSegmentOffsetX>;\n}\n\nexport function addCrossLayerPathSegmentOffsetX(edges: RequiredEdgeType[]) {\n    let groupedByOffsetElementsX = new Map<number, RequiredEdgeType[]>();\n\n    edges.filter(edge => edge.lowerLayerEdge).forEach(edge => {\n        let key = getLeftUpperNode(edge).offsetElementsX;\n        let edges = groupedByOffsetElementsX.get(key) || [];\n        edges.push(edge);\n        groupedByOffsetElementsX.set(key, edges);\n    });\n\n    Array.from(groupedByOffsetElementsX.values()).forEach(addCrossLayerPathSegmentOffsetXForSlice);\n}\n\nfunction addCrossLayerPathSegmentOffsetXForSlice(edges: RequiredEdgeType[]) {\n    let groupedByUpperNode = new Map<string, RequiredEdgeType[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getLeftUpperNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        edges.sort(and(ascending(edge => getLowerRightNode(edge).offsetElementsX), ascending(edge => edge.edgeIndex)));\n\n        function addOffset(edge: RequiredEdgeType, indexInArray: number) {\n            let index = indexOffset + indexInArray;\n            Object.assign<RequiredEdgeType, CrossLayerPathSegmentOffsetX>(edge, {\n                crossLayerPathSegmentOffsetX: index\n            });\n        }\n\n        edges.forEach((edge, index) => addOffset(edge, index));\n\n        indexOffset += edges.length;\n    });\n}","import {Column, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {CrossLayerPathSegmentOffsetX} from \"./CrossLayerPathSegmentOffsetX\";\n\nexport type CrossLayerPathSegmentOffsetMaxX = { crossLayerPathSegmentOffsetMaxX: number };\n\ntype RequiredEdgeDataTypes = CrossLayerPathSegmentOffsetX;\n\nexport function addCrossLayerPathSegmentOffsetMaxXG<N, E extends RequiredEdgeDataTypes>(\n    graph: Graph<N, E>\n): Graph<N & CrossLayerPathSegmentOffsetMaxX, E> {\n    return transformElementsUsingGraph<N, CrossLayerPathSegmentOffsetMaxX, E>(graph, determineAndAddCrossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineAndAddCrossLayerPathSegmentOffsetMaxX(graph: Graph<unknown, RequiredEdgeDataTypes>) {\n    let crossLayerPathSegmentOffsetMaxX = determineCrossLayerPathSegmentOffsetMaxX(graph.edges);\n    addCrossLayerPathSegmentOffsetMaxX(graph.element, crossLayerPathSegmentOffsetMaxX);\n}\n\nfunction determineCrossLayerPathSegmentOffsetMaxX(edges: RequiredEdgeDataTypes[]): number {\n    return Math.max(...edges.map(edge => (edge.crossLayerPathSegmentOffsetX || 0) + 1), 0);\n}\n\nexport function addCrossLayerPathSegmentOffsetMaxX(element: Element<unknown>, crossLayerPathSegmentOffsetMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, CrossLayerPathSegmentOffsetMaxX>(element, {\n                crossLayerPathSegmentOffsetMaxX: crossLayerPathSegmentOffsetMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addCrossLayerPathSegmentOffsetMaxX(nestedElement, crossLayerPathSegmentOffsetMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React, {useState} from \"react\";\nimport {allContainers, allNodes, Element, graph, Graph, Node} from \"./newGraphModel\";\nimport {NodeShape} from \"./shapes/NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG, OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG, OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./shapes/ContainerShape\";\nimport {addBorderIndexMaxXG, BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {\n    addBorderIndexMaxBottomG,\n    BorderIndexMaxBottom,\n    BorderIndexMaxPreviousBottom\n} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG, BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./shapes/EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {\n    addMidPathSegmentOffsetYAggregatesG,\n    MidPathSegmentOffsetMaxPreviousY,\n    MidPathSegmentOffsetMaxY\n} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./edgesLayout/ConnectionIndexAndNumberOfEdges\";\nimport {addEdgeIndexG} from \"./edgesLayout/EdgeIndex\";\nimport {addSyntheticNodesAndEdgesG} from \"./edgesLayout/SyntheticNodesAndEdges\";\nimport {addCrossLayerPathSegmentOffsetXG} from \"./edgesLayout/CrossLayerPathSegmentOffsetX\";\nimport {\n    addCrossLayerPathSegmentOffsetMaxXG,\n    CrossLayerPathSegmentOffsetMaxX\n} from \"./edgesLayout/CrossLayerPathSegmentOffsetMaxX\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    MARGIN_X,\n    MARGIN_Y,\n    VERTICAL_SPACING\n} from \"./styling\";\n\nfunction width(element: Element<OffsetElementsX & BorderIndexMaxX & CrossLayerPathSegmentOffsetMaxX>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_X * 2\n            + element.offsetElementsX * HORIZONTAL_SPACING\n            + (element.offsetElementsX + 1) * ELEMENT_WIDTH\n            + element.borderIndexMaxX * (element.offsetElementsX + 1) * 2 * BORDER_SPACING_X\n            + element.crossLayerPathSegmentOffsetMaxX * (element.offsetElementsX + 1) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(width), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction height(element: Element<OffsetElementsY &\n    BorderIndexMaxTop & BorderIndexMaxPreviousTop &\n    BorderIndexMaxBottom & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxY & MidPathSegmentOffsetMaxPreviousY>): number {\n    switch (element.kind) {\n        case \"node\": return MARGIN_Y * 2\n            + (element.offsetElementsY + 1) * VERTICAL_SPACING\n            + (element.offsetElementsY + 1) * ELEMENT_HEIGHT\n            + (element.borderIndexMaxPreviousTop + element.borderIndexMaxTop) * BORDER_SPACING_TOP\n            + (element.borderIndexMaxPreviousBottom + element.borderIndexMaxBottom) * BORDER_SPACING_BOTTOM\n            + (element.midPathSegmentOffsetMaxPreviousY + element.midPathSegmentOffsetMaxY) * EDGE_SPACING;\n        case \"row\":\n        case \"column\": return Math.max(...element.elements.map(height), 0);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\ntype DiagramProps = {\n    initialGraph: Graph<unknown, unknown>\n}\n\nexport const Diagram: React.FC<DiagramProps> = props => {\n\n    const [graphState, setGraph] = useState(props.initialGraph);\n\n    function onNodeClick(node: Node) {\n        function setSelected(state: boolean) {\n            node.selected = state;\n            setGraph(oldGraph => {\n                oldGraph.edges\n                    .filter(edge => edge.from === node || edge.to === node)\n                    .forEach(edge => edge.selected = state);\n\n                return graph(oldGraph.element, oldGraph.edges, oldGraph.syntheticNodes, oldGraph.syntheticEdges)\n            });\n        }\n\n        setSelected(!node.selected);\n    }\n\n    return [graphState]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addSyntheticNodesAndEdgesG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addEdgeIndexG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(addCrossLayerPathSegmentOffsetXG)\n        .map(addCrossLayerPathSegmentOffsetMaxXG)\n        .map(graph => {\n            return (\n                <svg viewBox={\"0 0 \" + width(graph.element) + \" \" + height(graph.element)}>\n                    {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                    {allNodes(graph.element).map(node => (<NodeShape key={node.elementKey+\"O\"} node={node} onNodeClick={onNodeClick}/>))}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};","import React from \"react\";\nimport {edge, Element, gap, graph, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node(\"Some node\");\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node({name: \"Component node\", symbol: \"component\"});\n    let node_3_1 = node({name: \"Another component node\", symbol: \"component\"});\n    let node_3_2 = node();\n    let node_4_1 = node(\"Some node with long text\");\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let node_7_1 = node({visible: false});\n    let node_7_2 = node();\n    let node_8_1 = node();\n    let node_8_2 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", name: \"Top row\", border: \"solid\", elements: [{\n                kind: \"column\", name: \"Left column\", border: \"solid\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", name: \"Right column\", border: \"solid\", elements: [{\n                    kind: \"row\", name: \"Nested row\", border: \"solid\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }, node_7_1, {\n                kind: \"column\", elements: [node_8_1, gap(), node_8_2]\n            }, node_7_2]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", name: \"Bottom row\", border: \"solid\", elements: [{\n                kind: \"row\", name: \"Left row in row\", border: \"solid\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", name: \"Right row in row\", border: \"solid\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_1_1, node_4_1),\n        edge(node_1_1, node_1_2),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_1_1),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_2_2),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_1),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_3),\n        edge(node_2_1, node_4_4),\n        edge(node_2_2, node_4_4),\n        edge(node_2_2, node_4_2),\n        edge(node_2_2, node_6_4),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_5_2, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_5_1, node_4_5),\n        edge(node_5_2, node_4_5),\n        edge(node_6_1, node_4_5),\n        edge(node_6_2, node_4_5),\n        edge(node_6_3, node_4_5),\n        edge(node_6_4, node_4_5),\n        edge(node_6_4, node_6_3),\n        edge(node_6_4, node_6_3),\n        edge(node_7_2, node_6_4),\n        edge(node_8_1, node_8_2)\n    ];\n    return (\n        <Diagram initialGraph={graph(element, edges)}/>\n    );\n};","import React from \"react\";\nimport {component, db, edge, Element, gap, graph, queue} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nfunction createInitialGraph() {\n    let contentSiteMap = component(\"Content Site Map\");\n    let contentViewComponent = component(\"Content View\");\n\n    let contentView: Element<unknown> = {\n        kind: \"row\", name: \"Content View\", border: \"deployment-box\",\n        elements: [contentSiteMap, contentViewComponent]\n    };\n\n    let edutainment: Element<unknown> = {\n        kind: \"column\", elements: [contentView]\n    };\n\n    let searchView = component(\"Search View\");\n    let pdpViewComponent = component(\"PDP View\");\n\n    let pdpView: Element<unknown> = {\n        kind: \"row\",\n        elements: [gap(), gap(), {\n            kind: \"row\", name: \"PDP View\", border: \"deployment-box\",\n            elements: [gap(), searchView, gap(), gap(), gap(), gap(), pdpViewComponent, gap(), gap(), gap()]\n        }]\n    };\n\n    let siteMapGenerator = component(\"Site Map Generator\");\n\n    let coreSiteMap: Element<unknown> = {\n        kind: \"column\", elements: [gap(), {\n            kind: \"row\", name: \"Site Map Generator\", border: \"deployment-box\", elements: [siteMapGenerator]\n        }]\n    };\n\n    let factFinderDB = db(\"FACTFinder DB\");\n    let factFinderAPI = component(\"FACTFinder API\");\n\n    let factFinderFeedServiceDB = db(\"FACTFinder Feed\\nService DB\");\n    let factFinderUpdater = component(\"FACTFinder Updater\");\n    let ffProductImporter = component(\"Product Importer\");\n    let ffProductCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let ffCategoryImporter = component(\"Category Importer\");\n\n    let search: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\",\n            elements: [\n                factFinderDB,\n                {kind: \"row\", name: \"FACT Finder\", border: \"deployment-box\", elements: [gap(), factFinderAPI, gap()]}\n            ]\n        }, {\n            kind: \"row\",\n            elements: [factFinderFeedServiceDB, {\n                kind: \"column\", name: \"FACT Finder Feed Service\", border: \"deployment-box\",\n                elements: [\n                    {kind: \"row\", elements: [gap(), factFinderUpdater]},\n                    {kind: \"row\", elements: [ffProductImporter, ffProductCampaignsImporter, ffCategoryImporter]}\n                ]\n            }]\n        }]\n    };\n\n    let searchEdges = [\n        edge(factFinderAPI, factFinderDB),\n        edge(factFinderUpdater, factFinderAPI),\n        edge(factFinderUpdater, factFinderFeedServiceDB),\n        edge(ffProductImporter, factFinderFeedServiceDB),\n        edge(ffProductCampaignsImporter, factFinderFeedServiceDB),\n        edge(ffCategoryImporter, factFinderFeedServiceDB)\n    ];\n\n    let productServiceDB = db(\"Product Service DB\");\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productImporter = component(\"Product Importer\");\n    let productCampaignsImporter = component(\"Product Campaigns\\nImporter\");\n    let nightlyStockImporter = component(\"Nightly Stock Importer\");\n    let nearTimeStockImporter = component(\"Near Time Stock\\nImporter\");\n    let deliveryTimeImporter = component(\"Delivery Time Importer\");\n    let categoryImporter = component(\"Category Importer\");\n\n    let productService: Element<unknown> = {\n        kind: \"row\", elements: [{\n            kind: \"column\", elements: [gap(), productServiceDB]\n        }, {\n            kind: \"column\", name: \"Product Service\", border: \"deployment-box\", elements: [\n                {\n                    kind: \"row\", elements: [\n                        gap(), gap(), productAPI, stockAPI\n                    ]\n                },\n                gap(),\n                {\n                    kind: \"row\", elements: [\n                        productImporter, productCampaignsImporter, nightlyStockImporter,\n                        nearTimeStockImporter, deliveryTimeImporter, categoryImporter\n                    ]\n                }\n            ]\n        }]\n    };\n\n    let productServiceEdges = [\n        edge(productAPI, productServiceDB),\n        edge(stockAPI, productServiceDB),\n        edge(productImporter, productServiceDB),\n        edge(productCampaignsImporter, productServiceDB),\n        edge(nightlyStockImporter, productServiceDB),\n        edge(nearTimeStockImporter, productServiceDB),\n        edge(deliveryTimeImporter, productServiceDB),\n        edge(categoryImporter, productServiceDB),\n    ];\n\n    let productStream = queue(\"Product Stream\");\n    let productExporter = component(\"Product Exporter\");\n    let productCampaignsStream = queue(\"Product Campaigns\\nStream\");\n    let productCampaignsExporter = component(\"Product Campaigns\\nExporter\");\n    let nightlyStockStream = queue(\"Nightly Stock Stream\");\n    let nightlyStockExporter = component(\"Nightly Stock Exporter\");\n\n    let productExporterService: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", elements: [productStream, productCampaignsStream, nightlyStockStream]\n        }, {\n            kind: \"row\", name: \"Product Exporter Service\", border: \"deployment-box\",\n            elements: [productExporter, productCampaignsExporter, nightlyStockExporter]\n        }]\n    };\n\n    let productExporterServiceEdges = [\n        edge(productExporter, productStream),\n        edge(productCampaignsExporter, productCampaignsStream),\n        edge(nightlyStockExporter, nightlyStockStream),\n    ];\n\n    let stockStream = queue(\"Stock Stream\");\n    let stockExporter = component(\"Stock Exporter\");\n\n    let stockExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            stockStream,\n            {kind: \"row\", name: \"Stock Exporter Service\", border: \"deployment-box\", elements: [stockExporter]}\n        ]\n    };\n    let stockExporterServiceEdges = [\n        edge(stockExporter, stockStream)\n    ];\n\n    let deliveryTimeStream = queue(\"Delivery Time Stream\");\n    let deliveryTimeExporter = component(\"Delivery Time Exporter\");\n\n    let deliveryTimeExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            deliveryTimeStream,\n            {\n                kind: \"row\",\n                name: \"Delivery Time\\nExporter Service\",\n                border: \"deployment-box\",\n                elements: [deliveryTimeExporter]\n            }\n        ]\n    };\n    let deliveryTimeExporterServiceEdges = [\n        edge(deliveryTimeExporter, deliveryTimeStream)\n    ];\n\n    let categoryStream = queue(\"Category Stream\");\n    let categoryExporter = component(\"Category Exporter\");\n\n    let categoryExporterService: Element<unknown> = {\n        kind: \"column\", elements: [\n            categoryStream,\n            {kind: \"row\", name: \"Category Exporter Service\", border: \"deployment-box\", elements: [categoryExporter]}\n        ]\n    };\n    let categoryExporterServiceEdges = [\n        edge(categoryExporter, categoryStream)\n    ];\n\n    let coreServices: Element<unknown> = {\n        kind: \"row\", elements: [coreSiteMap, search, productService]\n    };\n    let coreServicesEdges = searchEdges.concat(productServiceEdges);\n\n    let coreExporter: Element<unknown> = {\n        kind: \"row\", elements: [\n            gap(), gap(), gap(), gap(), gap(), gap(),\n            productExporterService, stockExporterService, deliveryTimeExporterService, categoryExporterService\n        ]\n    };\n    let coreExporterEdges = productExporterServiceEdges\n        .concat(stockExporterServiceEdges)\n        .concat(deliveryTimeExporterServiceEdges)\n        .concat(categoryExporterServiceEdges);\n\n    let core: Element<unknown> = {\n        kind: \"column\", elements: [pdpView, coreServices, coreExporter]\n    };\n    let coreEdges = coreServicesEdges.concat(coreExporterEdges).concat([\n        edge(pdpViewComponent, productAPI),\n        edge(pdpViewComponent, stockAPI),\n        edge(searchView, factFinderAPI),\n        edge(siteMapGenerator, factFinderFeedServiceDB),\n        edge(ffProductImporter, productStream),\n        edge(ffProductCampaignsImporter, productCampaignsStream),\n        edge(ffCategoryImporter, categoryStream),\n        edge(productImporter, productStream),\n        edge(productCampaignsImporter, productCampaignsStream),\n        edge(nightlyStockImporter, nightlyStockStream),\n        edge(nearTimeStockImporter, stockStream),\n        edge(deliveryTimeImporter, deliveryTimeStream),\n        edge(categoryImporter, categoryStream)\n    ]);\n\n    let coreAccount: Element<unknown> = {\n        kind: \"row\", elements: [edutainment, core]\n    };\n    let coreAccountEdges = coreEdges.concat([\n        edge(contentViewComponent, factFinderAPI),\n        edge(contentViewComponent, productAPI)\n    ]);\n\n    return graph(coreAccount, coreAccountEdges);\n}\n\nexport const NewArchitecture: React.FC = () => {\n    return (\n        <Diagram initialGraph={createInitialGraph()}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\nimport {NewArchitecture} from \"./v2/NewArchitecture\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-architecture\">New Sample Architecture</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                    <Route path=\"/new-architecture\">\n                        <NewArchitecture/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}