{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["MARGIN_TOP","MARGIN_SIDE","ELEMENT_WIDTH","ELEMENT_HEIGHT","HORIZONTAL_SPACING","VERTICAL_SPACING","TEXT_PADDING","EDGE_SPACING","widthOfLayers","layers","Math","max","map","widthOfElements","elements","n","length","heightOfNodes","fromIsUpper","edge","from","layerIndex","to","index","getUpperNode","getLowerNode","heightOfEdges","edges","numberOfLayers","groupedByLayerIndex","Map","forEach","grouped","get","push","set","Array","keys","edgeIndices","addLayerPositionToNodeG","graph","addLayerPositionToNode","fullWidth","nodes","width","layerOffset","element","Object","assign","key","relativePosition","addCoordinatesToNodeG","heightOfAllEdges","layout","additionalEdgeHeight","slice","reduce","sum","add","layoutHorizontally","offsetToCenter","x","y","addLayerPositionToEdgeG","addLayerPositionToEdge","values","addLayerPositionToEdgeForLayer","groupedByUpperNode","nodeKeys","sort","indexOffset","nodeKey","sameLayer","filter","sameLayerBefore","sameLayerAfter","otherLayer","otherLayerBefore","otherLayerAfter","edge1","edge2","before","concat","after","addLayerPosition","indexInArray","addConnectionIndexAndNumberOfEdgesG","addConnectionIndexAndNumberOfEdges","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","node","edgeEnds","reverseNode","fromIndex","toIndex","edgeEnd","edgeEnd1","edgeEnd2","upperSideEdges","lowerSideEdges","Rect","data-testid","height","fill","strokeWidth","stroke","clipPath","name","id","Path","fromNodeOnLowerSide","fromNodeCenteringOffset","fromNodeX","fromNodeY","upperNodeEdgesY","toNodeOnLowerSide","toNodeCenteringOffset","toNodeX","toNodeY","d","graphAsString","initialGraph","eval","Diagram","viewBox","flat","App","useState","setGraph","handleChange","changeEvent","target","value","className","cols","rows","onChange","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.24998e9c.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nexport type Coordinates = {\n    x: number\n    y: number\n}\n\nexport type LayerPosition = {\n    key: string\n    index: number\n    relativePosition: number\n    layerIndex: number\n}\n\nexport type Node = {\n    name: string\n}\n\nexport type Edge<T> = {\n    from: T\n    to: T\n}\n\ntype ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\ntype NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\n\ntype Graph<N, E> = {\n    layers: N[][]\n    edges: (Edge<N> & E)[]\n}\n\nexport const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\n\nexport function widthOfLayers(layers: any[][]) {\n    return Math.max(...layers.map(widthOfElements));\n}\n\nexport function widthOfElements(elements: any[]) {\n    const n = elements.length;\n    if (n === 0) return 0;\n    return n*ELEMENT_WIDTH + (n - 1)*HORIZONTAL_SPACING;\n}\n\nfunction heightOfNodes(layers: Node[][]) {\n    let n = layers.length;\n    return n*ELEMENT_HEIGHT + n*VERTICAL_SPACING;\n}\n\nfunction fromIsUpper<T extends LayerPosition>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.index <= edge.to.index;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nfunction getUpperNode<T extends LayerPosition>(edge: Edge<T>): T {\n    return fromIsUpper(edge) ? edge.from : edge.to;\n}\n\nfunction getLowerNode<T extends LayerPosition>(edge: Edge<T>): T {\n    return fromIsUpper(edge) ? edge.to : edge.from;\n}\n\nexport function heightOfEdges(edges: (Edge<LayerPosition> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerPosition> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}\n\nfunction addLayerPositionToNodeG<N, E>(graph: Graph<N, E>): Graph<N & LayerPosition, E> {\n    return {\n        layers: addLayerPositionToNode(graph.layers),\n        edges: graph.edges as unknown as (Edge<N & LayerPosition> & E)[]\n    }\n}\n\nexport function addLayerPositionToNode<N>(layers: N[][]): (N & LayerPosition)[][] {\n    let fullWidth = Math.max(...layers.map(nodes => nodes.length));\n    return layers.map((elements, layerIndex) => {\n        let width = elements.length;\n        let layerOffset = (fullWidth - width) / 2;\n        return elements.map((element, index) => {\n            return Object.assign(element, {\n                key: layerIndex + \"_\" + index,\n                index: index,\n                relativePosition : layerOffset + index,\n                layerIndex: layerIndex\n            });\n        });\n    });\n}\n\nfunction addCoordinatesToNodeG<N extends LayerPosition, E extends LayerPosition>(graph: Graph<N, E>):\n    Graph<N & Coordinates, E> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.layers.length);\n    return {\n        layers: layout(graph.layers, heightOfAllEdges),\n        edges: graph.edges as unknown as (Edge<N & Coordinates> & E)[]\n    }\n}\n\nexport function layout<N>(layers: (N & LayerPosition)[][], heightOfEdges: number[]): (N & LayerPosition & Coordinates)[][] {\n    let fullWidth = widthOfLayers(layers);\n    return layers.map((elements, layerIndex) => {\n        let additionalEdgeHeight = heightOfEdges.slice(0, layerIndex).reduce((sum, add) => sum + add, 0);\n        return layoutHorizontally(elements, fullWidth, additionalEdgeHeight)\n    });\n}\n\nexport function layoutHorizontally<N>(elements: (N & LayerPosition)[], fullWidth: number, additionalEdgeHeight: number): (N & LayerPosition & Coordinates)[] {\n    let offsetToCenter = (fullWidth - widthOfElements(elements)) / 2;\n    return elements.map(element =>\n        Object.assign(element, {\n            x: element.index * (ELEMENT_WIDTH + HORIZONTAL_SPACING) + MARGIN_SIDE + offsetToCenter,\n            y: element.layerIndex * (ELEMENT_HEIGHT + VERTICAL_SPACING) + MARGIN_TOP + additionalEdgeHeight\n        }));\n}\n\nfunction addLayerPositionToEdgeG<N extends LayerPosition, E>(graph: Graph<N, E>): Graph<N, E & LayerPosition> {\n    addLayerPositionToEdge(graph.edges);\n    return {\n        layers: graph.layers,\n        edges: graph.edges as unknown as (Edge<N> & E & LayerPosition)[]\n    }\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerPosition>[]) {\n    let groupedByLayerIndex = new Map<number, Edge<LayerPosition>[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperNode(edge).layerIndex;\n        let edges = groupedByLayerIndex.get(key) || [];\n        edges.push(edge);\n        groupedByLayerIndex.set(key, edges);\n    });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: Edge<LayerPosition>[]) {\n    let groupedByUpperNode = new Map<string, Edge<LayerPosition>[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerNode(edge).layerIndex === getUpperNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerNode(edge).index <= getUpperNode(edge).index);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerNode(edge).index > getUpperNode(edge).index);\n        let otherLayer = edges.filter(edge => getLowerNode(edge).layerIndex !== getUpperNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerNode(edge).relativePosition <= getUpperNode(edge).relativePosition);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerNode(edge).relativePosition > getUpperNode(edge).relativePosition);\n\n        sameLayerBefore.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n        otherLayerBefore.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n        otherLayerAfter.sort((edge1, edge2) =>  getLowerNode(edge2).index - getLowerNode(edge1).index);\n        sameLayerAfter.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerPosition>, indexInArray: number) {\n            let layerIndex = getUpperNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: layerIndex + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index));\n        after.forEach((edge, index) => addLayerPosition(edge, index));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}\n\nfunction addConnectionIndexAndNumberOfEdgesG<N extends LayerPosition, E>(graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return {\n        layers: graph.layers as unknown as (N & NumberOfEdges)[][],\n        edges: graph.edges as unknown as (Edge<N & NumberOfEdges> & E & ConnectionIndex)[]\n    }\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerPosition>[]) {\n    type NodeSide = {\n        node: LayerPosition\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerPosition\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerPosition, secondNode: LayerPosition, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index=> Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.index <= node.index);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.index >= node.index);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort((edgeEnd1, edgeEnd2) => edgeEnd2.reverseNode.index - edgeEnd1.reverseNode.index);\n        otherLayer.sort((edgeEnd1, edgeEnd2) => edgeEnd1.reverseNode.index - edgeEnd2.reverseNode.index);\n        after.sort((edgeEnd1, edgeEnd2) => edgeEnd2.reverseNode.index - edgeEnd1.reverseNode.index);\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nexport const Rect: React.FC<Node & LayerPosition & Coordinates> = node => {\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={ELEMENT_WIDTH} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={1} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING } y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect x={node.x + TEXT_PADDING} y={node.y} width={ELEMENT_WIDTH - 2 * TEXT_PADDING} height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};\n\nexport const Path: React.FC<Edge<LayerPosition & Coordinates & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNodeOnLowerSide = edge.from.layerIndex <= edge.to.layerIndex;\n    let fromNodeCenteringOffset = (ELEMENT_WIDTH - ((fromNodeOnLowerSide ? edge.from.lowerSideEdges : edge.from.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    let fromNodeX = edge.from.x + fromNodeCenteringOffset + edge.fromIndex * EDGE_SPACING;\n    let fromNodeY = edge.from.y + (fromNodeOnLowerSide ? ELEMENT_HEIGHT : 0);\n    let upperNodeEdgesY = getUpperNode(edge).y + ELEMENT_HEIGHT + VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNodeOnLowerSide = edge.from.layerIndex >= edge.to.layerIndex;\n    let toNodeCenteringOffset = (ELEMENT_WIDTH - ((toNodeOnLowerSide ? edge.to.lowerSideEdges : edge.to.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    let toNodeX = edge.to.x + toNodeCenteringOffset + edge.toIndex * EDGE_SPACING;\n    let toNodeY = edge.to.y + (toNodeOnLowerSide ? ELEMENT_HEIGHT : 0);\n    return (\n        <path d={\n            \"M \" + fromNodeX + \" \" + fromNodeY + \" \" +\n            \"L \" + fromNodeX + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNodeX + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNodeX + \" \" + toNodeY\n        }\n              stroke=\"black\"\n              strokeWidth={1}\n              fill=\"none\"\n        />\n    );\n};\n\nlet graphAsString = `\nvar layers = [\n    [\"element 11\", \"element 2\", \"an element with long text\", \"element 4\"],\n    [\"element 1\", \"element 2\", \"element 3\"],\n    [\"element 1\", \"element 2\", \"element 3\", \"element with changed name\", \"element 5\"]\n]\n.map(layer => {\n    return layer.map(name => {\n        return {name: name}\n    })\n});\n\nvar edges = [\n    {from: layers[0][1], to: layers[1][0]},\n    {from: layers[0][2], to: layers[1][2]},\n    {from: layers[0][3], to: layers[1][1]},\n    {from: layers[1][2], to: layers[2][2]},\n    {from: layers[1][1], to: layers[2][4]},\n    {from: layers[1][1], to: layers[2][3]},\n    {from: layers[1][1], to: layers[2][2]},\n    {from: layers[1][1], to: layers[2][1]},\n    {from: layers[1][1], to: layers[2][0]},\n    {from: layers[2][0], to: layers[1][0]},\n    {from: layers[2][1], to: layers[1][0]},\n    {from: layers[2][0], to: layers[2][3]},\n    {from: layers[2][1], to: layers[2][3]},\n    {from: layers[2][4], to: layers[2][3]},\n    {from: layers[0][0], to: layers[0][2]},\n    {from: layers[0][0], to: layers[0][1]},\n    {from: layers[0][0], to: layers[1][0]},\n    {from: layers[0][0], to: layers[1][0]},\n    {from: layers[1][1], to: layers[1][0]},\n    {from: layers[1][1], to: layers[1][2]}\n];\n\nvar graph = {\n    layers: layers,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line\nconst initialGraph: Graph<Node, unknown> = eval(graphAsString);\n\nexport const Diagram: React.FC<Graph<Node, unknown>> = graph => {\n    return [graph]\n        .map(addLayerPositionToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addCoordinatesToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.layers.length);\n            let width = widthOfLayers(graph.layers) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.layers) + heightOfAllEdges.reduce((sum, add) => sum + add) + 2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + width + \" \" + height}>\n                    {graph.layers.flat().map(Rect)}\n                    {graph.edges.map(Path)}\n                </svg>\n            );\n        })[0];\n};\n\nconst App: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n// eslint-disable-next-line\n        setGraph(eval(changeEvent.target.value))\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram layers={graph.layers} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange}>{graphAsString}</textarea>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}