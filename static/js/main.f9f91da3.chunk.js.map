{"version":3,"sources":["v1/sorting.tsx","v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/NodeShape.tsx","v2/assertNever.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/EdgeShape.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/edgesLayout/MidPathSegmentOffsetYAggregates.tsx","v2/Diagram.tsx","v2/Sample.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["ascending","property","o1","o2","descending","and","sortFunctions","i","length","result","graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","transformElements","f","element","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","EDGE_SPACING","NodeShape","node","key","elementKey","x","offsetElementsX","borderIndexMaxX","y","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","midPathSegmentOffsetMaxPreviousY","width","height","fill","strokeWidth","stroke","assertNever","Error","addOffsetElementsYG","addOffsetElementsY","accumulator","Object","assign","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","map","reduce","sum","add","ContainerShape","container","borderIndexLeft","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","borderIndexBottom","borderIndexMaxBottom","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","border","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","addBorderIndexMaxBottom","current","sums","get","calculateEmbeddedBorders","addition","embeddedBorders","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getY","edgeEndCoordinates","otherNode","onLowerSide","EdgeShape","fromNode","upperNodeEdgesY","midPathSegmentOffsetY","toNode","edgeIndex","d","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","index","push","values","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","upperLeftNode","nodeKeys","keys","indexOffset","nodeKey","sameLayer","filter","sameLayerBefore","sameLayerAfter","otherLayer","otherLayerBefore","otherLayerAfter","before","concat","after","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","addMidPathSegmentOffsetYAggregatesG","transformElementsUsingGraph","addMidPathSegmentOffsetYAggregates","maxOffsetY","determineMaxOffsetY","layer","sumOfPreviousRowsFillLayers","determineMidPathSegmentMaxOffsetY","applyMidPathSegmentOffsetYAggregates","allNodes","flatMap","allContainers","Diagram","viewBox","c","Sample","node_3_2","node_4_1","node_4_2","node_4_3","node_4_4","node_4_5","node_5_1","node_6_1","node_6_2","node_6_3","node_6_4","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","reverseNode","fromIndex","toIndex","edgeEnd","upperSideEdges","lowerSideEdges","addConnectionIndexAndNumberOfEdges","allGroups","ComponentSymbol","barWidthAbsolute","barHeightAbsolute","symbolKey","isComponent","data-testid","clipPath","SYMBOL_WIDTH","GroupShape","nodeCenteringOffset","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","abs","min","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.f9f91da3.chunk.js","sourcesContent":["export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export type Node = {\n    kind: \"node\"\n};\n\nexport type Row<N> = {\n    kind: \"row\",\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Column<N> = {\n    kind: \"column\",\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(element: Element<N>, edges: Edge<N, E>[] = []): Graph<N, E> {\n    return {element: element, edges: edges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function transformElementsUsingGraph<N, A, E>(graph: Graph<N, E>, f: (graph: Graph<N, E>) => void): Graph<N & A, E> {\n    f(graph);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(): Node {\n    return {\n        kind: \"node\"\n    };\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}","export const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const BORDER_SPACING_X = 10;\nexport const BORDER_SPACING_TOP = 30;\nexport const BORDER_SPACING_BOTTOM = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import React from \"react\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    BORDER_SPACING_X,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING, BORDER_SPACING_TOP, BORDER_SPACING_BOTTOM, EDGE_SPACING\n} from \"./styling\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {BorderIndexMaxPreviousBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {ElementKey} from \"./elementsLayout/ElementKey\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\n\ntype Props = ElementKey &\n    OffsetElementsX & BorderIndexMaxX &\n    OffsetElementsY &\n    BorderIndexMaxPreviousTop & BorderIndexMaxTop & BorderIndexTop &\n    BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY;\n\nexport const NodeShape: React.FC<Props> = node => {\n    return (\n        <g key={node.elementKey}>\n            <rect\n                x={node.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n                + node.borderIndexMaxX * (node.offsetElementsX * 2 + 1) * BORDER_SPACING_X\n                }\n                y={node.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (node.borderIndexMaxPreviousTop + node.borderIndexMaxTop - node.borderIndexTop) * BORDER_SPACING_TOP\n                + node.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n                + node.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING\n                }\n                width={ELEMENT_WIDTH}\n                height={ELEMENT_HEIGHT}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text\n                x={node.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n                node.borderIndexMaxX * (node.offsetElementsX * 2 + 1) * BORDER_SPACING_X}\n                y={node.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (node.borderIndexMaxPreviousTop + node.borderIndexMaxTop - node.borderIndexTop) * BORDER_SPACING_TOP\n                + node.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n                + node.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING\n                + 15\n                }\n                fill=\"black\">{\n                node.midPathSegmentOffsetMaxPreviousY\n            }\n            </text>\n        </g>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X, EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Container} from \"./newGraphModel\";\nimport {EmbeddedElementsX} from \"./elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexLeft} from \"./elementsLayout/BorderIndexLeft\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {BorderIndexMaxBottom, BorderIndexMaxPreviousBottom, EmbeddedBorderIndexMaxBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop, EmbeddedBorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"./elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"./elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"./elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"./elementsLayout/ElementKey\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\n\ntype Props = Container<\n    ElementKey &\n    OffsetElementsX & EmbeddedElementsX &\n    OffsetElementsY & EmbeddedElementsY &\n    BorderIndexLeft & BorderIndexRight & BorderIndexMaxX &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom &\n    MidPathSegmentOffsetMaxPreviousY>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    return (\n        <g key={container.elementKey}>\n            <rect\n                x={container.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n                + (container.borderIndexMaxX * (container.offsetElementsX * 2 + 1)  - container.borderIndexLeft) * BORDER_SPACING_X\n                }\n                y={container.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (container.borderIndexMaxPreviousTop + container.borderIndexMaxTop - container.borderIndexTop) * BORDER_SPACING_TOP\n                + container.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n                + container.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING\n                }\n                width={container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING\n                + ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X\n                }\n                height={container.embeddedElementsY * ELEMENT_HEIGHT +\n                (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n                container.borderIndexTop * BORDER_SPACING_TOP +\n                container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n                container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n                container.borderIndexBottom * BORDER_SPACING_BOTTOM\n                }\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text\n                x={container.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING)\n                + (container.borderIndexMaxX * (container.offsetElementsX * 2 + 1) - container.borderIndexLeft) * BORDER_SPACING_X\n                }\n                y={container.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (container.borderIndexMaxPreviousTop + container.borderIndexMaxTop - container.borderIndexTop) * BORDER_SPACING_TOP\n                + container.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n                + container.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING\n                + 15\n                }\n                fill=\"black\">{\n                container.embeddedElementsY + \"__\" +\n                container.borderIndexMaxPreviousTop + \"/\" + container.borderIndexTop + \"/\" + container.borderIndexMaxTop + \"__\" +\n                container.borderIndexMaxPreviousBottom + \"/\" + container.borderIndexBottom + \"/\" + container.borderIndexMaxBottom}\n            </text>\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElements<N, BorderIndexTop, E>(graph, addBorderIndexTop);\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {ascending} from \"../v1/sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}\n\nexport function sumOfPreviousRowsFillLayers(max: Map<number, number>, maxOffsetY: number): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(Array(maxOffsetY + 1).keys()).forEach(layer => {\n        result.set(layer, sumOfPrevious);\n        sumOfPrevious += max.get(layer) || 0;\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElements<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(element: Element<OffsetElementsY & BorderIndexBottom>) {\n    let max = determineBorderIndexMaxBottom(element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(element, max, sums);\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElements<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(element: Element<OffsetElementsY & BorderIndexTop>) {\n    let max = determineBorderIndexMaxTop(element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(element, max, sums);\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach(([offsetElementsY, borderIndexTop]) => {\n                    let max = Math.max(accumulator.get(offsetElementsY) || 0, borderIndexTop);\n                    accumulator.set(offsetElementsY, max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nfunction fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxBottom, BorderIndexMaxPreviousBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {Edge} from \"./newGraphModel\";\nimport {getUpperLeftNode} from \"./EdgeHelper\";\nimport {EdgeIndex, MidPathSegmentOffsetY} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {MidPathSegmentOffsetMaxPreviousY} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\n\nfunction getY<N extends OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY>(node: N) {\n    return node.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (node.borderIndexMaxPreviousTop + node.borderIndexMaxTop - node.borderIndexTop) * BORDER_SPACING_TOP\n        + node.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n        + node.midPathSegmentOffsetMaxPreviousY * EDGE_SPACING;\n}\n\nfunction edgeEndCoordinates<N extends OffsetElementsX & OffsetElementsY &\n    BorderIndexMaxX & BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom &\n    MidPathSegmentOffsetMaxPreviousY>(\n    node: N, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    return {\n        x: node.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n            node.borderIndexMaxX * (node.offsetElementsX * 2 + 1) * BORDER_SPACING_X +\n        ELEMENT_WIDTH / 2,\n        y: getY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<OffsetElementsX & OffsetElementsY &\n    BorderIndexMaxX & BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom & BorderIndexMaxBottom &\n    MidPathSegmentOffsetMaxPreviousY,\n    EdgeIndex & MidPathSegmentOffsetY>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.to);\n    let upperNodeEdgesY = getY(getUpperLeftNode(edge))\n        + ELEMENT_HEIGHT\n        + getUpperLeftNode(edge).borderIndexMaxBottom * BORDER_SPACING_BOTTOM\n        + VERTICAL_SPACING / 2\n        + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.from);\n    return (\n        <path key={edge.edgeIndex} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {ascending, descending} from \"../../v1/sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX, E>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY & EdgeIndex> {\n    addMidPathSegmentOffsetY(graph.edges);\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY & EdgeIndex>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX, unknown>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX, unknown>)[]>();\n\n    edges\n        .map((edge, index) => {\n            return Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, EdgeIndex>(\n                edge, {edgeIndex: index});\n        })\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).offsetElementsY;\n            let edges = groupedByOffsetElementsY.get(key) || [];\n            edges.push(edge);\n            groupedByOffsetElementsY.set(key, edges);\n        });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX, unknown>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX, unknown>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n\n        sameLayerBefore.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n        otherLayerBefore.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n        otherLayerAfter.sort(descending(edge => getLowerRightNode(edge).offsetElementsX));\n        sameLayerAfter.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Edge, Element, Graph, Node, Row, transformElementsUsingGraph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {getUpperLeftNode} from \"../EdgeHelper\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {MidPathSegmentOffsetY} from \"./MidPathSegmentOffsetY\";\nimport {sumOfPreviousRowsFillLayers} from \"../sumOfPreviousRows\";\nimport {assertNever} from \"../assertNever\";\n\nexport type NodeData = OffsetElementsX & OffsetElementsY\nexport type EdgeData = MidPathSegmentOffsetY\ntype EdgeType = Edge<NodeData, EdgeData>\nexport type AddedNodeData = MidPathSegmentOffsetMaxPreviousY\n\nexport type MidPathSegmentOffsetMaxPreviousY = {\n    midPathSegmentOffsetMaxPreviousY: number\n}\n\nexport function addMidPathSegmentOffsetYAggregatesG<N extends NodeData, E extends EdgeData>(\n    graph: Graph<N, E>\n): Graph<N & AddedNodeData, E> {\n    return transformElementsUsingGraph<N, AddedNodeData, E>(graph, addMidPathSegmentOffsetYAggregates);\n}\n\nexport function addMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(graph: Graph<N, E>) {\n    let maxOffsetY = determineMaxOffsetY(graph.element);\n    let maxs = determineMidPathSegmentMaxOffsetY(graph.edges);\n    let sums = sumOfPreviousRowsFillLayers(maxs, maxOffsetY);\n    applyMidPathSegmentOffsetYAggregates(graph.element, sums);\n}\n\nfunction determineMaxOffsetY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\": return element.offsetElementsY;\n        case \"column\":\n        case \"row\":\n            return Math.max(...element.elements.map(determineMaxOffsetY));\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction determineMidPathSegmentMaxOffsetY(edges: EdgeType[]): Map<number, number> {\n    let result = new Map<number, number>();\n    edges.forEach(edge => {\n        let offsetElementsY = getUpperLeftNode(edge).offsetElementsY;\n        let midPathSegmentOffsetY = result.get(offsetElementsY) || 0;\n        result.set(offsetElementsY, Math.max(midPathSegmentOffsetY, edge.midPathSegmentOffsetY));\n    });\n    return result;\n}\n\nfunction applyMidPathSegmentOffsetYAggregates<N extends NodeData, E extends EdgeData>(\n    element: Element<N>, sums: Map<number, number>) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, AddedNodeData>(element, {\n                midPathSegmentOffsetMaxPreviousY: sums.get(element.offsetElementsY) || 0\n            });\n            element.elements.forEach(nestedElement =>\n                applyMidPathSegmentOffsetYAggregates(nestedElement, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {Container, Element, Graph, Node} from \"./newGraphModel\";\nimport {NodeShape} from \"./NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./ContainerShape\";\nimport {addBorderIndexMaxXG} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {addBorderIndexMaxBottomG} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\nimport {addMidPathSegmentOffsetYAggregatesG} from \"./edgesLayout/MidPathSegmentOffsetYAggregates\";\n\nfunction allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\": return [element];\n        case \"row\": return element.elements.flatMap(allNodes);\n        case \"column\": return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\": return [];\n        case \"row\": return element.elements.flatMap(allContainers).concat(element);\n        case \"column\": return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport const Diagram: React.FC<Graph<unknown, unknown>> = graph => {\n    return [graph]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(addMidPathSegmentOffsetYAggregatesG)\n        .map(graph => (\n            <svg viewBox={\"0 0 1400 600\"}>\n                {allNodes(graph.element).map(NodeShape)}\n                {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                {graph.edges.map(EdgeShape)}\n            </svg>\n        ))[0];\n};","import React from \"react\";\nimport {edge, Element, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node_1_1 = node();\n    let node_1_2 = node();\n    let node_2_1 = node();\n    let node_2_2 = node();\n    let node_3_1 = node();\n    let node_3_2 = node();\n    let node_4_1 = node();\n    let node_4_2 = node();\n    let node_4_3 = node();\n    let node_4_4 = node();\n    let node_4_5 = node();\n    let node_5_1 = node();\n    let node_5_2 = node();\n    let node_6_1 = node();\n    let node_6_2 = node();\n    let node_6_3 = node();\n    let node_6_4 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", border: \"solid\", elements: [{\n                kind: \"column\", border: \"solid\", elements: [node_1_1, node_1_2]\n            }, {\n                kind: \"column\", border: \"solid\", elements: [{\n                    kind: \"row\", border: \"solid\", elements: [node_2_1, node_2_2]\n                }, node_3_1, node_3_2]\n            }]\n        }, {\n            kind: \"row\", elements: [node_4_1, node_4_2, node_4_3, node_4_4, node_4_5]\n        }, {\n            kind: \"row\", border: \"solid\", elements: [{\n                kind: \"row\", border: \"solid\", elements: [node_5_1, node_5_2]\n            }, {\n                kind: \"row\", border: \"solid\", elements: [node_6_1, node_6_2, node_6_3, node_6_4]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node_3_2, node_4_1),\n        edge(node_3_2, node_4_3),\n        edge(node_3_2, node_4_4),\n        edge(node_3_2, node_4_5),\n        edge(node_4_1, node_4_2),\n        edge(node_5_1, node_4_2),\n        edge(node_6_1, node_4_2),\n        edge(node_6_2, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_3, node_4_2),\n        edge(node_6_4, node_4_2),\n        edge(node_6_4, node_6_3)\n    ];\n    return (\n        <Diagram element={element} edges={edges}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}