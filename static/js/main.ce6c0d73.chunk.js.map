{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["MARGIN_TOP","MARGIN_SIDE","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_MARGIN_TOP","BORDER_MARGIN_SIDE","HORIZONTAL_SPACING","VERTICAL_SPACING","TEXT_PADDING","EDGE_SPACING","widthOfLayers","layers","Math","max","map","widthOfElements","groups","n","elements","length","reduce","sum","add","heightOfNodes","fromIsUpper","edge","from","layerIndex","to","index","getUpperNode","getLowerNode","heightOfEdges","edges","numberOfLayers","groupedByLayerIndex","Map","forEach","grouped","get","push","set","Array","keys","edgeIndices","addLayerPositionToNodeG","graph","addLayerPositionToNode","fullWidth","addLayerPositionToNodeForLayer","layerOffset","resultGroups","resultElements","element","resultElement","Object","assign","key","relativePosition","addCoordinatesToNodeG","heightOfAllEdges","layout","additionalEdgeHeight","slice","layoutHorizontally","offsetToCenter","groupIndex","x","y","addLayerPositionToEdgeG","addLayerPositionToEdge","values","addLayerPositionToEdgeForLayer","groupedByUpperNode","nodeKeys","sort","indexOffset","nodeKey","sameLayer","filter","sameLayerBefore","sameLayerAfter","otherLayer","otherLayerBefore","otherLayerAfter","edge1","edge2","before","concat","after","addLayerPosition","indexInArray","beforeOrAfter","addConnectionIndexAndNumberOfEdgesG","addConnectionIndexAndNumberOfEdges","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","node","edgeEnds","reverseNode","fromIndex","toIndex","edgeEnd","edgeEnd1","edgeEnd2","upperSideEdges","lowerSideEdges","Rect","data-testid","width","height","fill","strokeWidth","stroke","clipPath","name","id","Group","group","Path","fromNodeOnLowerSide","fromNodeCenteringOffset","fromNodeX","fromNodeY","upperNodeEdgesY","toNodeOnLowerSide","toNodeCenteringOffset","toNodeX","toNodeY","d","stringsToNodes","strings","layer","graphAsString","initialGraph","eval","Diagram","viewBox","flat","parseGraph","text","undefined","aNodeIsUndefined","elementIndex","every","e","message","App","useState","setGraph","errorMessage","setErrorMessage","className","cols","rows","onChange","changeEvent","result","target","value","defaultValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce6c0d73.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.css';\n\nexport type Coordinates = {\n    x: number\n    y: number\n}\n\nexport type LayerPosition = {\n    key: string\n    index: number\n    relativePosition: number\n    layerIndex: number\n}\n\nexport type Node = {\n    name: string\n}\n\nexport type Edge<T> = {\n    from: T\n    to: T\n}\n\ntype ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\n\ntype NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\n\ntype Group<N> = N[]\n\nexport type Layer<N> = Group<N>[]\n\ntype Graph<N, E> = {\n    layers: Layer<N>[]\n    edges: (Edge<N> & E)[]\n}\n\nexport const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const BORDER_MARGIN_TOP = 10;\nexport const BORDER_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\n\nexport function widthOfLayers(layers: Layer<any>[]) {\n    return Math.max(...layers.map(widthOfElements));\n}\n\nexport function widthOfElements(groups: Layer<any>) {\n    const n = groups\n        .map(elements => elements.length)\n        .reduce((sum, add) => sum + add, 0);\n    if (n === 0) return 0;\n    return groups.length * BORDER_MARGIN_SIDE * 2 + n * ELEMENT_WIDTH + (n - 1) * HORIZONTAL_SPACING;\n}\n\nfunction heightOfNodes(layers: Layer<any>[]) {\n    let n = layers.length;\n    return n * ELEMENT_HEIGHT + n * VERTICAL_SPACING + 2 * n * BORDER_MARGIN_TOP;\n}\n\nfunction fromIsUpper<T extends LayerPosition>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.index <= edge.to.index;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nfunction getUpperNode<T extends LayerPosition>(edge: Edge<T>): T {\n    return fromIsUpper(edge) ? edge.from : edge.to;\n}\n\nfunction getLowerNode<T extends LayerPosition>(edge: Edge<T>): T {\n    return fromIsUpper(edge) ? edge.to : edge.from;\n}\n\nexport function heightOfEdges(edges: (Edge<LayerPosition> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerPosition> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}\n\nfunction addLayerPositionToNodeG<N, E>(graph: Graph<N, E>): Graph<N & LayerPosition, E> {\n    return {\n        layers: addLayerPositionToNode(graph.layers),\n        edges: graph.edges as unknown as (Edge<N & LayerPosition> & E)[]\n    }\n}\n\nexport function addLayerPositionToNode<N>(layers: Layer<N>[]): Layer<N & LayerPosition>[] {\n    let fullWidth = Math.max(...layers.map(groups => {\n        return groups\n            .map(elements => elements.length)\n            .reduce((sum, add) => sum + add, 0);\n    }));\n\n    return layers.map((groups, layerIndex) =>\n        addLayerPositionToNodeForLayer(groups, fullWidth, layerIndex)\n    );\n}\n\nfunction addLayerPositionToNodeForLayer<N>(groups: Layer<N>, fullWidth: number, layerIndex: number):\n    Layer<N & LayerPosition> {\n    let layerWidth = groups\n        .map(elements => elements.length)\n        .reduce((sum, add) => sum + add, 0);\n    let layerOffset = (fullWidth - layerWidth) / 2;\n\n    let resultGroups: Layer<N & LayerPosition> = [];\n    let index = 0;\n    groups.forEach(elements => {\n        let resultElements = elements.map(element => {\n            let resultElement = Object.assign(element, {\n                key: layerIndex + \"_\" + index,\n                index: index,\n                relativePosition: layerOffset + index,\n                layerIndex: layerIndex\n            });\n            index++;\n            return resultElement;\n        });\n        resultGroups.push(resultElements);\n    });\n    return resultGroups;\n}\n\nfunction addCoordinatesToNodeG<N extends LayerPosition, E extends LayerPosition>(graph: Graph<N, E>):\n    Graph<N & Coordinates, E> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.layers.length);\n    return {\n        layers: layout(graph.layers, heightOfAllEdges),\n        edges: graph.edges as unknown as (Edge<N & Coordinates> & E)[]\n    }\n}\n\nexport function layout<N>(layers: Layer<N & LayerPosition>[], heightOfEdges: number[]): Layer<N & LayerPosition & Coordinates>[] {\n    let fullWidth = widthOfLayers(layers);\n    return layers.map((elements, layerIndex) => {\n        let additionalEdgeHeight = heightOfEdges.slice(0, layerIndex).reduce((sum, add) => sum + add, 0);\n        return layoutHorizontally(elements, fullWidth, additionalEdgeHeight)\n    });\n}\n\nexport function layoutHorizontally<N>(groups: Layer<N & LayerPosition>, fullWidth: number, additionalEdgeHeight: number): Layer<N & LayerPosition & Coordinates> {\n    let offsetToCenter = (fullWidth - widthOfElements(groups)) / 2;\n    return groups.map((elements, groupIndex) => {\n        return elements.map(element =>\n            Object.assign(element, {\n                x: MARGIN_SIDE + BORDER_MARGIN_SIDE + groupIndex * 2 * BORDER_MARGIN_SIDE + element.index * (ELEMENT_WIDTH + HORIZONTAL_SPACING) + offsetToCenter,\n                y: MARGIN_TOP + BORDER_MARGIN_TOP + element.layerIndex * (ELEMENT_HEIGHT + VERTICAL_SPACING + 2 * BORDER_MARGIN_TOP) + additionalEdgeHeight\n            }));\n    });\n}\n\nfunction addLayerPositionToEdgeG<N extends LayerPosition, E>(graph: Graph<N, E>): Graph<N, E & LayerPosition> {\n    addLayerPositionToEdge(graph.edges);\n    return {\n        layers: graph.layers,\n        edges: graph.edges as unknown as (Edge<N> & E & LayerPosition)[]\n    }\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerPosition>[]) {\n    let groupedByLayerIndex = new Map<number, Edge<LayerPosition>[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperNode(edge).layerIndex;\n        let edges = groupedByLayerIndex.get(key) || [];\n        edges.push(edge);\n        groupedByLayerIndex.set(key, edges);\n    });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: Edge<LayerPosition>[]) {\n    let groupedByUpperNode = new Map<string, Edge<LayerPosition>[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerNode(edge).layerIndex === getUpperNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerNode(edge).index <= getUpperNode(edge).index);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerNode(edge).index > getUpperNode(edge).index);\n        let otherLayer = edges.filter(edge => getLowerNode(edge).layerIndex !== getUpperNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerNode(edge).relativePosition <= getUpperNode(edge).relativePosition);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerNode(edge).relativePosition > getUpperNode(edge).relativePosition);\n\n        sameLayerBefore.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n        otherLayerBefore.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n        otherLayerAfter.sort((edge1, edge2) =>  getLowerNode(edge2).index - getLowerNode(edge1).index);\n        sameLayerAfter.sort((edge1, edge2) =>  getLowerNode(edge1).index - getLowerNode(edge2).index);\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerPosition>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}\n\nfunction addConnectionIndexAndNumberOfEdgesG<N extends LayerPosition, E>(graph: Graph<N, E>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return {\n        layers: graph.layers as unknown as Layer<N & NumberOfEdges>[],\n        edges: graph.edges as unknown as (Edge<N & NumberOfEdges> & E & ConnectionIndex)[]\n    }\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerPosition>[]) {\n    type NodeSide = {\n        node: LayerPosition\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerPosition\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerPosition, secondNode: LayerPosition, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index=> Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.index <= node.index);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.index >= node.index);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort((edgeEnd1, edgeEnd2) => edgeEnd2.reverseNode.index - edgeEnd1.reverseNode.index);\n        otherLayer.sort((edgeEnd1, edgeEnd2) => edgeEnd1.reverseNode.index - edgeEnd2.reverseNode.index);\n        after.sort((edgeEnd1, edgeEnd2) => edgeEnd2.reverseNode.index - edgeEnd1.reverseNode.index);\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}\n\nexport const Rect: React.FC<Node & LayerPosition & Coordinates> = node => {\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={ELEMENT_WIDTH} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={1} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING } y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect x={node.x + TEXT_PADDING} y={node.y} width={ELEMENT_WIDTH - 2 * TEXT_PADDING} height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};\n\nconst Group: React.FC<Group<Coordinates>> = group => {\n    let firstNode = group[0];\n    let n = group.length;\n    return (\n        <rect\n              x={firstNode.x - BORDER_MARGIN_SIDE} y={firstNode.y - BORDER_MARGIN_TOP}\n              width={n * ELEMENT_WIDTH + (n - 1) * HORIZONTAL_SPACING + 2 * BORDER_MARGIN_SIDE}\n              height={ELEMENT_HEIGHT + 2 * BORDER_MARGIN_TOP}\n              fill=\"none\" strokeWidth={1} stroke=\"grey\"/>\n    );\n};\n\nexport const Path: React.FC<Edge<LayerPosition & Coordinates & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNodeOnLowerSide = edge.from.layerIndex <= edge.to.layerIndex;\n    let fromNodeCenteringOffset = (ELEMENT_WIDTH - ((fromNodeOnLowerSide ? edge.from.lowerSideEdges : edge.from.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    let fromNodeX = edge.from.x + fromNodeCenteringOffset + edge.fromIndex * EDGE_SPACING;\n    let fromNodeY = edge.from.y + (fromNodeOnLowerSide ? ELEMENT_HEIGHT : 0);\n    let upperNodeEdgesY = getUpperNode(edge).y + ELEMENT_HEIGHT + VERTICAL_SPACING / 2 + BORDER_MARGIN_TOP + edge.index * EDGE_SPACING;\n    let toNodeOnLowerSide = edge.from.layerIndex >= edge.to.layerIndex;\n    let toNodeCenteringOffset = (ELEMENT_WIDTH - ((toNodeOnLowerSide ? edge.to.lowerSideEdges : edge.to.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    let toNodeX = edge.to.x + toNodeCenteringOffset + edge.toIndex * EDGE_SPACING;\n    let toNodeY = edge.to.y + (toNodeOnLowerSide ? ELEMENT_HEIGHT : 0);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNodeX + \" \" + fromNodeY + \" \" +\n            \"L \" + fromNodeX + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNodeX + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNodeX + \" \" + toNodeY\n        }\n              stroke=\"black\"\n              strokeWidth={1}\n              fill=\"none\"\n        />\n    );\n};\n\nexport function stringsToNodes(strings: string[][][]): Layer<Node>[] {\n    return strings.map(layer => {\n        return layer.map(group => {\n            return group.map(name => {\n                return {name: name}\n            });\n        });\n    });\n}\n\nlet graphAsString =\n`var layers = stringsToNodes([\n    [[\"element 11\", \"element 2\", \"an element with long text\"], [\"element 4\"]],\n    [[\"element 1\", \"element 2\"], [\"element 3\"]],\n    [[\"element 1\", \"element 2\", \"element 3\", \"element with changed name\", \"element 5\"]]\n]);\n\nvar edges = [\n    {from: layers[0][0][1], to: layers[1][0][0]},\n    {from: layers[0][0][2], to: layers[1][1][0]},\n    {from: layers[0][1][0], to: layers[1][0][1]},\n    {from: layers[1][1][0], to: layers[2][0][2]},\n    {from: layers[1][0][1], to: layers[2][0][4]},\n    {from: layers[1][0][1], to: layers[2][0][3]},\n    {from: layers[1][0][1], to: layers[2][0][2]},\n    {from: layers[1][0][1], to: layers[2][0][1]},\n    {from: layers[1][0][1], to: layers[2][0][0]},\n    {from: layers[2][0][0], to: layers[1][0][0]},\n    {from: layers[2][0][1], to: layers[1][0][0]},\n    {from: layers[2][0][0], to: layers[2][0][3]},\n    {from: layers[2][0][1], to: layers[2][0][3]},\n    {from: layers[2][0][4], to: layers[2][0][3]},\n    {from: layers[0][0][0], to: layers[0][0][2]},\n    {from: layers[0][0][0], to: layers[0][0][1]},\n    {from: layers[0][0][0], to: layers[1][0][0]},\n    {from: layers[0][0][0], to: layers[1][0][0]},\n    {from: layers[1][0][1], to: layers[1][0][0]},\n    {from: layers[1][0][1], to: layers[1][1][0]}\n];\n\nvar graph = {\n    layers: layers,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line\nconst initialGraph: Graph<Node, unknown> = eval(graphAsString);\n\nexport const Diagram: React.FC<Graph<Node, unknown>> = graph => {\n    return [graph]\n        .map(addLayerPositionToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addCoordinatesToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.layers.length);\n            let width = widthOfLayers(graph.layers) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.layers) + heightOfAllEdges.reduce((sum, add) => sum + add) + 2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + width + \" \" + height}>\n                    {graph.layers.flat().flat().map(Rect)}\n                    {graph.layers.flat().map(Group)}\n                    {graph.edges.map(Path)}\n                </svg>\n            );\n        })[0];\n};\n\nexport function parseGraph(text: string): Graph<Node, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.layers === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        let layers: Node[][][] = graph.layers;\n        let aNodeIsUndefined = false;\n        // It is necessary to go through the nested arrays by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let layerIndex = 0; layerIndex < layers.length; layerIndex++) {\n            let groups = layers[layerIndex];\n            for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\n                let elements = groups[groupIndex];\n                for (let elementIndex = 0; elementIndex < elements.length; elementIndex++) {\n                    if (elements[elementIndex] === undefined) aNodeIsUndefined = true;\n                }\n            }\n        }\n        if (aNodeIsUndefined) return \"Every node must be defined!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}\n\nconst App: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram layers={graph.layers} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}