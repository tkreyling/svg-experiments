{"version":3,"sources":["v1/sorting.tsx","v1/Editor.tsx","v1/parseGraph.tsx","v1/Architecture.tsx","v2/newGraphModel.tsx","v2/styling.tsx","v2/NodeShape.tsx","v2/assertNever.tsx","v2/elementsLayout/OffsetElementsY.tsx","v2/elementsLayout/OffsetElementsX.tsx","v2/elementsLayout/EmbeddedElementsX.tsx","v2/ContainerShape.tsx","v2/elementsLayout/BorderIndexMaxX.tsx","v2/elementsLayout/BorderIndexLeft.tsx","v2/elementsLayout/BorderIndexRight.tsx","v2/elementsLayout/BorderIndexTop.tsx","v2/elementsLayout/BorderIndexBottom.tsx","v2/sumOfPreviousRows.tsx","v2/getMostBottomOffsetElementsY.tsx","v2/elementsLayout/BorderIndexMaxBottom.tsx","v2/elementsLayout/BorderIndexMaxTop.tsx","v2/elementsLayout/EmbeddedElementsY.tsx","v2/EdgeHelper.tsx","v2/EdgeShape.tsx","v2/edgesLayout/MidPathSegmentOffsetY.tsx","v2/elementsLayout/ElementKey.tsx","v2/Diagram.tsx","v2/Sample.tsx","App.tsx","serviceWorker.ts","index.tsx","v1/indicesToReferences.tsx","v1/stringsToNodes.tsx","v1/styling.tsx","v1/width.tsx","v1/addXToNode.tsx","v1/graphModel.tsx","v1/addLayerPositionToEdge.tsx","v1/heightOfEdges.tsx","v1/addYToNode.tsx","v1/addConnectionIndexAndNumberOfEdges.tsx","v1/allNodes.tsx","v1/allGroups.tsx","v1/Symbols.tsx","v1/NodeShape.tsx","v1/GroupShape.tsx","v1/EdgeShape.tsx","v1/addLayerIndexToNode.tsx","v1/insertPlaceholdersInMultilayerEdges.tsx","v1/addKeyToNode.tsx","v1/Diagram.tsx"],"names":["ascending","property","o1","o2","descending","and","sortFunctions","i","length","result","graphAsString","indicesToReferences","indicesToReferencesImport","stringsToNodes","stringsToNodesImport","initialGraph","eval","Editor","useState","graph","setGraph","errorMessage","setErrorMessage","id","className","stack","edges","cols","rows","onChange","changeEvent","parseGraph","target","value","defaultValue","text","undefined","every","edge","from","to","e","message","component","name","kind","symbol","size","Architecture","productAPI","stockAPI","productServiceDB","productImporter","stockImporter","categoryImporter","campaignImporter","elements","transformElements","f","element","ELEMENT_WIDTH","ELEMENT_HEIGHT","BORDER_SPACING_X","BORDER_SPACING_TOP","BORDER_SPACING_BOTTOM","HORIZONTAL_SPACING","VERTICAL_SPACING","NodeShape","node","key","elementKey","x","offsetElementsX","borderIndexMaxX","y","offsetElementsY","borderIndexMaxPreviousTop","borderIndexMaxTop","borderIndexTop","borderIndexMaxPreviousBottom","width","height","fill","strokeWidth","stroke","assertNever","Error","addOffsetElementsYG","addOffsetElementsY","accumulator","Object","assign","maxOffsetYElements","oldOffsetYElements","forEach","nestedElement","Math","max","addOffsetElementsXG","addOffsetElementsX","maxOffsetXElements","oldOffsetXElements","addEmbeddedElementsXG","addEmbeddedElementsX","embeddedElementsX","embeddedXElements","map","reduce","sum","add","ContainerShape","container","borderIndexLeft","borderIndexRight","embeddedElementsY","embeddedBorderIndexMaxTop","embeddedBorderIndexMaxBottom","borderIndexBottom","borderIndexMaxBottom","addBorderIndexMaxXG","determineAndAddBorderIndexMaxX","addBorderIndexMaxX","determineBorderIndexMaxX","addBorderIndexLeftG","addBorderIndexLeft","leftBorderIndex","border","addBorderIndexRightG","addBorderIndexRight","borderIndices","borderIndex","addBorderIndexTopG","addBorderIndexTop","addBorderIndexBottomG","addBorderIndexBottom","sumOfPreviousRows","Map","sumOfPrevious","Array","entries","sort","entry","set","getMostBottomOffsetElementsY","addBorderIndexMaxBottomG","determineAndAddBorderIndexBottomAggregates","determineBorderIndexMaxBottom","addBorderIndexMaxBottom","current","sums","get","calculateEmbeddedBorders","addition","embeddedBorders","addBorderIndexMaxTopG","determineAndAddBorderIndexTopAggregates","determineBorderIndexMaxTop","addBorderIndexMaxTop","addEmbeddedElementsYG","addEmbeddedElementsY","fromIsUpperLeft","getUpperLeftNode","getLowerRightNode","getY","edgeEndCoordinates","otherNode","onLowerSide","EdgeShape","fromNode","upperNodeEdgesY","midPathSegmentOffsetY","toNode","edgeIndex","d","addMidPathSegmentOffsetYG","groupedByOffsetElementsY","index","push","values","addMidPathSegmentOffsetYForLayer","addMidPathSegmentOffsetY","groupedByUpperNode","upperLeftNode","nodeKeys","keys","indexOffset","nodeKey","sameLayer","filter","sameLayerBefore","sameLayerAfter","otherLayer","otherLayerBefore","otherLayerAfter","before","concat","after","addLayerPosition","indexInArray","beforeOrAfter","addElementKeyG","addElementKey","allNodes","flatMap","allContainers","Diagram","viewBox","c","Sample","node6","node7","node8","node9","node11","node12","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","indexToReference","indexPairs","indexPair","indexPairToReference","convertStringsToNodes","strings","layer","MARGIN_TOP","MARGIN_SIDE","GROUP_MARGIN_TOP","GROUP_MARGIN_BOTTOM","GROUP_MARGIN_SIDE","EDGE_SPACING","addXToNodeG","addXToNode","fullWidth","oldX","group","layerIndex","addLayerPositionToEdgeG","groupedByLayerIndex","addLayerPositionToEdgeForLayer","addLayerPositionToEdge","heightOfEdges","numberOfLayers","grouped","edgeIndices","heightOfNodes","isPlaceholder","heightOfNodesOnlyFirstLayerOfNestedStacks","groupNestingLevel","addYToNodeG","heightOfAllEdges","addYToNode","old","nodeY","belowLayerY","groupHeight","additionalEdgeHeight","slice","addConnectionIndexAndNumberOfEdgesG","groupedByNodeAndSide","addEdgeEnd","firstNode","secondNode","setIndex","side","nodeSide","edgeEnds","reverseNode","fromIndex","toIndex","edgeEnd","upperSideEdges","lowerSideEdges","addConnectionIndexAndNumberOfEdges","allGroups","ComponentSymbol","barWidthAbsolute","barHeightAbsolute","symbolKey","isComponent","data-testid","clipPath","SYMBOL_WIDTH","GroupShape","nodeCenteringOffset","addLayerIndexToNodeG","addLayerIndexToNode","insertPlaceholdersInMultilayerEdges","abs","min","newEdges","last","end","placeholder","splice","addKeyToNodeG","addKeyToNode","globalCounter","groups","overallWidth"],"mappings":"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","file":"static/js/main.662639e1.chunk.js","sourcesContent":["export function ascending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o1) - property(o2);\n}\n\nexport function descending<T>(property: (obj: T) => number) {\n    return (o1: T, o2: T) => property(o2) - property(o1);\n}\n\nexport function and<T>(...sortFunctions: ((o1: T, o2: T) => number)[]) {\n    return (o1: T, o2: T) => {\n        let i = 0;\n        while (true) {\n            if (i === sortFunctions.length) return 0;\n            let result = sortFunctions[i](o1, o2);\n            if (result !== 0) return result;\n            i++;\n        }\n    }\n}","import {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\nimport React, {useState} from \"react\";\nimport {parseGraph} from \"./parseGraph\";\nimport {Diagram} from \"./Diagram\";\nimport {Graph, Node} from \"./graphModel\";\nimport './Editor.css';\n\nlet graphAsString =\n    `var stack = stringsToNodes([\n    [\n        {name: \"group 1\", elements: [\n            \"element 11\", \n            {name: \"element 2\", size: 1.5, symbol: \"component\"}, \n            {name: \"an element with long text\", symbol: \"component\"}            \n        ]},\n        {name: \"group 2\", elements: [\"element 4\"]}\n    ],\n    [\n        {name: \"group 3\", elements: [\"element 1\", \"element 2\"]},\n        {name: \"group 4\", elements: [\n            {name: \"group 6\", elements: [\"element 4\"]}, \n            {name: \"placeholder\", size: 0.3, isPlaceholder: true}, \n            \"element 3\"\n        ]},\n        \"node on top level\", \n        {name: \"an element with long text\", symbol: \"component\"}     \n    ],\n    [\n        {name: \"group 5\", elements: [\n            \"element 1\", \"element 2\", \"element 3\", \n            {name: \"element with changed name\", size: 1.5}, \n            {name: \"element 5\", size: 0.7}]}\n    ]\n]);\n\nvar edgeIndices = [\n    {from: [0, 0, 0],    to: [1, 3]},\n    {from: [0, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 2],    to: [1, 1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 0, 1]},\n    {from: [1, 1, 0, 0], to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 4]},\n    {from: [1, 0, 1],    to: [2, 0, 3]},\n    {from: [1, 0, 1],    to: [2, 0, 2]},\n    {from: [1, 0, 1],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [2, 0, 0]},\n    {from: [2, 0, 0],    to: [1, 0, 0]},\n    {from: [2, 0, 1],    to: [1, 0, 0]},\n    {from: [2, 0, 0],    to: [2, 0, 3]},\n    {from: [2, 0, 1],    to: [2, 0, 3]},\n    {from: [2, 0, 4],    to: [2, 0, 3]},\n    {from: [0, 0, 0],    to: [0, 0, 2]},\n    {from: [0, 0, 0],    to: [0, 0, 1]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [1, 0, 0]},\n    {from: [0, 1, 0],    to: [1, 1, 1]},\n    {from: [1, 1, 1],    to: [2, 0, 2]},\n    {from: [0, 1, 0],    to: [1, 1, 2]},\n    {from: [1, 0, 1],    to: [1, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 0]},\n    {from: [0, 0, 0],    to: [2, 0, 1]},\n    {from: [1, 0, 1],    to: [1, 1, 0, 0]}\n];\nvar edges = indicesToReferences(stack, edgeIndices);\n\nvar graph = {\n    stack: stack,\n    edges: edges\n};\n\ngraph\n`;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\n// eslint-disable-next-line no-eval\nconst initialGraph: Graph<Node, unknown, unknown> = eval(graphAsString);\n\nexport const Editor: React.FC = () => {\n    const [graph, setGraph] = useState(initialGraph);\n    const [errorMessage, setErrorMessage] = useState(\"\");\n\n    function handleChange(changeEvent: React.ChangeEvent<HTMLTextAreaElement>) {\n        let result = parseGraph(changeEvent.target.value);\n        if (typeof result === 'string') {\n            setErrorMessage(result);\n        } else {\n            setGraph(result);\n            setErrorMessage(\"\");\n        }\n    }\n\n    return (\n        <div id=\"parent\" className=\"App\">\n            <div id=\"graph\">\n                <Diagram stack={graph.stack} edges={graph.edges}/>\n            </div>\n            <div>\n                <textarea cols={100} rows={45} onChange={handleChange} defaultValue={graphAsString}/>\n                <p className=\"error-message\">{errorMessage}</p>\n            </div>\n        </div>\n    );\n};","import {Edge, Graph, Node} from \"./graphModel\";\nimport {indicesToReferences as indicesToReferencesImport} from \"./indicesToReferences\";\nimport {stringsToNodes as stringsToNodesImport} from \"./stringsToNodes\";\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst indicesToReferences = indicesToReferencesImport;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst stringsToNodes = stringsToNodesImport;\n\nexport function parseGraph(text: string): Graph<Node, unknown, unknown> | string {\n    try {\n// eslint-disable-next-line\n        let graph: Graph<Node, unknown, unknown> = eval(text);\n\n        if (graph === undefined) return \"Script is not returning a graph object!\";\n\n        if (graph.stack === undefined) return \"Property layers is missing in graph object!\";\n        if (graph.edges === undefined) return \"Property edges is missing in graph object!\";\n\n        if (!graph.edges.every((edge: Edge<Node>) => edge.from !== undefined))\n            return \"Property from must be defined on every edge!\";\n        if (!graph.edges.every((edge: Edge<Node>) => edge.to !== undefined))\n            return \"Property to must be defined on every edge!\";\n\n        return graph;\n    } catch (e) {\n        return e.message;\n    }\n}","import React from \"react\";\nimport {Diagram} from \"./Diagram\";\nimport {Edge, Node, Stack} from \"./graphModel\";\n\nfunction component(name: string): Node {\n    return {\n        kind: \"node\", name: name, symbol: \"component\", size: 1.2\n    }\n}\n\nexport const Architecture: React.FC = () => {\n    let productAPI = component(\"Product API\");\n    let stockAPI = component(\"Stock API\");\n    let productServiceDB = component(\"Product Service DB\");\n    let productImporter = component(\"Product Importer\");\n    let stockImporter = component(\"Stock Importer\");\n    let categoryImporter = component(\"Category Importer\");\n    let campaignImporter = component(\"Campaign Importer\");\n\n    let stack: Stack<Node, unknown> = {\n        kind: \"stack\",\n        elements: [\n            {\n                kind: \"layer\",\n                elements: [productAPI, stockAPI]\n            },\n            {\n                kind: \"layer\",\n                elements: [productServiceDB]\n            },\n            {\n                kind: \"layer\",\n                elements: [productImporter, stockImporter, categoryImporter, campaignImporter]\n            }\n        ]\n    };\n\n    let edges: Edge<Node>[] = [\n        {from: productAPI, to: productServiceDB},\n        {from: stockAPI, to: productServiceDB},\n        {from: productServiceDB, to: productImporter},\n        {from: productServiceDB, to: stockImporter},\n        {from: productServiceDB, to: categoryImporter},\n        {from: productServiceDB, to: campaignImporter}\n    ];\n\n    return (\n        <Diagram stack={stack} edges={edges}/>\n    );\n};","export type Node = {\n    kind: \"node\"\n};\n\nexport type Row<N> = {\n    kind: \"row\",\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Column<N> = {\n    kind: \"column\",\n    border?: \"solid\",\n    elements: Element<N>[]\n};\n\nexport type Container<N> = (Row<N> & N) | (Column<N> & N);\n\nexport type Element<N> = (Node & N) | (Row<N> & N) | (Column<N> & N);\n\nexport type Edge<N, E> = {\n    from: N,\n    to: N\n} & E\n\nexport type Graph<N, E> = {\n    element: Element<N>\n    edges: Edge<N, E>[]\n}\n\nexport function graph<N, E>(element: Element<N>, edges: Edge<N, E>[] = []): Graph<N, E> {\n    return {element: element, edges: edges};\n}\n\nexport function transformElements<N, A, E>(graph: Graph<N, E>, f: (element: Element<N>) => void): Graph<N & A, E> {\n    f(graph.element);\n    return graph as Graph<N & A, E>;\n}\n\nexport function node(): Node {\n    return {\n        kind: \"node\"\n    };\n}\n\nexport function edge<N>(from: N, to: N): Edge<N, unknown> {\n    return {\n        from: from,\n        to: to\n    }\n}","export const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const BORDER_SPACING_X = 10;\nexport const BORDER_SPACING_TOP = 30;\nexport const BORDER_SPACING_BOTTOM = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import React from \"react\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    BORDER_SPACING_X,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING, BORDER_SPACING_TOP, BORDER_SPACING_BOTTOM\n} from \"./styling\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {BorderIndexMaxPreviousBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {ElementKey} from \"./elementsLayout/ElementKey\";\n\ntype Props = ElementKey &\n    OffsetElementsX & BorderIndexMaxX &\n    OffsetElementsY &\n    BorderIndexMaxPreviousTop & BorderIndexMaxTop & BorderIndexTop &\n    BorderIndexMaxPreviousBottom;\n\nexport const NodeShape: React.FC<Props> = node => {\n    return (\n        <g key={node.elementKey}>\n            <rect x={node.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n            node.borderIndexMaxX * (node.offsetElementsX * 2 + 1) * BORDER_SPACING_X}\n                  y={node.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                  + (node.borderIndexMaxPreviousTop + node.borderIndexMaxTop - node.borderIndexTop) * BORDER_SPACING_TOP\n                  + node.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM}\n                  width={ELEMENT_WIDTH}\n                  height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","export function assertNever(x: never): never {\n    throw new Error(\"Unexpected object: \" + x);\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsY = { offsetElementsY: number };\n\nexport function addOffsetElementsYG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsY, E> {\n    return transformElements<N, OffsetElementsY, E>(graph, addOffsetElementsY);\n}\n\nexport function addOffsetElementsY(element: Element<unknown>, accumulator = {offsetElementsY: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            accumulator.offsetElementsY++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            let maxOffsetYElements = 0;\n            let oldOffsetYElements = accumulator.offsetElementsY;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsY(nestedElement, accumulator);\n                maxOffsetYElements = Math.max(maxOffsetYElements, accumulator.offsetElementsY);\n                accumulator.offsetElementsY = oldOffsetYElements;\n            });\n            accumulator.offsetElementsY = maxOffsetYElements;\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsY>(element, {\n                offsetElementsY: accumulator.offsetElementsY\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsY(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type OffsetElementsX = { offsetElementsX: number };\n\nexport function addOffsetElementsXG<N, E>(graph: Graph<N, E>): Graph<N & OffsetElementsX, E> {\n    return transformElements<N, OffsetElementsX, E>(graph, addOffsetElementsX);\n}\n\nexport function addOffsetElementsX(element: Element<unknown>, accumulator = {offsetElementsX: 0}) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            accumulator.offsetElementsX++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            element.elements.forEach(nestedElement => addOffsetElementsX(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, OffsetElementsX>(element, {\n                offsetElementsX: accumulator.offsetElementsX\n            });\n            let maxOffsetXElements = 0;\n            let oldOffsetXElements = accumulator.offsetElementsX;\n            element.elements.forEach(nestedElement => {\n                addOffsetElementsX(nestedElement, accumulator);\n                maxOffsetXElements = Math.max(maxOffsetXElements, accumulator.offsetElementsX);\n                accumulator.offsetElementsX = oldOffsetXElements;\n            });\n            accumulator.offsetElementsX = maxOffsetXElements;\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsX = { embeddedElementsX: number };\n\nexport function addEmbeddedElementsXG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsX, E> {\n    return transformElements<N, EmbeddedElementsX, E>(graph, addEmbeddedElementsX);\n}\n\nexport function addEmbeddedElementsX(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsX>(element, {\n                embeddedElementsX: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedXElements =\n                element.elements.map(addEmbeddedElementsX).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        case \"column\": {\n            let embeddedXElements =\n                Math.max(...element.elements.map(addEmbeddedElementsX), 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsX>(element, {\n                embeddedElementsX: embeddedXElements\n            });\n            return embeddedXElements;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Container} from \"./newGraphModel\";\nimport {EmbeddedElementsX} from \"./elementsLayout/EmbeddedElementsX\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexLeft} from \"./elementsLayout/BorderIndexLeft\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {BorderIndexMaxBottom, BorderIndexMaxPreviousBottom, EmbeddedBorderIndexMaxBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop, EmbeddedBorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexBottom} from \"./elementsLayout/BorderIndexBottom\";\nimport {BorderIndexRight} from \"./elementsLayout/BorderIndexRight\";\nimport {EmbeddedElementsY} from \"./elementsLayout/EmbeddedElementsY\";\nimport {ElementKey} from \"./elementsLayout/ElementKey\";\n\ntype Props = Container<\n    ElementKey &\n    OffsetElementsX & EmbeddedElementsX &\n    OffsetElementsY & EmbeddedElementsY &\n    BorderIndexLeft & BorderIndexRight & BorderIndexMaxX &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop &\n    BorderIndexBottom & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>;\n\nexport const ContainerShape: React.FC<Props> = container => {\n    return (\n        <g key={container.elementKey}>\n            <rect\n                x={container.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n                (container.borderIndexMaxX * (container.offsetElementsX * 2 + 1)  - container.borderIndexLeft) * BORDER_SPACING_X}\n                y={container.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (container.borderIndexMaxPreviousTop + container.borderIndexMaxTop - container.borderIndexTop) * BORDER_SPACING_TOP\n                + container.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM}\n                width={container.embeddedElementsX * ELEMENT_WIDTH + (container.embeddedElementsX - 1) * HORIZONTAL_SPACING +\n                ((container.embeddedElementsX - 1) * container.borderIndexMaxX * 2 + container.borderIndexLeft + container.borderIndexRight) * BORDER_SPACING_X}\n                height={container.embeddedElementsY * ELEMENT_HEIGHT +\n                (container.embeddedElementsY - 1) * VERTICAL_SPACING +\n                container.borderIndexTop * BORDER_SPACING_TOP +\n                container.embeddedBorderIndexMaxTop * BORDER_SPACING_TOP +\n                container.embeddedBorderIndexMaxBottom * BORDER_SPACING_BOTTOM +\n                container.borderIndexBottom * BORDER_SPACING_BOTTOM}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text\n                x={container.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n                (container.borderIndexMaxX * (container.offsetElementsX * 2 + 1) - container.borderIndexLeft) * BORDER_SPACING_X}\n                y={container.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n                + (container.borderIndexMaxPreviousTop + container.borderIndexMaxTop - container.borderIndexTop) * BORDER_SPACING_TOP\n                + container.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM\n                + 15}\n                fill=\"black\">{\n                container.embeddedElementsY + \"__\" +\n                container.borderIndexMaxPreviousTop + \"/\" + container.borderIndexTop + \"/\" + container.borderIndexMaxTop + \"__\" +\n                container.borderIndexMaxPreviousBottom + \"/\" + container.borderIndexBottom + \"/\" + container.borderIndexMaxBottom}\n            </text>\n        </g>\n    );\n};","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexLeft} from \"./BorderIndexLeft\";\nimport {BorderIndexRight} from \"./BorderIndexRight\";\n\nexport type BorderIndexMaxX = { borderIndexMaxX: number };\n\nexport function addBorderIndexMaxXG<N extends BorderIndexLeft & BorderIndexRight, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxX, E> {\n    return transformElements<N, BorderIndexMaxX, E>(graph, determineAndAddBorderIndexMaxX);\n}\n\nfunction determineAndAddBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>) {\n    let maxEmbeddedXBorders = determineBorderIndexMaxX(element);\n    addBorderIndexMaxX(element, maxEmbeddedXBorders);\n}\n\nfunction determineBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>): number {\n    switch (element.kind) {\n        case \"node\": return 0;\n        case \"row\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        case \"column\": return Math.max(\n            ...element.elements.map(determineBorderIndexMaxX),\n            element.borderIndexLeft,\n            element.borderIndexRight\n        );\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport function addBorderIndexMaxX(element: Element<BorderIndexLeft & BorderIndexRight>, borderIndexMaxX: number) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxX>(element, {\n                borderIndexMaxX: borderIndexMaxX\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxX(nestedElement, borderIndexMaxX));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexLeft = { borderIndexLeft: number };\n\nexport function addBorderIndexLeftG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexLeft, E> {\n    return transformElements<N, BorderIndexLeft, E>(graph, addBorderIndexLeft);\n}\n\nexport function addBorderIndexLeft(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexLeft>(element, {\n                borderIndexLeft: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let leftBorderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexLeft) :  [0];\n            let leftBorderIndex = leftBorderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        case \"column\": {\n            let leftBorderIndex =\n                Math.max(...element.elements.map(addBorderIndexLeft), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexLeft>(element, {\n                borderIndexLeft: leftBorderIndex\n            });\n            return leftBorderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexRight = { borderIndexRight: number };\n\nexport function addBorderIndexRightG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexRight, E> {\n    return transformElements<N, BorderIndexRight, E>(graph, addBorderIndexRight);\n}\n\nexport function addBorderIndexRight(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexRight>(element, {\n                borderIndexRight: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexRight) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexRight), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexRight>(element, {\n                borderIndexRight: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexTop = { borderIndexTop: number };\n\nexport function addBorderIndexTopG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexTop, E> {\n    return transformElements<N, BorderIndexTop, E>(graph, addBorderIndexTop);\n}\n\nexport function addBorderIndexTop(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexTop>(element, {\n                borderIndexTop: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexTop), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexTop) :  [0];\n            let borderIndex = borderIndices[0] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexTop>(element, {\n                borderIndexTop: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type BorderIndexBottom = { borderIndexBottom: number };\n\nexport function addBorderIndexBottomG<N, E>(graph: Graph<N, E>): Graph<N & BorderIndexBottom, E> {\n    return transformElements<N, BorderIndexBottom, E>(graph, addBorderIndexBottom);\n}\n\nexport function addBorderIndexBottom(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexBottom>(element, {\n                borderIndexBottom: 0\n            });\n            return 0;\n        }\n        case \"row\": {\n            let borderIndex =\n                Math.max(...element.elements.map(addBorderIndexBottom), 0) +\n                (element.border ?  1 : 0);\n\n            Object.assign<Row<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        case \"column\": {\n            let borderIndices = element.elements.length > 0 ? element.elements.map(addBorderIndexBottom) :  [0];\n            let borderIndex = borderIndices[borderIndices.length - 1] + (element.border ?  1 : 0);\n\n            Object.assign<Column<unknown>, BorderIndexBottom>(element, {\n                borderIndexBottom: borderIndex\n            });\n            return borderIndex;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {ascending} from \"../v1/sorting\";\n\nexport function sumOfPreviousRows(max: Map<number, number>): Map<number, number> {\n    let result = new Map<number, number>();\n\n    let sumOfPrevious = 0;\n    Array.from(max.entries()).sort(ascending(entry => entry[0])).forEach(entry => {\n        result.set(entry[0], sumOfPrevious);\n        sumOfPrevious += entry[1];\n    });\n\n    return result;\n}","import {Element} from \"./newGraphModel\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\n\nexport function getMostBottomOffsetElementsY(element: Element<OffsetElementsY>): number {\n    switch (element.kind) {\n        case \"node\":\n            return element.offsetElementsY;\n        case \"row\":\n        case \"column\":\n            return Math.max(...element.elements.map(getMostBottomOffsetElementsY), element.offsetElementsY);\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexBottom} from \"./BorderIndexBottom\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxBottom = { borderIndexMaxBottom: number };\nexport type BorderIndexMaxPreviousBottom = { borderIndexMaxPreviousBottom: number };\nexport type EmbeddedBorderIndexMaxBottom = { embeddedBorderIndexMaxBottom: number };\n\nexport function addBorderIndexMaxBottomG<N extends OffsetElementsY & BorderIndexBottom, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E> {\n    return transformElements<N, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom, E>(\n        graph, determineAndAddBorderIndexBottomAggregates);\n}\n\nfunction determineAndAddBorderIndexBottomAggregates(element: Element<OffsetElementsY & BorderIndexBottom>) {\n    let max = determineBorderIndexMaxBottom(element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxBottom(element, max, sums);\n}\n\nfunction determineBorderIndexMaxBottom(element: Element<OffsetElementsY & BorderIndexBottom>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexBottom);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(getMostBottomOffsetElementsY(element), element.borderIndexBottom);\n            return element.elements.map(determineBorderIndexMaxBottom).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY;\n    let to = getMostBottomOffsetElementsY(element) - 1;\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxBottom(\n    element: Element<OffsetElementsY & BorderIndexBottom>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxBottom & BorderIndexMaxPreviousBottom & EmbeddedBorderIndexMaxBottom>(element, {\n                borderIndexMaxBottom: current.get(getMostBottomOffsetElementsY(element))!,\n                borderIndexMaxPreviousBottom: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxBottom: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxBottom(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\nimport {BorderIndexTop} from \"./BorderIndexTop\";\nimport {OffsetElementsY} from \"./OffsetElementsY\";\nimport {sumOfPreviousRows} from \"../sumOfPreviousRows\";\nimport {getMostBottomOffsetElementsY} from \"../getMostBottomOffsetElementsY\";\n\nexport type BorderIndexMaxTop = { borderIndexMaxTop: number };\nexport type BorderIndexMaxPreviousTop = { borderIndexMaxPreviousTop: number };\nexport type EmbeddedBorderIndexMaxTop = { embeddedBorderIndexMaxTop: number };\n\nexport function addBorderIndexMaxTopG<N extends OffsetElementsY & BorderIndexTop, E>(\n    graph: Graph<N, E>\n): Graph<N & BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E> {\n    return transformElements<N, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop, E>(\n        graph, determineAndAddBorderIndexTopAggregates\n    );\n}\n\nfunction determineAndAddBorderIndexTopAggregates(element: Element<OffsetElementsY & BorderIndexTop>) {\n    let max = determineBorderIndexMaxTop(element);\n    let sums = sumOfPreviousRows(max);\n    addBorderIndexMaxTop(element, max, sums);\n}\n\nfunction determineBorderIndexMaxTop(element: Element<OffsetElementsY & BorderIndexTop>): Map<number, number> {\n    switch (element.kind) {\n        case \"node\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return map;\n        }\n        case \"row\":\n        case \"column\": {\n            let map = new Map<number, number>();\n            map.set(element.offsetElementsY, element.borderIndexTop);\n            return element.elements.map(determineBorderIndexMaxTop).reduce((accumulator, addition) => {\n                Array.from(addition.entries()).forEach((entry) => {\n                    let max = Math.max(accumulator.get(entry[0]) || 0, entry[1]);\n                    accumulator.set(entry[0], max);\n                });\n                return accumulator;\n            }, map);\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction calculateEmbeddedBorders(element: Element<OffsetElementsY>, current: Map<number, number>) {\n    let from = element.offsetElementsY + 1;\n    let to = getMostBottomOffsetElementsY(element);\n    let embeddedBorders = 0;\n    for (let i = from; i <= to; i++) {\n        embeddedBorders += current.get(i) || 0;\n    }\n    return embeddedBorders;\n}\n\nfunction addBorderIndexMaxTop(\n    element: Element<OffsetElementsY & BorderIndexTop>,\n    current: Map<number, number>,\n    sums: Map<number, number>\n) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: 0\n            });\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, BorderIndexMaxTop & BorderIndexMaxPreviousTop & EmbeddedBorderIndexMaxTop>(element, {\n                borderIndexMaxTop: current.get(element.offsetElementsY)!,\n                borderIndexMaxPreviousTop: sums.get(element.offsetElementsY)!,\n                embeddedBorderIndexMaxTop: calculateEmbeddedBorders(element, current)\n            });\n            element.elements.forEach(nestedElement =>\n                addBorderIndexMaxTop(nestedElement, current, sums));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type EmbeddedElementsY = { embeddedElementsY: number };\n\nexport function addEmbeddedElementsYG<N, E>(graph: Graph<N, E>): Graph<N & EmbeddedElementsY, E> {\n    return transformElements<N, EmbeddedElementsY, E>(graph, addEmbeddedElementsY);\n}\n\nexport function addEmbeddedElementsY(element: Element<unknown>): number {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, EmbeddedElementsY>(element, {\n                embeddedElementsY: 1\n            });\n            return 1;\n        }\n        case \"row\": {\n            let embeddedElementsY =\n                Math.max(...element.elements.map(addEmbeddedElementsY), 0);\n\n            Object.assign<Row<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        case \"column\": {\n            let embeddedElementsY =\n                element.elements.map(addEmbeddedElementsY).reduce((sum, add) => sum + add, 0);\n\n            Object.assign<Column<unknown>, EmbeddedElementsY>(element, {\n                embeddedElementsY: embeddedElementsY\n            });\n            return embeddedElementsY;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {Edge} from \"./newGraphModel\";\n\nfunction fromIsUpperLeft<N extends OffsetElementsX & OffsetElementsY, E>(edge: Edge<N, E>) {\n    if (edge.from.offsetElementsY === edge.to.offsetElementsY) {\n        return edge.from.offsetElementsX <= edge.to.offsetElementsX;\n    }\n    return edge.from.offsetElementsY < edge.to.offsetElementsY;\n}\n\nexport function getUpperLeftNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<N extends OffsetElementsX & OffsetElementsY>(edge: Edge<N, unknown>): N {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import React from \"react\";\nimport {\n    BORDER_SPACING_BOTTOM,\n    BORDER_SPACING_TOP,\n    BORDER_SPACING_X, EDGE_SPACING,\n    ELEMENT_HEIGHT,\n    ELEMENT_WIDTH,\n    HORIZONTAL_SPACING,\n    STROKE_WIDTH,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {OffsetElementsY} from \"./elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"./elementsLayout/OffsetElementsX\";\nimport {BorderIndexMaxX} from \"./elementsLayout/BorderIndexMaxX\";\nimport {BorderIndexMaxPreviousTop, BorderIndexMaxTop} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {BorderIndexMaxPreviousBottom} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {BorderIndexTop} from \"./elementsLayout/BorderIndexTop\";\nimport {Edge} from \"./newGraphModel\";\nimport {getUpperLeftNode} from \"./EdgeHelper\";\nimport {EdgeIndex, MidPathSegmentOffsetY} from \"./edgesLayout/MidPathSegmentOffsetY\";\n\nfunction getY<N extends OffsetElementsY &\n    BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom>(node: N) {\n    return node.offsetElementsY * (ELEMENT_HEIGHT + VERTICAL_SPACING)\n        + (node.borderIndexMaxPreviousTop + node.borderIndexMaxTop - node.borderIndexTop) * BORDER_SPACING_TOP\n        + node.borderIndexMaxPreviousBottom * BORDER_SPACING_BOTTOM;\n}\n\nfunction edgeEndCoordinates<N extends OffsetElementsX & OffsetElementsY &\n    BorderIndexMaxX & BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom>(\n    node: N, otherNode: N\n) {\n    let onLowerSide = node.offsetElementsY <= otherNode.offsetElementsY;\n    return {\n        x: node.offsetElementsX * (ELEMENT_WIDTH + HORIZONTAL_SPACING) +\n            node.borderIndexMaxX * (node.offsetElementsX * 2 + 1) * BORDER_SPACING_X +\n        ELEMENT_WIDTH / 2,\n        y: getY(node) + (onLowerSide ? ELEMENT_HEIGHT : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<OffsetElementsX & OffsetElementsY &\n    BorderIndexMaxX & BorderIndexTop & BorderIndexMaxTop & BorderIndexMaxPreviousTop & BorderIndexMaxPreviousBottom,\n    EdgeIndex & MidPathSegmentOffsetY>> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.to);\n    let upperNodeEdgesY = getY(getUpperLeftNode(edge)) + ELEMENT_HEIGHT + VERTICAL_SPACING / 2 + edge.midPathSegmentOffsetY * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.from);\n    return (\n        <path key={edge.edgeIndex} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {ascending, descending} from \"../../v1/sorting\";\nimport {Edge, Graph} from \"../newGraphModel\";\nimport {OffsetElementsY} from \"../elementsLayout/OffsetElementsY\";\nimport {OffsetElementsX} from \"../elementsLayout/OffsetElementsX\";\nimport {getLowerRightNode, getUpperLeftNode} from \"../EdgeHelper\";\n\nexport type MidPathSegmentOffsetY = {\n    midPathSegmentOffsetY: number\n}\n\nexport type EdgeIndex = {\n    edgeIndex: number\n}\n\nexport function addMidPathSegmentOffsetYG<N extends OffsetElementsY & OffsetElementsX, E>(graph: Graph<N, E>):\n    Graph<N, E & MidPathSegmentOffsetY & EdgeIndex> {\n    addMidPathSegmentOffsetY(graph.edges);\n    return graph as unknown as Graph<N, E & MidPathSegmentOffsetY & EdgeIndex>;\n}\n\nexport function addMidPathSegmentOffsetY(edges: Edge<OffsetElementsY & OffsetElementsX, unknown>[]) {\n    let groupedByOffsetElementsY = new Map<number, (Edge<OffsetElementsY & OffsetElementsX, unknown>)[]>();\n\n    edges\n        .map((edge, index) => {\n            return Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, EdgeIndex>(\n                edge, {edgeIndex: index});\n        })\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).offsetElementsY;\n            let edges = groupedByOffsetElementsY.get(key) || [];\n            edges.push(edge);\n            groupedByOffsetElementsY.set(key, edges);\n        });\n\n    Array.from(groupedByOffsetElementsY.values()).forEach(addMidPathSegmentOffsetYForLayer);\n}\n\nfunction addMidPathSegmentOffsetYForLayer(edges: Edge<OffsetElementsY & OffsetElementsX, unknown>[]) {\n    let groupedByUpperNode = new Map<string, Edge<OffsetElementsY & OffsetElementsX, unknown>[]>();\n\n    edges.forEach(edge => {\n        let upperLeftNode = getUpperLeftNode(edge);\n        let key = upperLeftNode.offsetElementsY + \"_\" + upperLeftNode.offsetElementsX;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY === getUpperLeftNode(edge).offsetElementsY);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).offsetElementsY !== getUpperLeftNode(edge).offsetElementsY);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).offsetElementsX <= getUpperLeftNode(edge).offsetElementsX);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).offsetElementsX > getUpperLeftNode(edge).offsetElementsX);\n\n        sameLayerBefore.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n        otherLayerBefore.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n        otherLayerAfter.sort(descending(edge => getLowerRightNode(edge).offsetElementsX));\n        sameLayerAfter.sort(ascending(edge => getLowerRightNode(edge).offsetElementsX));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<OffsetElementsY & OffsetElementsX, unknown>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let index = indexOffset + indexInArray;\n            Object.assign<Edge<OffsetElementsY & OffsetElementsX, unknown>, MidPathSegmentOffsetY>(edge, {\n                midPathSegmentOffsetY: index\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {Column, Element, Graph, Node, Row, transformElements} from \"../newGraphModel\";\nimport {assertNever} from \"../assertNever\";\n\nexport type ElementKey = { elementKey: number };\n\nexport function addElementKeyG<N, E>(graph: Graph<N, E>): Graph<N & ElementKey, E> {\n    return transformElements<N, ElementKey, E>(graph, addElementKey);\n}\n\nexport function addElementKey(\n    element: Element<unknown>,\n    accumulator: { elementKey: number } = { elementKey: 0 }) {\n    switch (element.kind) {\n        case \"node\": {\n            Object.assign<Node, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            return;\n        }\n        case \"row\": {\n            Object.assign<Row<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        case \"column\": {\n            Object.assign<Column<unknown>, ElementKey>(element, {\n                elementKey: accumulator.elementKey\n            });\n            accumulator.elementKey++;\n            element.elements.forEach(nestedElement => addElementKey(nestedElement, accumulator));\n            return;\n        }\n        default: {\n            assertNever(element);\n        }\n    }\n}","import React from \"react\";\nimport {Container, Element, Graph, Node} from \"./newGraphModel\";\nimport {NodeShape} from \"./NodeShape\";\nimport {assertNever} from \"./assertNever\";\nimport {addOffsetElementsYG} from \"./elementsLayout/OffsetElementsY\";\nimport {addOffsetElementsXG} from \"./elementsLayout/OffsetElementsX\";\nimport {addEmbeddedElementsXG} from \"./elementsLayout/EmbeddedElementsX\";\nimport {ContainerShape} from \"./ContainerShape\";\nimport {addBorderIndexMaxXG} from \"./elementsLayout/BorderIndexMaxX\";\nimport {addBorderIndexLeftG} from \"./elementsLayout/BorderIndexLeft\";\nimport {addBorderIndexRightG} from \"./elementsLayout/BorderIndexRight\";\nimport {addBorderIndexTopG} from \"./elementsLayout/BorderIndexTop\";\nimport {addBorderIndexBottomG} from \"./elementsLayout/BorderIndexBottom\";\nimport {addBorderIndexMaxBottomG} from \"./elementsLayout/BorderIndexMaxBottom\";\nimport {addBorderIndexMaxTopG} from \"./elementsLayout/BorderIndexMaxTop\";\nimport {addEmbeddedElementsYG} from \"./elementsLayout/EmbeddedElementsY\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {addMidPathSegmentOffsetYG} from \"./edgesLayout/MidPathSegmentOffsetY\";\nimport {addElementKeyG} from \"./elementsLayout/ElementKey\";\n\nfunction allNodes<N>(element: Element<N>): (Node & N)[] {\n    switch (element.kind) {\n        case \"node\": return [element];\n        case \"row\": return element.elements.flatMap(allNodes);\n        case \"column\": return element.elements.flatMap(allNodes);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nfunction allContainers<N>(element: Element<N>): Container<N>[] {\n    switch (element.kind) {\n        case \"node\": return [];\n        case \"row\": return element.elements.flatMap(allContainers).concat(element);\n        case \"column\": return element.elements.flatMap(allContainers).concat(element);\n        default: {\n            assertNever(element);\n        }\n    }\n}\n\nexport const Diagram: React.FC<Graph<unknown, unknown>> = graph => {\n    return [graph]\n        .map(addElementKeyG)\n        .map(addOffsetElementsXG)\n        .map(addOffsetElementsYG)\n        .map(addBorderIndexLeftG)\n        .map(addBorderIndexRightG)\n        .map(addBorderIndexTopG)\n        .map(addBorderIndexBottomG)\n        .map(addBorderIndexMaxXG)\n        .map(addBorderIndexMaxTopG)\n        .map(addBorderIndexMaxBottomG)\n        .map(addEmbeddedElementsXG)\n        .map(addEmbeddedElementsYG)\n        .map(addMidPathSegmentOffsetYG)\n        .map(graph => (\n            <svg viewBox={\"0 0 1200 600\"}>\n                {allNodes(graph.element).map(NodeShape)}\n                {allContainers(graph.element).filter(c => c.border).map(ContainerShape)}\n                {graph.edges.map(EdgeShape)}\n            </svg>\n        ))[0];\n};","import React from \"react\";\nimport {edge, Element, node} from \"./newGraphModel\";\nimport {Diagram} from \"./Diagram\";\n\nexport const Sample: React.FC = () => {\n    let node1 = node();\n    let node2 = node();\n    let node3 = node();\n    let node4 = node();\n    let node5 = node();\n    let node6 = node();\n    let node7 = node();\n    let node8 = node();\n    let node9 = node();\n    let node10 = node();\n    let node11 = node();\n    let node12 = node();\n    let element: Element<unknown> = {\n        kind: \"column\", elements: [{\n            kind: \"row\", elements: [{\n                kind: \"column\", border: \"solid\", elements: [node1, node2]\n            }, {\n                kind: \"column\", border: \"solid\", elements: [{\n                    kind: \"row\", border: \"solid\", elements: [node3, node4]\n                }, node5, node6]\n            }]\n        }, {\n            kind: \"row\", elements: [node7, node8]\n        }, {\n            kind: \"row\", border: \"solid\", elements: [{\n                kind: \"row\", border: \"solid\", elements: [node9, node10]\n            }, {\n                kind: \"row\", border: \"solid\", elements: [node11, node12]\n            }]\n        }]\n    };\n    let edges = [\n        edge(node6, node7),\n        edge(node9, node8),\n        edge(node12, node8),\n        edge(node11, node8)\n    ];\n    return (\n        <Diagram element={element} edges={edges}/>\n    );\n};","import React from 'react';\nimport {HashRouter as Router, Link, Route, Switch} from \"react-router-dom\";\nimport {Editor} from \"./v1/Editor\";\nimport {Architecture} from \"./v1/Architecture\";\nimport {Sample} from \"./v2/Sample\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <div>\n                <ul>\n                    <li>\n                        <Link to=\"/\">Editor</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/architecture\">Sample Architecture</Link>\n                    </li>\n                    <li>\n                        <Link to=\"/new-layouting\">New Layouting</Link>\n                    </li>\n                </ul>\n\n                <hr/>\n\n                <Switch>\n                    <Route exact path=\"/\">\n                        <Editor/>\n                    </Route>\n                    <Route path=\"/architecture\">\n                        <Architecture/>\n                    </Route>\n                    <Route path=\"/new-layouting\">\n                        <Sample/>\n                    </Route>\n                </Switch>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {Edge, Stack} from \"./graphModel\";\n\nexport type IndexPair = {\n    from: number[]\n    to: number[]\n}\n\nfunction indexToReference<N, G>(stack: Stack<N, G>, index: number[]): any {\n    // It is necessary to go through the array by index,\n    // because the array operations `every`, `map` and `flat` bypass empty array elements.\n    for (let i = 0; i < index.length; i++) {\n        if (index[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n    }\n\n    let element: any = stack;\n    index.forEach(i => {\n        if (element.elements[i] === undefined)\n            throw new Error(\"Indices must refer to a node that does exist. Index \" + i  + \" Array length \" + element.elements.length);\n        element = element.elements[i];\n    });\n    return element;\n}\n\nfunction indexPairToReference<N, G>(stack: Stack<N, G>, indexPair: IndexPair): Edge<N> {\n    return {\n        from: indexToReference(stack, indexPair.from),\n        to: indexToReference(stack, indexPair.to)\n    };\n}\n\nexport function indicesToReferences<N, G>(stack: Stack<N, G>, indexPairs: IndexPair[]): Edge<N>[] {\n    return indexPairs.map(indexPair => indexPairToReference(stack, indexPair));\n}","import {Group, Layer, Node, Stack} from \"./graphModel\";\n\nfunction convertStringsToNodes(\n    element: string | Node | Group<string | Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown>\n): Node | Group<Node, unknown> | Layer<Node, unknown> | Stack<Node, unknown> {\n    if (typeof element === 'string') {\n        return {\n            kind: 'node',\n            name: element\n        }\n    } else if (\"elements\" in element) {\n        // It is necessary to go through the array by index,\n        // because the array operations `every`, `map` and `flat` bypass empty array elements.\n        for (let i = 0; i < element.elements.length; i++) {\n            if (element.elements[i] === undefined) throw new Error(\"Empty array elements are not allowed.\");\n        }\n        if (\"name\" in element) {\n            return {\n                kind: \"group\",\n                name: element.name,\n                elements: element.elements.map(convertStringsToNodes) as (Group<Node, unknown> | Node)[]\n            }\n        }\n        switch (element.kind) {\n            default:\n            case \"stack\":  {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as Layer<Node, unknown>[]\n                }\n            }\n            case \"layer\": {\n                return {\n                    kind: element.kind,\n                    elements: element.elements.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n                }\n            }\n        }\n    } else {\n        return Object.assign(element, {\n            kind: 'node'\n        });\n    }\n}\n\nexport function stringsToNodes(\n    strings: (string | Node | Group<string | Node, unknown> | Stack<Node, unknown>)[][]\n): Stack<Node, unknown> {\n    return {\n        kind: 'stack',\n        elements: strings.map(layer => {\n            return {\n                kind: 'layer',\n                elements: layer.map(convertStringsToNodes) as (Node | Group<Node, unknown> | Stack<Node, unknown>)[]\n            }\n        })\n    };\n}","export const MARGIN_TOP = 5;\nexport const MARGIN_SIDE = 5;\nexport const ELEMENT_WIDTH = 150;\nexport const ELEMENT_HEIGHT = 40;\nexport const SYMBOL_WIDTH = 12;\nexport const SYMBOL_SPACING = 3;\nexport const GROUP_MARGIN_TOP = 30;\nexport const GROUP_MARGIN_BOTTOM = 10;\nexport const GROUP_MARGIN_SIDE = 10;\nexport const HORIZONTAL_SPACING = 10;\nexport const VERTICAL_SPACING = 20;\nexport const TEXT_PADDING = 5;\nexport const EDGE_SPACING = 10;\nexport const STROKE_WIDTH = 0.5;","import {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING} from \"./styling\";\nimport {Group, Layer, Node, Stack} from \"./graphModel\";\n\nexport function width(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return Math.max(...element.elements.map(width));\n        case \"layer\":\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"group\": {\n            return element.elements\n                .map(width)\n                .map((width, index) => width + (index > 0 ? HORIZONTAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0) + 2 * GROUP_MARGIN_SIDE;\n        }\n        case \"node\":\n            return ELEMENT_WIDTH * (element.size || 1);\n    }\n}","import {width} from \"./width\";\nimport {ELEMENT_WIDTH, GROUP_MARGIN_SIDE, HORIZONTAL_SPACING, MARGIN_SIDE} from \"./styling\";\nimport {Graph, Group, Layer, Node, Stack, X} from \"./graphModel\";\n\nexport function addXToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & X, E, G & X> {\n    addXToNode(graph.stack, {x: MARGIN_SIDE});\n    return graph as unknown as Graph<N & X, E, G & X>;\n}\n\nexport function addXToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { x: number },\n    fullWidth: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let fullWidth = width(element);\n            element.elements.forEach(layer => {\n                addXToNode(layer, accumulator, fullWidth);\n            });\n            accumulator.x += fullWidth + HORIZONTAL_SPACING;\n            return;\n        }\n        case \"layer\": {\n            let oldX = accumulator.x;\n            accumulator.x = oldX + (fullWidth - width(element)) / 2;\n            element.elements.forEach(group => {\n                addXToNode(group, accumulator, fullWidth);\n            });\n            accumulator.x = oldX;\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n\n            accumulator.x += GROUP_MARGIN_SIDE;\n            element.elements.forEach(node => {\n                addXToNode(node, accumulator, fullWidth);\n            });\n            accumulator.x += GROUP_MARGIN_SIDE;\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                x: accumulator.x\n            });\n            accumulator.x += ELEMENT_WIDTH * (element.size || 1) + HORIZONTAL_SPACING;\n            return;\n        }\n    }\n}","export type X = {\n    x: number\n}\nexport type Y = {\n    y: number\n}\nexport type Height = {\n    height: number\n}\nexport type LayerDimensions = {\n    belowLayerY: number\n}\nexport type LayerIndex = {\n    layerIndex: number\n}\nexport type Index = {\n    index: number\n}\nexport type Key = {\n    key: string\n}\nexport type LayerPosition = LayerIndex & Index & Key\ntype Symbols = \"component\"\nexport type Node = {\n    kind: 'node'\n    name: string\n    symbol?: Symbols\n    size?: number\n    isPlaceholder?: boolean\n}\nexport type Edge<T> = {\n    from: T\n    to: T\n}\nexport type EdgeIndex = {\n    edgeIndex: number\n}\nexport type ConnectionIndex = {\n    fromIndex: number\n    toIndex: number\n}\nexport type NumberOfEdges = {\n    upperSideEdges: number\n    lowerSideEdges: number\n}\nexport type Group<N, G> = {\n    kind: 'group'\n    name: string\n    elements: ((Group<N, G> & G) | N)[]\n}\nexport type Layer<N, G> = {\n    kind: 'layer'\n    elements: ((Group<N, G> & G) | Stack<N, G> | N)[]\n}\nexport type Stack<N, G> = {\n    kind: 'stack'\n    elements: Layer<N, G>[]\n}\nexport type Graph<N, E, G> = {\n    stack: Stack<N, G>\n    edges: (Edge<N> & E)[]\n}\n\nfunction fromIsUpperLeft<T extends LayerIndex & X>(edge: Edge<T>) {\n    if (edge.from.layerIndex === edge.to.layerIndex) {\n        return edge.from.x <= edge.to.x;\n    }\n    return edge.from.layerIndex < edge.to.layerIndex;\n}\n\nexport function getUpperLeftNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.from : edge.to;\n}\n\nexport function getLowerRightNode<T extends LayerIndex & X>(edge: Edge<T>): T {\n    return fromIsUpperLeft(edge) ? edge.to : edge.from;\n}","import {and, ascending, descending} from \"./sorting\";\nimport {Edge, EdgeIndex, getLowerRightNode, getUpperLeftNode, Graph, Key, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function addLayerPositionToEdgeG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N, E & LayerPosition, G> {\n    addLayerPositionToEdge(graph.edges);\n    return graph as unknown as Graph<N, E & LayerPosition, G>;\n}\n\nexport function addLayerPositionToEdge(edges: Edge<LayerIndex & X & Key>[]) {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges\n        .map((edge, index) => Object.assign(edge, {edgeIndex: index}))\n        .forEach(edge => {\n            let key = getUpperLeftNode(edge).layerIndex;\n            let edges = groupedByLayerIndex.get(key) || [];\n            edges.push(edge);\n            groupedByLayerIndex.set(key, edges);\n        });\n\n    Array.from(groupedByLayerIndex.values()).forEach(addLayerPositionToEdgeForLayer);\n}\n\nfunction addLayerPositionToEdgeForLayer(edges: (Edge<LayerIndex & X & Key> & EdgeIndex)[]) {\n    let groupedByUpperNode = new Map<string, (Edge<LayerIndex & X & Key> & EdgeIndex)[]>();\n\n    edges.forEach(edge => {\n        let key = getUpperLeftNode(edge).key;\n        let edges = groupedByUpperNode.get(key) || [];\n        edges.push(edge);\n        groupedByUpperNode.set(key, edges);\n    });\n\n    let nodeKeys = Array.from(groupedByUpperNode.keys());\n    nodeKeys.sort();\n\n    let indexOffset = 0;\n    nodeKeys.forEach(nodeKey => {\n        let edges = groupedByUpperNode.get(nodeKey)!;\n\n        let sameLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex === getUpperLeftNode(edge).layerIndex);\n        let sameLayerBefore = sameLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let sameLayerAfter = sameLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n        let otherLayer = edges.filter(edge => getLowerRightNode(edge).layerIndex !== getUpperLeftNode(edge).layerIndex);\n        let otherLayerBefore = otherLayer.filter(edge => getLowerRightNode(edge).x <= getUpperLeftNode(edge).x);\n        let otherLayerAfter = otherLayer.filter(edge => getLowerRightNode(edge).x > getUpperLeftNode(edge).x);\n\n        sameLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerBefore.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n        otherLayerAfter.sort(and(descending(edge => getLowerRightNode(edge).x), descending(edge => edge.edgeIndex)));\n        sameLayerAfter.sort(and(ascending(edge => getLowerRightNode(edge).x), ascending(edge => edge.edgeIndex)));\n\n        let before = sameLayerBefore.concat(otherLayerBefore);\n        let after = sameLayerAfter.concat(otherLayerAfter);\n\n        function addLayerPosition(edge: Edge<LayerIndex & X>, indexInArray: number, beforeOrAfter: \"A\" | \"B\") {\n            let layerIndex = getUpperLeftNode(edge).layerIndex;\n            let index = indexOffset + indexInArray;\n            Object.assign(edge, {\n                key: nodeKey + \"_\" + beforeOrAfter + \"_\" + index,\n                index: index,\n                layerIndex: layerIndex\n            });\n        }\n\n        before.forEach((edge, index) => addLayerPosition(edge, index, \"B\"));\n        after.forEach((edge, index) => addLayerPosition(edge, index, \"A\"));\n\n        indexOffset += Math.max(before.length, after.length);\n    });\n}","import {EDGE_SPACING} from \"./styling\";\nimport {Edge, getUpperLeftNode, LayerIndex, LayerPosition, X} from \"./graphModel\";\n\nexport function heightOfEdges(edges: (Edge<LayerIndex & X> & LayerPosition)[], numberOfLayers: number): number[] {\n    let groupedByLayerIndex = new Map<number, (Edge<LayerIndex & X> & LayerPosition)[]>();\n    edges.forEach(edge => {\n        let layerIndex = getUpperLeftNode(edge).layerIndex;\n        let grouped = groupedByLayerIndex.get(layerIndex) || [];\n        grouped.push(edge);\n        groupedByLayerIndex.set(layerIndex, grouped);\n    });\n    let layerIndices = Array.from(Array(numberOfLayers).keys());\n    return layerIndices.map(layerIndex => {\n        let edgeIndices = groupedByLayerIndex.get(layerIndex)?.map(edge => edge.index) || [0];\n        return Math.max(...edgeIndices) * EDGE_SPACING;\n    })\n}","import {heightOfEdges} from \"./heightOfEdges\";\nimport {\n    ELEMENT_HEIGHT,\n    GROUP_MARGIN_BOTTOM,\n    GROUP_MARGIN_TOP,\n    MARGIN_TOP,\n    VERTICAL_SPACING\n} from \"./styling\";\nimport {Graph, Group, Height, Layer, LayerDimensions, LayerIndex, LayerPosition, Node, Stack, X, Y} from \"./graphModel\";\n\nexport function heightOfNodes(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(heightOfNodes)\n                .map((height, index) => height + (index > 0 ? VERTICAL_SPACING : 0))\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodes));\n        case \"group\": {\n            return GROUP_MARGIN_TOP + Math.max(...element.elements.map(heightOfNodes)) + GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nexport function heightOfNodesOnlyFirstLayerOfNestedStacks(\n    element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>\n): number {\n    switch (element.kind) {\n        case \"stack\":\n            if (element.elements.length === 0) return 0;\n            return heightOfNodesOnlyFirstLayerOfNestedStacks(element.elements[0]);\n        case \"layer\":\n            return Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks));\n        case \"group\": {\n            return GROUP_MARGIN_TOP +\n                Math.max(...element.elements.map(heightOfNodesOnlyFirstLayerOfNestedStacks)) +\n                GROUP_MARGIN_BOTTOM;\n        }\n        case \"node\":\n            if (element.isPlaceholder) return 0;\n            return ELEMENT_HEIGHT;\n    }\n}\n\nfunction groupNestingLevel(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\": {\n            if (element.elements.length === 0) return 0;\n            // Ignore the nesting of the elements below the first one\n            return groupNestingLevel(element.elements[0]);\n        }\n        case \"layer\":\n            return Math.max(...element.elements.map(groupNestingLevel));\n        case \"group\":\n            return Math.max(...element.elements.map(groupNestingLevel)) + 1;\n        case \"node\":\n            return 0;\n    }\n}\n\nexport function addYToNodeG<N extends (Node & LayerIndex & X), E extends LayerPosition, G extends LayerIndex>(\n    graph: Graph<N, E, G>\n): Graph<N & Y & LayerDimensions, E, G & Y & Height> {\n    let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n    addYToNode(graph.stack, {y: MARGIN_TOP, nodeY: 0, groupHeight: 0, belowLayerY: 0}, heightOfAllEdges);\n    return graph as unknown as Graph<N & Y & LayerDimensions, E, G & Y & Height>;\n}\n\nexport function addYToNode<N extends Node & LayerIndex, G extends LayerIndex>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { y: number, nodeY: number, groupHeight: number, belowLayerY: number },\n    heightOfEdges: number[]\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            let old = {\n                y: accumulator.y,\n                nodeY: accumulator.nodeY,\n                belowLayerY: accumulator.belowLayerY\n            };\n            element.elements.forEach((layer, layerIndex) => {\n                addYToNode(layer, accumulator, heightOfEdges);\n            });\n            accumulator.y = old.y;\n            accumulator.nodeY = old.nodeY;\n            accumulator.belowLayerY = old.belowLayerY;\n            return;\n        }\n        case \"layer\": {\n            accumulator.nodeY = accumulator.y + groupNestingLevel(element) * GROUP_MARGIN_TOP;\n            accumulator.groupHeight = groupNestingLevel(element) * (GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM) + ELEMENT_HEIGHT;\n            accumulator.belowLayerY = accumulator.y + heightOfNodesOnlyFirstLayerOfNestedStacks(element) + VERTICAL_SPACING;\n            element.elements.forEach(nestedElement => {\n                addYToNode(nestedElement, accumulator, heightOfEdges);\n            });\n            accumulator.y += heightOfNodes(element) + VERTICAL_SPACING;\n            return;\n        }\n        case \"group\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.y + additionalEdgeHeight,\n                height: accumulator.groupHeight\n            });\n\n            accumulator.y += GROUP_MARGIN_TOP;\n            accumulator.groupHeight -= GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            element.elements.forEach(node => {\n                addYToNode(node, accumulator, heightOfEdges);\n            });\n            accumulator.y -= GROUP_MARGIN_TOP;\n            accumulator.groupHeight += GROUP_MARGIN_TOP + GROUP_MARGIN_BOTTOM;\n            return;\n        }\n        case \"node\": {\n            let additionalEdgeHeight = heightOfEdges.slice(0, element.layerIndex).reduce((sum, add) => sum + add, 0);\n            Object.assign(element, {\n                y: accumulator.nodeY + additionalEdgeHeight,\n                belowLayerY: accumulator.belowLayerY + additionalEdgeHeight\n            });\n            return;\n        }\n    }\n}","import {ascending, descending} from \"./sorting\";\nimport {ConnectionIndex, Edge, Graph, Key, LayerIndex, NumberOfEdges, X} from \"./graphModel\";\n\nexport function addConnectionIndexAndNumberOfEdgesG<N extends LayerIndex & X & Key, E, G>(graph: Graph<N, E, G>):\n    Graph<N & NumberOfEdges, E & ConnectionIndex, G> {\n    addConnectionIndexAndNumberOfEdges(graph.edges);\n    return graph as unknown as Graph<N & NumberOfEdges, E & ConnectionIndex, G>;\n}\n\nexport function addConnectionIndexAndNumberOfEdges(edges: Edge<LayerIndex & X & Key>[]) {\n    type NodeSide = {\n        node: LayerIndex & X\n        side: \"LOWER\" | \"UPPER\"\n        edgeEnds: EdgeEnd[]\n    }\n\n    type EdgeEnd = {\n        reverseNode: LayerIndex & X\n        setIndex: (index: number) => void\n    }\n\n    let groupedByNodeAndSide = new Map<string, NodeSide>();\n\n    function addEdgeEnd(firstNode: LayerIndex & X & Key, secondNode: LayerIndex & X, setIndex: (index: number) => void) {\n        let side: \"LOWER\" | \"UPPER\" = firstNode.layerIndex <= secondNode.layerIndex ? \"LOWER\" : \"UPPER\";\n        let key = firstNode.key + side;\n        let nodeSide: NodeSide = groupedByNodeAndSide.get(key) || {\n            node: firstNode,\n            side: side,\n            edgeEnds: []\n        };\n        nodeSide.edgeEnds.push({\n            reverseNode: secondNode,\n            setIndex: setIndex\n        });\n        groupedByNodeAndSide.set(key, nodeSide);\n    }\n\n    edges.forEach(edge => {\n        addEdgeEnd(edge.from, edge.to, index => Object.assign(edge, {fromIndex: index}));\n        addEdgeEnd(edge.to, edge.from, index => Object.assign(edge, {toIndex: index}));\n    });\n\n    Array.from(groupedByNodeAndSide.values()).forEach(({edgeEnds, node, side}) => {\n        let sameLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex === node.layerIndex);\n        let before = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x <= node.x);\n        let after = sameLayer.filter(edgeEnd => edgeEnd.reverseNode.x >= node.x);\n        let otherLayer = edgeEnds.filter(edgeEnd => edgeEnd.reverseNode.layerIndex !== node.layerIndex);\n\n        before.sort(descending(e => e.reverseNode.x));\n        otherLayer.sort(ascending(e => e.reverseNode.x));\n        after.sort(descending(e => e.reverseNode.x));\n\n        let all = before.concat(otherLayer).concat(after);\n        all.forEach((edgeEnd, index) => {\n            edgeEnd.setIndex(index);\n        });\n        if (side === \"UPPER\") {\n            Object.assign(node, {\n                upperSideEdges: edgeEnds.length\n            });\n        } else {\n            Object.assign(node, {\n                lowerSideEdges: edgeEnds.length\n            });\n        }\n    });\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allNodes<N extends Node, G, E>(element: Stack<N, G> | Group<N, G> | N): N[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allNodes);\n        case \"group\":\n            return element.elements.flatMap(allNodes);\n        case \"node\":\n            return [element];\n    }\n}","import {Group, Node, Stack} from \"./graphModel\";\n\nexport function allGroups<N extends Node, G, E>(element: Stack<N, G> | (Group<N, G> & G) | N): (Group<N, G> & G)[] {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements.flatMap(layer => layer.elements).flatMap(allGroups);\n        case \"group\":\n            return [element].concat(element.elements.flatMap(allGroups));\n        case \"node\":\n            return [];\n    }\n}","import React from \"react\";\nimport {STROKE_WIDTH} from \"./styling\";\n\nexport type Symbol = {\n    x: number\n    y: number\n    width: number\n    symbolKey: string\n}\nexport const ComponentSymbol: React.FC<Symbol> = symbol => {\n    const symbolHeightRelative = 1.1;\n    const barWidthRelative = 0.4;\n    const barHeightRelative = 0.15;\n    const barWidthAbsolute = symbol.width * barWidthRelative;\n    const barHeightAbsolute = symbol.width * barHeightRelative;\n    return (\n        <g key={symbol.symbolKey}>\n            <rect\n                x={symbol.x + barWidthAbsolute / 2} y={symbol.y}\n                width={symbol.width * (1 - barWidthRelative / 2)} height={symbol.width * symbolHeightRelative}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n            <rect\n                x={symbol.x} y={symbol.y + barHeightAbsolute * 3}\n                width={barWidthAbsolute} height={barHeightAbsolute}\n                fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, STROKE_WIDTH, SYMBOL_SPACING, SYMBOL_WIDTH, TEXT_PADDING} from \"./styling\";\nimport {Key, Node, X, Y} from \"./graphModel\";\nimport {ComponentSymbol} from \"./Symbols\";\n\nexport const NodeShape: React.FC<Node & X & Y & Key> = node => {\n    if (node.isPlaceholder) return null;\n\n    let isComponent = node.symbol === \"component\";\n    return (\n        <g key={node.key}>\n            <rect data-testid=\"rect\"\n                  x={node.x} y={node.y}\n                  width={width(node)} height={ELEMENT_HEIGHT}\n                  fill=\"lightgrey\" strokeWidth={STROKE_WIDTH} stroke=\"black\"/>\n\n            <text x={node.x + TEXT_PADDING} y={node.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + node.key + \")\"}>{node.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + node.key}>\n                <rect\n                    x={node.x + TEXT_PADDING} y={node.y}\n                    width={width(node) - 2 * TEXT_PADDING - (isComponent ? (SYMBOL_WIDTH + SYMBOL_SPACING) : 0)}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n\n            {isComponent ?\n                <ComponentSymbol\n                    symbolKey={node.key + \"CS\"}\n                    x={node.x + width(node) - SYMBOL_WIDTH - SYMBOL_SPACING}\n                    y={node.y + SYMBOL_SPACING}\n                    width={SYMBOL_WIDTH}/>\n                : \"\"}\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {ELEMENT_HEIGHT, GROUP_MARGIN_SIDE, STROKE_WIDTH} from \"./styling\";\nimport {Group, Height, Key, Node, X, Y} from \"./graphModel\";\n\nexport const GroupShape: React.FC<Group<Node, unknown> & X & Y & Key & Height> = group => {\n    return (\n        <g key={group.key}>\n            <rect\n                x={group.x} y={group.y}\n                width={width(group)}\n                height={group.height}\n                fill=\"none\" strokeWidth={STROKE_WIDTH} stroke=\"grey\"/>\n\n            <text x={group.x + GROUP_MARGIN_SIDE} y={group.y + ELEMENT_HEIGHT / 2} fill=\"black\"\n                  clipPath={\"url(#clip-element-text-\" + group.key + \")\"}>{group.name}\n            </text>\n\n            <clipPath id={\"clip-element-text-\" + group.key}>\n                <rect\n                    x={group.x + GROUP_MARGIN_SIDE} y={group.y}\n                    width={width(group) - 2 * GROUP_MARGIN_SIDE}\n                    height={ELEMENT_HEIGHT}/>\n            </clipPath>\n        </g>\n    );\n};","import React from \"react\";\nimport {width} from \"./width\";\nimport {EDGE_SPACING, STROKE_WIDTH, VERTICAL_SPACING} from \"./styling\";\nimport {\n    ConnectionIndex,\n    Edge,\n    getUpperLeftNode,\n    LayerDimensions, LayerIndex,\n    LayerPosition,\n    Node,\n    NumberOfEdges, X,\n    Y\n} from \"./graphModel\";\nimport {heightOfNodes} from \"./addYToNode\";\n\nfunction edgeEndCoordinates<N extends Node & LayerIndex & X & Y & NumberOfEdges>(\n    node: N, edgeIndex: number, otherNode: N\n) {\n    let onLowerSide = node.layerIndex <= otherNode.layerIndex;\n    let nodeCenteringOffset = (width(node) - ((onLowerSide ? node.lowerSideEdges : node.upperSideEdges) - 1) * EDGE_SPACING) / 2;\n    return {\n        x: node.x + nodeCenteringOffset + edgeIndex * EDGE_SPACING,\n        y: node.y + (onLowerSide ? heightOfNodes(node) : 0)\n    };\n}\n\nexport const EdgeShape: React.FC<Edge<Node & LayerIndex & X & Y & LayerDimensions & NumberOfEdges> & LayerPosition & ConnectionIndex> = edge => {\n    let fromNode = edgeEndCoordinates(edge.from, edge.fromIndex, edge.to);\n    let upperNodeEdgesY = getUpperLeftNode(edge).belowLayerY - VERTICAL_SPACING / 2 + edge.index * EDGE_SPACING;\n    let toNode = edgeEndCoordinates(edge.to, edge.toIndex, edge.from);\n    return (\n        <path key={edge.key} d={\n            \"M \" + fromNode.x + \" \" + fromNode.y + \" \" +\n            \"L \" + fromNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + upperNodeEdgesY + \" \" +\n            \"L \" + toNode.x + \" \" + toNode.y\n        }\n              stroke=\"black\"\n              strokeWidth={STROKE_WIDTH}\n              fill=\"none\"\n        />\n    );\n};","import {Graph, Group, Layer, LayerIndex, Node, Stack} from \"./graphModel\";\n\nfunction numberOfLayers(element: Node | Stack<Node, unknown> | Layer<Node, unknown> | Group<Node, unknown>): number {\n    switch (element.kind) {\n        case \"stack\":\n            return element.elements\n                .map(numberOfLayers)\n                .reduce((sum, add) => sum + add, 0);\n        case \"layer\":\n            return Math.max(...element.elements.map(numberOfLayers));\n        case \"group\": {\n            return Math.max(...element.elements.map(numberOfLayers));\n        }\n        case \"node\":\n            return 1;\n    }\n}\n\nexport function addLayerIndexToNodeG<N extends Node, E, G>(graph: Graph<N, E, G>):\n    Graph<N & LayerIndex, E, G & LayerIndex> {\n    addLayerIndexToNode(graph.stack);\n    return graph as unknown as Graph<N & LayerIndex, E, G & LayerIndex>;\n}\n\nexport function addLayerIndexToNode<N extends Node, G>(\n    element: N | Group<N, G> | Layer<N, G> | Stack<N, G>,\n    layerIndex: number = 0\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(nestedElement => {\n                addLayerIndexToNode(nestedElement, layerIndex);\n                layerIndex += numberOfLayers(nestedElement);\n            });\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => {\n                addLayerIndexToNode(group, layerIndex);\n            });\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n\n            element.elements.forEach(node => {\n                addLayerIndexToNode(node, layerIndex);\n            });\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                layerIndex: layerIndex\n            });\n            return;\n        }\n    }\n}","import {Graph, Layer, LayerIndex, Node} from \"./graphModel\";\n\nexport function insertPlaceholdersInMultilayerEdges(graph: Graph<Node & LayerIndex, unknown, LayerIndex>): Graph<Node & LayerIndex, unknown, LayerIndex> {\n    return {\n        stack: graph.stack,\n        edges: graph.edges\n            .flatMap(edge => {\n                if (Math.abs(edge.from.layerIndex - edge.to.layerIndex) <= 1) return edge;\n\n                let from = Math.min(edge.from.layerIndex, edge.to.layerIndex);\n                let to = Math.max(edge.from.layerIndex, edge.to.layerIndex);\n                let newEdges = [];\n                let last = edge.from.layerIndex < edge.to.layerIndex ? edge.from : edge.to;\n                let end = edge.from.layerIndex >= edge.to.layerIndex ? edge.from : edge.to;\n                for (let i = from + 1; i < to; i++) {\n                    let placeholder: Node & LayerIndex = {\n                        kind: \"node\",\n                        name: \"\",\n                        size: 0.01,\n                        isPlaceholder: true,\n                        layerIndex: i\n                    };\n                    let layer: Layer<Node & LayerIndex, LayerIndex> = graph.stack.elements[i];\n                    layer.elements.splice(0, 0, placeholder);\n                    newEdges.push({from: last, to: placeholder});\n                    last = placeholder;\n                }\n                newEdges.push({from: last, to: end});\n                return newEdges;\n            })\n    };\n}","import {Graph, Group, Key, Layer, Node, Stack} from \"./graphModel\";\n\nexport function addKeyToNodeG<N extends Node, E, G>(\n    graph: Graph<N, E, G>\n): Graph<N & Key, E, G & Key> {\n    addKeyToNode(graph.stack);\n    return graph as unknown as Graph<N & Key, E, G & Key>;\n}\n\nexport function addKeyToNode<N extends Node, G>(\n    element: N | (Group<N, G> & G) | Layer<N, G> | Stack<N, G>,\n    accumulator: { globalCounter: number } = {globalCounter: 0}\n) {\n    switch (element.kind) {\n        case \"stack\": {\n            element.elements.forEach(groups => addKeyToNode(groups, accumulator));\n            return;\n        }\n        case \"layer\": {\n            element.elements.forEach(group => addKeyToNode(group, accumulator));\n            return;\n        }\n        case \"group\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n\n            element.elements.forEach(node => addKeyToNode(node, accumulator));\n            return;\n        }\n        case \"node\": {\n            Object.assign(element, {\n                key: \"\" + accumulator.globalCounter\n            });\n            accumulator.globalCounter++;\n            return;\n        }\n    }\n}","import React from \"react\";\nimport {addXToNodeG} from \"./addXToNode\";\nimport {addLayerPositionToEdgeG} from \"./addLayerPositionToEdge\";\nimport {addYToNodeG, heightOfNodes} from \"./addYToNode\";\nimport {addConnectionIndexAndNumberOfEdgesG} from \"./addConnectionIndexAndNumberOfEdges\";\nimport {allNodes} from \"./allNodes\";\nimport {allGroups} from \"./allGroups\";\nimport {heightOfEdges} from \"./heightOfEdges\";\nimport {NodeShape} from \"./NodeShape\";\nimport {GroupShape} from \"./GroupShape\";\nimport {EdgeShape} from \"./EdgeShape\";\nimport {width} from \"./width\";\nimport {MARGIN_SIDE, MARGIN_TOP, VERTICAL_SPACING} from \"./styling\";\nimport {Graph, Node} from \"./graphModel\";\nimport {addLayerIndexToNodeG} from \"./addLayerIndexToNode\";\nimport {insertPlaceholdersInMultilayerEdges} from \"./insertPlaceholdersInMultilayerEdges\";\nimport {addKeyToNodeG} from \"./addKeyToNode\";\n\nexport const Diagram: React.FC<Graph<Node, unknown, unknown>> = graph => {\n    return [graph]\n        .map(addLayerIndexToNodeG)\n        .map(insertPlaceholdersInMultilayerEdges)\n        .map(addKeyToNodeG)\n        .map(addXToNodeG)\n        .map(addLayerPositionToEdgeG)\n        .map(addYToNodeG)\n        .map(addConnectionIndexAndNumberOfEdgesG)\n        .map(graph => {\n            let heightOfAllEdges = heightOfEdges(graph.edges, graph.stack.elements.length);\n            let overallWidth = width(graph.stack) + 2 * MARGIN_SIDE;\n            let height = heightOfNodes(graph.stack) + VERTICAL_SPACING +\n                heightOfAllEdges.reduce((sum, add) => sum + add) +\n                2 * MARGIN_TOP;\n\n            return (\n                <svg viewBox={\"0 0 \" + overallWidth + \" \" + height}>\n                    {allNodes(graph.stack).map(NodeShape)}\n                    {allGroups(graph.stack).map(GroupShape)}\n                    {graph.edges.map(EdgeShape)}\n                </svg>\n            );\n        })[0];\n};"],"sourceRoot":""}